
USE PROYECTO_CONTROL_HORAS


CREATE PROCEDURE [dbo].[REPORTEMARGENquarterANIO]
@ANIO INT
AS

BEGIN
    DECLARE @YearActual INT = @ANIO; -- Año actual

    -- CTE para generar trimestres del año actual
    WITH Trimestres AS (
        SELECT 1 AS Quarter, @YearActual AS Year
        UNION ALL SELECT 2, @YearActual
        UNION ALL SELECT 3, @YearActual
        UNION ALL SELECT 4, @YearActual
    ),
    -- CTE para obtener los montos de gastos y servicios por proyecto
    GastosServicios AS (
        SELECT 
            PG.ID_PROYECTO,
            SUM(PG.MONTO) AS TOTAL_GASTOS
        FROM PROYECTO_GASTOS PG
        GROUP BY PG.ID_PROYECTO
    ),
    Servicios AS (
        SELECT 
            PS.ID_PROYECTO,
            SUM(PS.MONTO) AS TOTAL_SERVICIOS
        FROM PROYECTO_SERVICIO PS
        GROUP BY PS.ID_PROYECTO
    ),
    -- CTE para calcular el total del bono por trimestre y año
    TotalBono AS (
        SELECT 
            BS.TRIMESTE,
            BS.ANIO,
            SUM(B.MONTO * 3) AS MONTO_TOTAL_BONO -- Multiplicamos el bono por 3 socios
        FROM 
            BONOSOCIO BS
        INNER JOIN BONOS B ON B.ID = BS.IDBONO
        GROUP BY 
            BS.TRIMESTE, BS.ANIO
    )
    -- Seleccionamos los datos de cada proyecto y calculamos los costos agrupados por trimestre
    SELECT 
        T.Quarter, 
        T.Year,
        COALESCE(P.NUM_PROYECTO, 'Sin Proyecto') AS NUM_PROYECTO,
        COALESCE(P.NOMBRE, 'Sin Proyecto') AS NOMBRE_PROYECTO,
        COALESCE(SUM(PRE.MONTO), 0) AS MONTO_PROYECTO, -- Suma de ingresos por proyecto
        
        -- Suma total de gastos por proyecto
        COALESCE(SUM(GS.TOTAL_GASTOS), 0) AS TOTAL_GASTOS,
             
        -- Suma total de servicios por proyecto
        COALESCE(SUM(SV.TOTAL_SERVICIOS), 0) AS TOTAL_SERVICIOS,
        
        -- Calcular costos por cada tipo de horas y sumarlos
        COALESCE(SUM(HU.HH_SOCIOS * HC.COSTOSOCIO), 0) AS COSTO_SOCIOS,
        COALESCE(SUM(HU.HH_STAFF * HC.COSTOSTAFF), 0) AS COSTO_STAFF,
        COALESCE(SUM(HU.HH_CONSULTORA * HC.COSTOCONSULTORA), 0) AS COSTO_CONSULTORA,
        COALESCE(SUM(HU.HH_CONSULTORB * HC.COSTOCONSULTORB), 0) AS COSTO_CONSULTORB,
        COALESCE(SUM(HU.HH_CONSULTORC * HC.COSTOCONSULTORC), 0) AS COSTO_CONSULTORC,

        -- Agregar el monto total del bono (si existe) para el trimestre y año correspondiente
        COALESCE(TB.MONTO_TOTAL_BONO, 0) AS MONTO_TOTAL_BONO,
        
        -- Cálculo del margen de contribución para cada trimestre
        COALESCE(SUM(PRE.MONTO), 0) - (
            COALESCE(SUM(HU.HH_SOCIOS * HC.COSTOSOCIO), 0) +
            COALESCE(SUM(HU.HH_STAFF * HC.COSTOSTAFF), 0) +
            COALESCE(SUM(HU.HH_CONSULTORA * HC.COSTOCONSULTORA), 0) +
            COALESCE(SUM(HU.HH_CONSULTORB * HC.COSTOCONSULTORB), 0) +
            COALESCE(SUM(HU.HH_CONSULTORC * HC.COSTOCONSULTORC), 0) +
            COALESCE(SUM(GS.TOTAL_GASTOS), 0) +
            COALESCE(SUM(SV.TOTAL_SERVICIOS), 0) 
        ) AS MARGEN_DE_CONTRIBUCION
    FROM 
        Trimestres T
    LEFT JOIN PROYECTO P ON P.FECHA_INICIO >= DATEADD(MONTH, (T.Quarter - 1) * 3, CAST(CONCAT(T.Year, '-01-01') AS DATE)) 
                                                  AND P.FECHA_INICIO < DATEADD(MONTH, T.Quarter * 3, CAST(CONCAT(T.Year, '-01-01') AS DATE))
    LEFT JOIN PRESUPUESTO PRE ON PRE.ID = P.ID
    LEFT JOIN HH_USUARIO_HISTORIAL HU ON HU.ID_PROYECTO = P.ID
    LEFT JOIN HISTORIAL_COSTOS_PROYECTOS HC ON HC.IDPROYECTO = P.ID
    LEFT JOIN GastosServicios GS ON GS.ID_PROYECTO = P.ID
    LEFT JOIN Servicios SV ON SV.ID_PROYECTO = P.ID
    LEFT JOIN TotalBono TB ON TB.TRIMESTE = T.Quarter AND TB.ANIO = T.Year
    WHERE P.STATUS_PROYECTO = 2
    -- Agrupamos por trimestre, año y datos de costos
    GROUP BY 
        T.Quarter, T.Year, 
        P.NUM_PROYECTO, P.NOMBRE,
        HC.COSTOCONSULTORA, HC.COSTOCONSULTORB, HC.COSTOCONSULTORC,
        HC.COSTOSOCIO, HC.COSTOSTAFF,
        HU.HH_CONSULTORA, HU.HH_CONSULTORB, HU.HH_CONSULTORC, HU.HH_SOCIOS, HU.HH_STAFF,
        TB.MONTO_TOTAL_BONO
END;



ALTER PROCEDURE [dbo].[REPORTEMARGENquarter]
AS
BEGIN
    DECLARE @YearActual INT = YEAR(GETDATE()); -- Año actual

    -- CTE para generar trimestres del año actual
    WITH Trimestres AS (
        SELECT 1 AS Quarter, @YearActual AS Year
        UNION ALL SELECT 2, @YearActual
        UNION ALL SELECT 3, @YearActual
        UNION ALL SELECT 4, @YearActual
    ),
    -- CTE para obtener los montos de gastos y servicios por proyecto
    GastosServicios AS (
        SELECT 
            PG.ID_PROYECTO,
            SUM(PG.MONTO) AS TOTAL_GASTOS
        FROM PROYECTO_GASTOS PG
        GROUP BY PG.ID_PROYECTO
    ),
    Servicios AS (
        SELECT 
            PS.ID_PROYECTO,
            SUM(PS.MONTO) AS TOTAL_SERVICIOS
        FROM PROYECTO_SERVICIO PS
        GROUP BY PS.ID_PROYECTO
    ),
    -- CTE para calcular el total del bono por trimestre y año
    TotalBono AS (
        SELECT 
            BS.TRIMESTE,
            BS.ANIO,
            SUM(B.MONTO * 3) AS MONTO_TOTAL_BONO -- Multiplicamos el bono por 3 socios
        FROM 
            BONOSOCIO BS
        INNER JOIN BONOS B ON B.ID = BS.IDBONO
        GROUP BY 
            BS.TRIMESTE, BS.ANIO
    )
    -- Seleccionamos los datos de cada proyecto y calculamos los costos agrupados por trimestre
    SELECT 
        T.Quarter, 
        T.Year,
        COALESCE(P.NUM_PROYECTO, 'Sin Proyecto') AS NUM_PROYECTO,
        COALESCE(P.NOMBRE, 'Sin Proyecto') AS NOMBRE_PROYECTO,
        COALESCE(SUM(PRE.MONTO), 0) AS MONTO_PROYECTO, -- Suma de ingresos por proyecto
        
        -- Suma total de gastos por proyecto
        COALESCE(SUM(GS.TOTAL_GASTOS), 0) AS TOTAL_GASTOS,
             
        -- Suma total de servicios por proyecto
        COALESCE(SUM(SV.TOTAL_SERVICIOS), 0) AS TOTAL_SERVICIOS,
        
        -- Calcular costos por cada tipo de horas y sumarlos
        COALESCE(SUM(HU.HH_SOCIOS * HC.COSTOSOCIO), 0) AS COSTO_SOCIOS,
        COALESCE(SUM(HU.HH_STAFF * HC.COSTOSTAFF), 0) AS COSTO_STAFF,
        COALESCE(SUM(HU.HH_CONSULTORA * HC.COSTOCONSULTORA), 0) AS COSTO_CONSULTORA,
        COALESCE(SUM(HU.HH_CONSULTORB * HC.COSTOCONSULTORB), 0) AS COSTO_CONSULTORB,
        COALESCE(SUM(HU.HH_CONSULTORC * HC.COSTOCONSULTORC), 0) AS COSTO_CONSULTORC,

        -- Agregar el monto total del bono (si existe) para el trimestre y año correspondiente
        COALESCE(TB.MONTO_TOTAL_BONO, 0) AS MONTO_TOTAL_BONO,
        
        -- Cálculo del margen de contribución para cada trimestre
        COALESCE(SUM(PRE.MONTO), 0) - (
            COALESCE(SUM(HU.HH_SOCIOS * HC.COSTOSOCIO), 0) +
            COALESCE(SUM(HU.HH_STAFF * HC.COSTOSTAFF), 0) +
            COALESCE(SUM(HU.HH_CONSULTORA * HC.COSTOCONSULTORA), 0) +
            COALESCE(SUM(HU.HH_CONSULTORB * HC.COSTOCONSULTORB), 0) +
            COALESCE(SUM(HU.HH_CONSULTORC * HC.COSTOCONSULTORC), 0) +
            COALESCE(SUM(GS.TOTAL_GASTOS), 0) +
            COALESCE(SUM(SV.TOTAL_SERVICIOS), 0) 
        ) AS MARGEN_DE_CONTRIBUCION
    FROM 
        Trimestres T
    LEFT JOIN PROYECTO P ON P.FECHA_INICIO >= DATEADD(MONTH, (T.Quarter - 1) * 3, CAST(CONCAT(T.Year, '-01-01') AS DATE)) 
                                                  AND P.FECHA_INICIO < DATEADD(MONTH, T.Quarter * 3, CAST(CONCAT(T.Year, '-01-01') AS DATE))
    LEFT JOIN PRESUPUESTO PRE ON PRE.ID = P.ID
    LEFT JOIN HH_USUARIO_HISTORIAL HU ON HU.ID_PROYECTO = P.ID
    LEFT JOIN HISTORIAL_COSTOS_PROYECTOS HC ON HC.IDPROYECTO = P.ID
    LEFT JOIN GastosServicios GS ON GS.ID_PROYECTO = P.ID
    LEFT JOIN Servicios SV ON SV.ID_PROYECTO = P.ID
    LEFT JOIN TotalBono TB ON TB.TRIMESTE = T.Quarter AND TB.ANIO = T.Year
    WHERE P.STATUS_PROYECTO = 2
    -- Agrupamos por trimestre, año y datos de costos
    GROUP BY 
        T.Quarter, T.Year, 
        P.NUM_PROYECTO, P.NOMBRE,
        HC.COSTOCONSULTORA, HC.COSTOCONSULTORB, HC.COSTOCONSULTORC,
        HC.COSTOSOCIO, HC.COSTOSTAFF,
        HU.HH_CONSULTORA, HU.HH_CONSULTORB, HU.HH_CONSULTORC, HU.HH_SOCIOS, HU.HH_STAFF,
        TB.MONTO_TOTAL_BONO
END;


ALTER PROCEDURE [dbo].[EDITAR_PROYECTO]
    @IDPROYECTO INT,
    @IDPRESUPUESTO INT,
    @MONTO DECIMAL(15,2),
    @MONEDA VARCHAR(200),
    @AFECTAIVA VARCHAR(10),
    @ID_TIPOLOGIA INT,
    @NOMBRE VARCHAR(MAX),
    @FECHA_INICIO DATE,
    @FECHA_TERMINO DATE,
    @PLAZO INT,
    @TIPO_EMPRESA INT,
    @ID_CCOSTO_UNEGOCIO INT,  
    @STATUS_PROYECTO INT,
    @PROBABILIDAD VARCHAR(200),
    @PORCENTAJE_PROBABILIDAD DECIMAL(10,2),
    @FECHA_PLAZO_NEG DATE,
    @HHSOCIOS INT,
    @HHSTAFF INT,
    @HHCONSULTORA INT,
    @HHCONSULTORB INT,
    @HHCONSULTORC INT,
    @IDSEGMENTOSOCIO INT,
    @IDSEGMENTOSTAFF INT,
    @IDSEGMENTOCONSULTORA INT,
    @IDSEGMENTOCONSULTORB INT,
    @IDSEGMENTOCONSULTORC INT,
    @IDSEGMENTOFACTURA INT
AS
BEGIN
    DECLARE @MONTOIVA DECIMAL(10,2) = 0;
    IF(@AFECTAIVA = 'si')
    BEGIN
        SET @MONTOIVA = @MONTO * 0.19;
    END;

    UPDATE PRESUPUESTO 
    SET MONTO = @MONTO, 
        MONEDA = @MONEDA, 
        AFECTAIVA = @AFECTAIVA, 
        MONTOIVA = @MONTOIVA 
    WHERE ID = @IDPRESUPUESTO;

    UPDATE PROYECTO 
    SET ID_PRESUPUESTO = @IDPRESUPUESTO,
        ID_TIPOLOGIA = @ID_TIPOLOGIA,
        NOMBRE = @NOMBRE,
        FECHA_INICIO = @FECHA_INICIO,
        FECHA_TERMINO = @FECHA_TERMINO,
        PLAZO = @PLAZO,
        TIPO_EMPRESA = @TIPO_EMPRESA,
        ID_CCOSTO_UNEGOCIO = @ID_CCOSTO_UNEGOCIO,
        STATUS_PROYECTO = @STATUS_PROYECTO,
        PROBABILIDAD = @PROBABILIDAD,
        PORCENTAJE_PROBABILIDAD = @PORCENTAJE_PROBABILIDAD,
        FECHA_PLAZO_NEG = @FECHA_PLAZO_NEG 
    WHERE ID = @IDPROYECTO;

	update FACTURA set IDSEGMENTO = @IDSEGMENTOFACTURA where ID_PROYECTO=@IDPROYECTO

	EXEC ACTUALIZARCOSTO @IDPROYECTO,@STATUS_PROYECTO

    DECLARE @ESTADO INT;
    SELECT @ESTADO = STATUS_PROYECTO FROM PROYECTO WHERE ID = @IDPROYECTO;



    -- Para Consultores Externos
    DECLARE @ConsultorA INT, @ConsultorB INT, @ConsultorC INT;

    -- Asignar consultores A, B y C
    SELECT @ConsultorA = U.ID
    FROM USUARIO U
    INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
    WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A';

    SELECT @ConsultorB = U.ID
    FROM USUARIO U
    INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
    WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B';

    SELECT @ConsultorC = U.ID
    FROM USUARIO U
    INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
    WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C';

    -- Consultor A
    IF(@HHCONSULTORA <= 0)
    BEGIN
        DELETE UP
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORA=@HHCONSULTORA WHERE ID_PROYECTO=@IDPROYECTO
    END
    ELSE
    BEGIN
		DECLARE @CONSULTORAID INT;
			SELECT @CONSULTORAID=ID_USUARIO FROM USUARIO_PROYECTO UP  
			INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
			INNER JOIN RECURSO R ON R.ID=U.ID_RECURSO
			WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' AND UP.ID_PROYECTO = @IDPROYECTO
        DECLARE @COSTOUNITARIOCONSULTORA DECIMAL(10,2);
        IF(@ESTADO = 1 OR @ESTADO = 5)
        BEGIN
            SELECT @COSTOUNITARIOCONSULTORA = COSTO_UNITARIO
            FROM RECURSO R
            WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A';
        END;
		IF(@CONSULTORAID IS NULL)
		BEGIN
			 DECLARE @COSTOUNITARIOCONSULTORAA DECIMAL(10,2);
			SELECT @COSTOUNITARIOCONSULTORAA = R.COSTO_UNITARIO
			FROM USUARIO U
			INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
			WHERE U.ID = @ConsultorA;

			INSERT INTO USUARIO_PROYECTO (ID_PROYECTO, ID_USUARIO, HH_CONSULTORA, COSTOCONSULTORA, IDSEGMENTO)
			VALUES (@IDPROYECTO, @ConsultorA, @HHCONSULTORA, @COSTOUNITARIOCONSULTORAA, @IDSEGMENTOCONSULTORA);
			
			UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORA=@HHCONSULTORA WHERE ID_PROYECTO=@IDPROYECTO
		END;
		ELSE
		BEGIN
        UPDATE UP
        SET UP.HH_CONSULTORA = @HHCONSULTORA,
            UP.CostoUnitarioAsignado = CASE WHEN @ESTADO = 1 OR @ESTADO = 5 THEN @COSTOUNITARIOCONSULTORA ELSE UP.COSTOCONSULTORA END,
            UP.IDSEGMENTO = @IDSEGMENTOCONSULTORA
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORA=@HHCONSULTORA WHERE ID_PROYECTO=@IDPROYECTO
		END;
    END;

    -- Consultor B
    IF(@HHCONSULTORB <= 0)
    BEGIN
        DELETE UP
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		 UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORB=@HHCONSULTORB WHERE ID_PROYECTO=@IDPROYECTO
    END
    ELSE
    BEGIN
			DECLARE @CONSULTORBID INT;
			SELECT @CONSULTORBID=ID_USUARIO FROM USUARIO_PROYECTO UP  
			INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
			INNER JOIN RECURSO R ON R.ID=U.ID_RECURSO
			WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' AND UP.ID_PROYECTO = @IDPROYECTO

        DECLARE @COSTOUNITARIOCONSULTORB DECIMAL(10,2);
        IF(@ESTADO = 1 OR @ESTADO = 5)
        BEGIN
            SELECT @COSTOUNITARIOCONSULTORB = COSTO_UNITARIO
            FROM RECURSO R
            WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B';
        END;
		IF(@CONSULTORBID IS NULL)
		BEGIN
			 DECLARE @COSTOUNITARIOCONSULTORBB DECIMAL(10,2);
			SELECT @COSTOUNITARIOCONSULTORBB = R.COSTO_UNITARIO
			FROM USUARIO U
			INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
			WHERE U.ID = @ConsultorB;

			INSERT INTO USUARIO_PROYECTO (ID_PROYECTO, ID_USUARIO, HH_CONSULTORB, COSTOCONSULTORB, IDSEGMENTO)
			VALUES (@IDPROYECTO, @ConsultorB, @HHCONSULTORB, @COSTOUNITARIOCONSULTORBB, @IDSEGMENTOCONSULTORB);
			UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORB=@HHCONSULTORB WHERE ID_PROYECTO=@IDPROYECTO
		END;
		ELSE
		BEGIN
        UPDATE UP
        SET UP.HH_CONSULTORB = @HHCONSULTORB,
            UP.CostoUnitarioAsignado = CASE WHEN @ESTADO = 1 OR @ESTADO = 5 THEN @COSTOUNITARIOCONSULTORB ELSE UP.COSTOCONSULTORB END,
            UP.IDSEGMENTO = @IDSEGMENTOCONSULTORB
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORB=@HHCONSULTORB WHERE ID_PROYECTO=@IDPROYECTO
		END;
    END;

    -- Consultor C
	
	
    IF(@HHCONSULTORC <= 0)
	
    BEGIN
        DELETE UP
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORC=@HHCONSULTORC WHERE ID_PROYECTO=@IDPROYECTO
    END
    ELSE
    BEGIN
			DECLARE @CONSULTORCID INT;
			SELECT @CONSULTORCID=ID_USUARIO FROM USUARIO_PROYECTO UP  
			INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
			INNER JOIN RECURSO R ON R.ID=U.ID_RECURSO
			WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' AND UP.ID_PROYECTO = @IDPROYECTO

        DECLARE @COSTOUNITARIOCONSULTORC DECIMAL(10,2);
        IF(@ESTADO = 1 OR @ESTADO = 5)
        BEGIN
            SELECT @COSTOUNITARIOCONSULTORC = COSTO_UNITARIO
            FROM RECURSO R
            WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C';
        END;

		IF(@CONSULTORCID IS NULL)
		BEGIN
			 DECLARE @COSTOUNITARIOCONSULTORCC DECIMAL(10,2);
			SELECT @COSTOUNITARIOCONSULTORCC = R.COSTO_UNITARIO
			FROM USUARIO U
			INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
			WHERE U.ID = @ConsultorC;

			INSERT INTO USUARIO_PROYECTO (ID_PROYECTO, ID_USUARIO, HH_CONSULTORC, COSTOCONSULTORC, IDSEGMENTO)
			VALUES (@IDPROYECTO, @ConsultorC, @HHCONSULTORC, @COSTOUNITARIOCONSULTORCC, @IDSEGMENTOCONSULTORC);
			UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORC=@HHCONSULTORC WHERE ID_PROYECTO=@IDPROYECTO
		END;
		ELSE
		BEGIN
        UPDATE UP
        SET UP.HH_CONSULTORC = @HHCONSULTORC,
            UP.CostoUnitarioAsignado = CASE WHEN @ESTADO = 1 OR @ESTADO = 5 THEN @COSTOUNITARIOCONSULTORC ELSE UP.COSTOCONSULTORC END,
            UP.IDSEGMENTO = @IDSEGMENTOCONSULTORC
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C'
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_CONSULTORC=@HHCONSULTORC WHERE ID_PROYECTO=@IDPROYECTO
		END;
    END;


	/*HH SOCIOS*/
   IF(@HHSOCIOS <= 0)
    BEGIN
        DELETE UP
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Socio' 
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_SOCIOS=@HHSOCIOS WHERE ID_PROYECTO=@IDPROYECTO
    END
    ELSE
    BEGIN
			DECLARE @SOCIOID INT;
			SELECT @SOCIOID=ID_USUARIO FROM USUARIO_PROYECTO UP  
			INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
			INNER JOIN RECURSO R ON R.ID=U.ID_RECURSO
			WHERE R.NOMBRE_RECURSO = 'Socio'  AND UP.ID_PROYECTO = @IDPROYECTO

        DECLARE @COSTOUNITARIO DECIMAL(10,2);
        IF(@ESTADO = 1 OR @ESTADO = 5)
        BEGIN
            SELECT @COSTOUNITARIO = COSTO_UNITARIO
            FROM RECURSO R
            WHERE R.NOMBRE_RECURSO = 'Socio' ;
        END;
		IF(@SOCIOID IS NULL)
		BEGIN
			INSERT INTO USUARIO_PROYECTO (ID_PROYECTO, ID_USUARIO,HH_SOCIOS,CostoUnitarioAsignado,IDSEGMENTO)
			SELECT @IDPROYECTO, U.ID,@HHSOCIOS,@COSTOUNITARIO,@IDSEGMENTOSOCIO
			FROM USUARIO U
			INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
			WHERE R.NOMBRE_RECURSO = 'Socio';
			UPDATE HH_USUARIO_HISTORIAL SET HH_SOCIOS=@HHSOCIOS WHERE ID_PROYECTO=@IDPROYECTO
		END;
		ELSE
		BEGIN
        UPDATE UP
        SET UP.HH_SOCIOS = @HHSOCIOS,
            UP.CostoUnitarioAsignado = CASE WHEN @ESTADO = 1 OR @ESTADO = 5 THEN @COSTOUNITARIO ELSE UP.CostoUnitarioAsignado END,
            UP.IDSEGMENTO = @IDSEGMENTOSOCIO
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Socio' 
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_SOCIOS=@HHSOCIOS WHERE ID_PROYECTO=@IDPROYECTO
		END;
    END;


	/*HHSTAFF*/
	IF(@HHSTAFF <= 0)
    BEGIN
        DELETE UP
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Staff' 
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_STAFF=@HHSTAFF WHERE ID_PROYECTO=@IDPROYECTO
    END
    ELSE
    BEGIN
		DECLARE @STAFFID INT;
			SELECT @STAFFID=ID_USUARIO FROM USUARIO_PROYECTO UP  
			INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
			INNER JOIN RECURSO R ON R.ID=U.ID_RECURSO
			WHERE R.NOMBRE_RECURSO = 'Staff'  AND UP.ID_PROYECTO = @IDPROYECTO
        DECLARE @COSTOUNITARIOS DECIMAL(10,2);
        IF(@ESTADO = 1 OR @ESTADO = 5)
        BEGIN
            SELECT @COSTOUNITARIOS = COSTO_UNITARIO
            FROM RECURSO R
            WHERE R.NOMBRE_RECURSO = 'Staff' ;
        END;
		IF(@STAFFID IS NULL)
		BEGIN
			DECLARE @COSTOUNITARIOstaff DECIMAL(10,2)
			SELECT @COSTOUNITARIOstaff=COSTO_UNITARIO FROM RECURSO WHERE NOMBRE_RECURSO = 'Staff'  
			INSERT INTO USUARIO_PROYECTO (ID_PROYECTO, ID_USUARIO,HH_STAFF,CostoUnitarioAsignado,IDSEGMENTO)
			SELECT @IDPROYECTO, U.ID,@HHSTAFF,@COSTOUNITARIOstaff,@IDSEGMENTOSTAFF
			FROM USUARIO U
			INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
			WHERE R.NOMBRE_RECURSO = 'Staff';
			UPDATE HH_USUARIO_HISTORIAL SET HH_STAFF=@HHSTAFF WHERE ID_PROYECTO=@IDPROYECTO
		END;
		ELSE
		BEGIN
        UPDATE UP
        SET UP.HH_STAFF = @HHSTAFF,
            UP.CostoUnitarioAsignado = CASE WHEN @ESTADO = 1 OR @ESTADO = 5 THEN @COSTOUNITARIOS ELSE UP.CostoUnitarioAsignado END,
            UP.IDSEGMENTO = @IDSEGMENTOSTAFF
        FROM USUARIO_PROYECTO UP
        INNER JOIN USUARIO U ON UP.ID_USUARIO = U.ID
        INNER JOIN RECURSO R ON U.ID_RECURSO = R.ID
        WHERE R.NOMBRE_RECURSO = 'Staff' 
          AND UP.ID_PROYECTO = @IDPROYECTO;
		  UPDATE HH_USUARIO_HISTORIAL SET HH_STAFF=@HHSTAFF WHERE ID_PROYECTO=@IDPROYECTO
		END;
    END;
	IF(@STATUS_PROYECTO=1)
	BEGIN
	EXEC INSERTARNEGOCIACION @IDPROYECTO,@AFECTAIVA,@MONTO,@PLAZO,@FECHA_INICIO,@FECHA_TERMINO,@FECHA_PLAZO_NEG,@PROBABILIDAD,@PORCENTAJE_PROBABILIDAD,
@HHSOCIOS,@HHSTAFF,@HHCONSULTORA,@HHCONSULTORB,@HHCONSULTORC
	END;
	IF(@STATUS_PROYECTO=2)
	BEGIN
	EXEC INGRESARMONTOBONO @MONTO
	END;
END;




CREATE TABLE TOTALFACTURAEJECUCION(

ID INT IDENTITY(1,1) PRIMARY KEY NOT NULL,
ANIO INT,
TRIMESTRE INT,
TOTAL DECIMAL(15,2)

);


CREATE TABLE BONOSOCIO(

ID INT identity(1,1) PRIMARY KEY NOT NULL,
IDBONO INT NOT NULL, 
IDRECURSO INT NOT NULL,
ANIO INT,
TRIMESTE INT
CONSTRAINT IDBONOFK FOREIGN KEY(IDBONO) references BONOS(ID),
CONSTRAINT IDRECURSOBONO FOREIGN KEY(IDRECURSO) REFERENCES RECURSO(ID)
)





CREATE PROCEDURE INGRESARMONTOBONO
    @MONTO DECIMAL(15,2)
AS
BEGIN
    DECLARE @FECHA DATETIME = GETDATE(); -- Obtener la fecha actual
    DECLARE @ANIO INT = YEAR(@FECHA); -- Obtener el año de la fecha
    DECLARE @TRIMESTRE INT = DATEPART(QUARTER, @FECHA); -- Obtener el trimestre de la fecha
    DECLARE @TOTAL DECIMAL(15,2);

    -- Verificar si ya existe un registro con el mismo año y trimestre
    IF EXISTS (SELECT 1 FROM TOTALFACTURAEJECUCION WHERE ANIO = @ANIO AND TRIMESTRE = @TRIMESTRE)
    BEGIN
        -- Si existe, actualizamos el total sumando el monto ingresado
        UPDATE TOTALFACTURAEJECUCION
        SET TOTAL = TOTAL + @MONTO
        WHERE ANIO = @ANIO AND TRIMESTRE = @TRIMESTRE;
    END
    ELSE
    BEGIN
        -- Si no existe, insertamos un nuevo registro
        INSERT INTO TOTALFACTURAEJECUCION (ANIO, TRIMESTRE, TOTAL)
        VALUES (@ANIO, @TRIMESTRE, @MONTO);
    END

    -- Obtener el total actualizado
    SELECT @TOTAL = TOTAL FROM TOTALFACTURAEJECUCION WHERE ANIO = @ANIO AND TRIMESTRE = @TRIMESTRE;

    -- Verificar si es el último día del trimestre
    DECLARE @UltimoDiaTrimestre DATE;
    SET @UltimoDiaTrimestre = CASE @TRIMESTRE
                                WHEN 1 THEN CAST(CAST(@ANIO AS VARCHAR) + '-03-31' AS DATE)
                                WHEN 2 THEN CAST(CAST(@ANIO AS VARCHAR) + '-06-30' AS DATE)
                                WHEN 3 THEN CAST(CAST(@ANIO AS VARCHAR) + '-09-30' AS DATE)
                                WHEN 4 THEN CAST(CAST(@ANIO AS VARCHAR) + '-12-31' AS DATE)
                              END;

    IF CAST(@FECHA AS DATE) = @UltimoDiaTrimestre
    BEGIN
        -- Buscar el ID del bono en la tabla BONO en base al total acumulado
        DECLARE @IDBONO INT;
        SELECT TOP 1 @IDBONO = ID
        FROM BONOS
        WHERE ANIO = @ANIO
          AND @TOTAL BETWEEN VALORREAL AND ISNULL(VALORFINAL, @TOTAL) -- Verifica el rango de bonos
        ORDER BY PORCENTAJE DESC; -- Obtener el bono con el porcentaje más alto

        -- Insertar en la tabla BONOSOCIO si se cumple la condición del bono
        IF @IDBONO IS NOT NULL
        BEGIN
            -- Obtener los IDs de los recursos que son "Socio"
            INSERT INTO BONOSOCIO (IDBONO, IDRECURSO, ANIO, TRIMESTE)
            SELECT @IDBONO, ID, @ANIO, @TRIMESTRE
            FROM RECURSO
            WHERE NOMBRE_RECURSO = 'Socio';
        END
    END
END;
