



USE PROYECTO_CONTROL_HORAS

/*ALTER TABLE PLANILLA_USUSARIO_PROYECTO
ADD REGISTRO_HH_PROYECTO INT NOT NULL


CREATE TABLE ACTIVIDADES(
	ID INT IDENTITY (1,1) PRIMARY KEY NOT NULL,	
	NOMBRE VARCHAR(MAX) NOT NULL

);


ALTER TABLE PLANILLA_USUSARIO_PROYECTO
ADD ID_ACTIVIDAD INT

ALTER TABLE PLANILLA_USUSARIO_PROYECTO
ADD CONSTRAINT ACTIVIDAD_FK FOREIGN KEY(ID_ACTIVIDAD) REFERENCES ACTIVIDADES(ID);

ALTER TABLE PLANILLA
ADD FECHA DATE NOT NULL*/




/*ALTER PROCEDURE HH_USUARIO_PROYECTO
@IDUSUARIO INT,
@IDPROYECTO INT
AS
BEGIN
    -- Declaración de variables
    DECLARE @RECURSO VARCHAR(100);
    DECLARE @TIPO_CONSULTOR VARCHAR(200);

    -- Obtener el recurso y el tipo de consultor
    SELECT 
        @RECURSO = R.NOMBRE_RECURSO,
        @TIPO_CONSULTOR = R.TIPO_CONSULTOR
    FROM USUARIO_PROYECTO UP
    INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
    WHERE UP.ID_USUARIO = @IDUSUARIO AND UP.ID_PROYECTO = @IDPROYECTO;

    -- Selección de horas asignadas según el tipo de recurso
    SELECT 
        UP.ID_USUARIO AS 'ID_USUARIO',
        R.NOMBRE_RECURSO AS 'RECURSO',
        U.NOMBRE AS 'NOMBRE_USUARIO',
        UP.ID_PROYECTO AS 'ID_PROYECTO',
        CASE 
            WHEN @RECURSO = 'Socio' THEN UP.HH_SOCIOS
            WHEN @RECURSO = 'Staff' THEN UP.HH_STAFF
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor A' THEN UP.HH_CONSULTORA
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor B' THEN UP.HH_CONSULTORB
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor C' THEN UP.HH_CONSULTORC
            ELSE 0 -- Si no coincide, asigna 0 horas
        END AS 'HH_ASIGNADAS',
        R.TIPO_CONSULTOR AS 'TIPO_CONSULTOR'
    FROM USUARIO_PROYECTO UP
    INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
    WHERE UP.ID_USUARIO = @IDUSUARIO AND UP.ID_PROYECTO = @IDPROYECTO;
END;*/



/*ALTER PROCEDURE [dbo].[OBTENERPROYECTOS]
    @ID INT,
    @IDCLIENTE INT,
    @NOMBRE VARCHAR(200),
    @ID_TIPOEMPRESA INT,
    @STATUS_PROYECTO INT,
    @NUMPROYECTO VARCHAR(100),
    @IDTIPOLOGIA INT,
    @UNIDADNEGOCIO INT,
    @IDCENTROCOSTO INT,
	@IDUSUARIO INT
AS
BEGIN
    SET NOCOUNT ON;  -- Mejora el rendimiento al evitar el conteo de filas

    SELECT 
        P.ID,
        P.NUM_PROYECTO,
        Un.TIPO_UNEGOCIO,
        Un.ID AS IDUNEGOCIO,
        COSTO.ID AS IDCOSTO,
        COSTO.TIPO_CCOSTO,
        CU.CODIGO,
        C.ID AS IDCLIENTE,
        C.NOMBRE AS NOMBRECLIENTE,
        P.NOMBRE AS NOMBREPROYECTO,
        T.TIPO_TIPOLOGIA,
        T.ID AS IDTIPOLOGIA,
        E.TIPO_EMPRESA,
        E.ID AS IDEMPRESA,
        PR.ID AS IDPRESUPESTO,
        PR.AFECTAIVA,
        PR.MONTO,
        PR.MONEDA,
        ST.TIPO_STATUS,
        ST.ID AS STATUSPROYECTO,
        P.PROBABILIDAD,
        P.PORCENTAJE_PROBABILIDAD,
        P.PLAZO,
        P.FECHA_INICIO,
        P.FECHA_TERMINO,
        P.FECHA_PLAZO_NEG,
        S.ID AS IDDEPARTAMENTO,
        S.NOMBRE AS NOMBREDEPARTAMENTO,
		

        -- Horas para Socios
        CASE 
            WHEN P.STATUS_PROYECTO = 2 
            THEN SUM(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN UP.HH_SOCIOS END)
            ELSE MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN UP.HH_SOCIOS END)
        END AS HH_SOCIOS,

        -- Horas para Staff
        CASE 
            WHEN P.STATUS_PROYECTO = 2 
            THEN SUM(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN UP.HH_STAFF END)
            ELSE MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN UP.HH_STAFF END)
        END AS HH_STAFF,

        -- Costo y Horas para Socios
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN CT.CUENTA END) AS CUENTA_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN CT.IDCUENTA END) AS IDCUENTA_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN SE.NOMBRE END) AS SEGMENTO_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN UP.CostoUnitarioAsignado END) AS COSTO_SOCIO,

        -- Costo y Horas para Staff
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN CT.CUENTA END) AS CUENTA_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN CT.IDCUENTA END) AS IDCUENTA_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN SE.NOMBRE END) AS SEGMENTO_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN UP.CostoUnitarioAsignado END) AS COSTO_STAFF,

       -- Horas y Costo para Consultor A
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN UP.HH_CONSULTORA END) AS HH_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_A,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN UP.COSTOCONSULTORA END) AS COSTO_CONSULTORA,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR,

        -- Horas y Costo para Consultor B
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN UP.HH_CONSULTORB END) AS HH_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_B,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN UP.COSTOCONSULTORB END) AS COSTO_CONSULTORB,
		 MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR,

        -- Horas y Costo para Consultor C
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN UP.HH_CONSULTORC END) AS HH_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_C,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN UP.COSTOCONSULTORC END) AS COSTO_CONSULTORC,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR

    FROM PROYECTO P
    INNER JOIN SUCURSAL_CLIENTE SC ON SC.ID = P.ID_CLIENTE_SUCURSAL
    LEFT JOIN USUARIO_PROYECTO UP ON UP.ID_PROYECTO = P.ID
    LEFT JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    LEFT JOIN RECURSO R ON R.ID = U.ID_RECURSO
    LEFT JOIN CLIENTE C ON C.ID = SC.ID_CLIENTE
    LEFT JOIN SUCURSAL S ON S.ID = SC.ID_SUCURSAL
    LEFT JOIN TIPOLOGIA T ON T.ID = P.ID_TIPOLOGIA
    LEFT JOIN EMPRESA E ON E.ID = P.TIPO_EMPRESA
    LEFT JOIN CCOSTO_UNEGOCIO CU ON CU.ID = P.ID_CCOSTO_UNEGOCIO 
    LEFT JOIN CCOSTO COSTO ON COSTO.ID = CU.ID_CCOSTO
    LEFT JOIN UNEGOCIO Un ON Un.ID = CU.ID_UNEGOCIO
    LEFT JOIN PRESUPUESTO PR ON PR.ID = P.ID_PRESUPUESTO
    LEFT JOIN STATUS_PROYECTO ST ON ST.ID = P.STATUS_PROYECTO
    LEFT JOIN SEGMENTO SE ON UP.IDSEGMENTO = SE.ID
    LEFT JOIN CUENTA CT ON CT.ID = SE.ID_CUENTA

    WHERE (P.ID = @ID OR @ID = 0 OR @ID IS NULL) 
      AND (C.ID = @IDCLIENTE OR @IDCLIENTE = 0 OR @IDCLIENTE IS NULL) 
      AND (P.NOMBRE = @NOMBRE OR @NOMBRE IS NULL)
      AND (P.TIPO_EMPRESA = @ID_TIPOEMPRESA OR @ID_TIPOEMPRESA = 0 OR @ID_TIPOEMPRESA IS NULL) 
      AND (ST.ID = @STATUS_PROYECTO OR @STATUS_PROYECTO = 0 OR @STATUS_PROYECTO IS NULL)
      AND (P.NUM_PROYECTO = @NUMPROYECTO OR @NUMPROYECTO IS NULL)
      AND (P.ID_TIPOLOGIA = @IDTIPOLOGIA OR @IDTIPOLOGIA = 0 OR @IDTIPOLOGIA IS NULL)
      AND (Un.ID = @UNIDADNEGOCIO OR @UNIDADNEGOCIO = 0 OR @UNIDADNEGOCIO IS NULL)
      AND (COSTO.ID = @IDCENTROCOSTO OR @IDCENTROCOSTO = 0 OR @IDCENTROCOSTO IS NULL)
	  AND (U.ID=@IDUSUARIO OR @IDUSUARIO=0 OR @IDUSUARIO IS NULL)
    
    GROUP BY 
        P.ID, P.NUM_PROYECTO, Un.TIPO_UNEGOCIO, 
        PR.MONTO, PR.MONEDA, COSTO.TIPO_CCOSTO, 
        CU.CODIGO, C.NOMBRE, P.NOMBRE, 
        T.TIPO_TIPOLOGIA, E.TIPO_EMPRESA, 
        PR.AFECTAIVA, ST.TIPO_STATUS, 
        P.PROBABILIDAD, P.PORCENTAJE_PROBABILIDAD, 
        P.PLAZO, P.FECHA_INICIO, 
        P.FECHA_TERMINO, P.FECHA_PLAZO_NEG, 
        Un.ID, COSTO.ID, T.ID, E.ID, ST.ID, C.ID, PR.ID, S.ID, S.NOMBRE,P.STATUS_PROYECTO;
END*/


/*ALTER PROCEDURE PROYECTOSUSUARIOS
@IDUSUARIO INT
AS
BEGIN
    DECLARE @ROL INT;

    -- Obtener el rol del usuario
    SELECT @ROL = ID_ROL FROM USUARIO WHERE ID = @IDUSUARIO;

    -- Si el usuario es del rol 2, traer solo los proyectos con STATUS_PROYECTO = 2
    IF (@ROL = 2)
    BEGIN
        SELECT 
            P.ID,
            P.NUM_PROYECTO,
            P.NOMBRE AS NOMBREPROYECTO,
            C.NOMBRE AS NOMBRECLIENTE
        FROM PROYECTO P
        INNER JOIN SUCURSAL_CLIENTE SC ON SC.ID = P.ID_CLIENTE_SUCURSAL
        INNER JOIN CLIENTE C ON C.ID = SC.ID_CLIENTE
        INNER JOIN USUARIO_PROYECTO UP ON UP.ID_PROYECTO = P.ID -- Corrección aquí
        WHERE UP.ID_USUARIO = @IDUSUARIO 
          AND P.STATUS_PROYECTO = 2;
    END
    ELSE
    BEGIN
        -- Traer todos los proyectos sin filtrar por STATUS_PROYECTO
        SELECT 
            P.ID,
            P.NUM_PROYECTO,
            P.NOMBRE AS NOMBREPROYECTO,
            C.NOMBRE AS NOMBRECLIENTE
        FROM PROYECTO P
        INNER JOIN SUCURSAL_CLIENTE SC ON SC.ID = P.ID_CLIENTE_SUCURSAL
        INNER JOIN CLIENTE C ON C.ID = SC.ID_CLIENTE
        INNER JOIN USUARIO_PROYECTO UP ON UP.ID_PROYECTO = P.ID -- Corrección aquí
        WHERE UP.ID_USUARIO = @IDUSUARIO;
    END;
END;*/

ALTER PROCEDURE HH_USUARIO_PROYECTOs
@IDUSUARIO INT

AS
BEGIN
    -- Declaración de variables
    DECLARE @RECURSO VARCHAR(100);
    DECLARE @TIPO_CONSULTOR VARCHAR(200);

    -- Obtener el recurso y el tipo de consultor
    SELECT 
        @RECURSO = R.NOMBRE_RECURSO,
        @TIPO_CONSULTOR = R.TIPO_CONSULTOR
    FROM USUARIO_PROYECTO UP
    INNER JOIN PROYECTO P ON P.ID = UP.ID_PROYECTO
    INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
    WHERE UP.ID_USUARIO = @IDUSUARIO;

    -- Selección de horas asignadas según el tipo de recurso
    SELECT 
        UP.ID_USUARIO AS 'ID_USUARIO',
        R.NOMBRE_RECURSO AS 'RECURSO',
        U.NOMBRE AS 'NOMBRE_USUARIO',
        UP.ID_PROYECTO AS 'ID_PROYECTO',
        P.NUM_PROYECTO AS 'NUM_PROYECTO', -- Aquí se agregó la coma
        CASE 
            WHEN @RECURSO = 'Socio' THEN UP.HH_SOCIOS
            WHEN @RECURSO = 'Staff' THEN UP.HH_STAFF
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor A' THEN UP.HH_CONSULTORA
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor B' THEN UP.HH_CONSULTORB
            WHEN @RECURSO = 'Consultor Externo' AND @TIPO_CONSULTOR = 'Consultor C' THEN UP.HH_CONSULTORC
            ELSE 0 -- Si no coincide, asigna 0 horas
        END AS 'HH_ASIGNADAS',
        R.TIPO_CONSULTOR AS 'TIPO_CONSULTOR'
    FROM USUARIO_PROYECTO UP
    INNER JOIN PROYECTO P ON P.ID = UP.ID_PROYECTO
    INNER JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
    WHERE UP.ID_USUARIO = @IDUSUARIO AND P.STATUS_PROYECTO = 2;
END



ALTER PROCEDURE EDITARUSUARIO
    @IDUSUARIO INT,
    @NOMBRE VARCHAR(200),
    @NOMBRE_USUARIO VARCHAR(200),
    @TELEFONO VARCHAR(20),
    @EMAIL VARCHAR(90),
    @NUMERO_HORAS_SEMANALES INT,
    @COSTO_UNITARIO DECIMAL(10,2),
    @PORCENTAJEHORAS FLOAT,
    @FECHAINICIO DATE,
    @FECHAFIN DATE
AS
BEGIN
    DECLARE @IDRECURSO INT;
    DECLARE @HHANUALES DECIMAL(10,2);
    DECLARE @TOTALHHASIGNADAS INT;
    DECLARE @RECURSO VARCHAR(100);

    -- Cálculo de horas anuales
    SET @HHANUALES = dbo.CALCULARHHANUALES(@NUMERO_HORAS_SEMANALES, @PORCENTAJEHORAS);

    -- Obtener tipo de recurso (Socio, Staff, Consultor Externo) para este usuario
    SELECT @RECURSO = R.NOMBRE_RECURSO 
    FROM USUARIO U
    INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO
    WHERE U.ID = @IDUSUARIO;

    -- Si el recurso es 'Socio', restar las horas asignadas solo de este usuario
    IF (@RECURSO = 'Socio')
    BEGIN
        SELECT @TOTALHHASIGNADAS = ISNULL(SUM(HH_SOCIOS), 0) 
        FROM USUARIO_PROYECTO UP
		INNER JOIN PROYECTO P ON P.ID = up.ID_PROYECTO
        WHERE UP.ID_USUARIO = @IDUSUARIO AND P.STATUS_PROYECTO=2;

        -- Restar las horas asignadas del total de horas anuales
        SET @HHANUALES = @HHANUALES - @TOTALHHASIGNADAS;
    END;

    -- Si el recurso es 'Staff', restar las horas asignadas solo de este usuario
    IF (@RECURSO = 'Staff')
    BEGIN
        SELECT @TOTALHHASIGNADAS = ISNULL(SUM(HH_STAFF), 0)
        FROM USUARIO_PROYECTO UP
		INNER JOIN PROYECTO P ON P.ID = up.ID_PROYECTO
        WHERE UP.ID_USUARIO = @IDUSUARIO AND P.STATUS_PROYECTO=2;

        -- Restar las horas asignadas del total de horas anuales
        SET @HHANUALES = @HHANUALES - @TOTALHHASIGNADAS;
    END;

    -- Si el recurso es 'Consultor Externo', las horas anuales son 0
    IF (@RECURSO = 'Consultor Externo')
    BEGIN
        SET @HHANUALES = 0;
    END;

    -- Actualizar el recurso con los nuevos datos
    UPDATE RECURSO 
    SET 
        NUMERO_HORAS = @NUMERO_HORAS_SEMANALES,
        COSTO_UNITARIO = @COSTO_UNITARIO,
        PROCENTAJE_PROYECTO = @PORCENTAJEHORAS,
        DESDE = @FECHAINICIO,
        HASTA = @FECHAFIN,
        HH_ANUALES = @HHANUALES
    WHERE ID = (SELECT ID_RECURSO FROM USUARIO WHERE ID = @IDUSUARIO);

    -- Actualizar el usuario con los nuevos datos
    UPDATE USUARIO 
    SET 
        NOMBRE = @NOMBRE,
        NOMBRE_USUARIO = @NOMBRE_USUARIO,
        TELEFONO = @TELEFONO,
        EMAIL = @EMAIL 
    WHERE ID = @IDUSUARIO;
END;