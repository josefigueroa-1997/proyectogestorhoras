ALTER PROCEDURE [dbo].[OBTENERPROYECTOS]
    @ID INT,
    @IDCLIENTE INT,
    @NOMBRE VARCHAR(200),
    @ID_TIPOEMPRESA INT,
    @STATUS_PROYECTO INT,
    @NUMPROYECTO VARCHAR(100),
    @IDTIPOLOGIA INT,
    @UNIDADNEGOCIO INT,
    @IDCENTROCOSTO INT
AS
BEGIN
    SELECT 
        P.ID,
        P.NUM_PROYECTO,
        Un.TIPO_UNEGOCIO,
        Un.ID AS IDUNEGOCIO,
        COSTO.ID AS IDCOSTO,
        COSTO.TIPO_CCOSTO,
        CU.CODIGO,
        C.ID AS IDCLIENTE,
        C.NOMBRE AS NOMBRECLIENTE,
        P.NOMBRE AS NOMBREPROYECTO,
        T.TIPO_TIPOLOGIA,
        T.ID AS IDTIPOLOGIA,
        E.TIPO_EMPRESA,
        E.ID AS IDEMPRESA,
        PR.AFECTAIVA,
        PR.MONTO,
        PR.MONEDA,
        ST.TIPO_STATUS,
        ST.ID AS STATUSPROYECTO,
        P.PROBABILIDAD,
        P.PORCENTAJE_PROBABILIDAD,
        P.PLAZO,
        P.FECHA_INICIO,
        P.FECHA_TERMINO,
        P.FECHA_PLAZO_NEG,
        S.ID AS IDDEPARTAMENTO,
        S.NOMBRE AS NOMBREDEPARTAMENTO,

        -- Horas y Costo para Socios
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN UP.HH_SOCIOS END) AS HH_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN CT.CUENTA END) AS CUENTA_SOCIOS,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN CT.IDCUENTA END) AS IDCUENTA_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN SE.NOMBRE END) AS SEGMENTO_SOCIOS,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN UP.CostoUnitarioAsignado END) AS COSTO_SOCIO,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Socio' THEN R.NOMBRE_RECURSO END) AS NOMBRE_RECURSO,

        -- Horas y Costo para Staff
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN UP.HH_STAFF END) AS HH_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN CT.CUENTA END) AS CUENTA_STAFF,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN CT.IDCUENTA END) AS IDCUENTA_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN SE.NOMBRE END) AS SEGMENTO_STAFF,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN UP.CostoUnitarioAsignado END) AS COSTO_STAFF,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Staff' THEN R.NOMBRE_RECURSO END) AS NOMBRE_RECURSO,

        -- Horas y Costo para Consultor A
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN UP.HH_CONSULTORA END) AS HH_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_A,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_A,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN UP.COSTOCONSULTORA END) AS COSTO_CONSULTORA,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor A' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR,

        -- Horas y Costo para Consultor B
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN UP.HH_CONSULTORB END) AS HH_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_B,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_B,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN UP.COSTOCONSULTORB END) AS COSTO_CONSULTORB,
		 MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor B' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR,

        -- Horas y Costo para Consultor C
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN UP.HH_CONSULTORC END) AS HH_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN CT.CUENTA END) AS CUENTA_CONSULTOR_C,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN CT.IDCUENTA END) AS IDCUENTA_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN SE.NOMBRE END) AS SEGMENTO_CONSULTOR_C,
        MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN UP.COSTOCONSULTORC END) AS COSTO_CONSULTORC,
		MAX(CASE WHEN R.NOMBRE_RECURSO = 'Consultor Externo' AND R.TIPO_CONSULTOR = 'Consultor C' THEN R.TIPO_CONSULTOR END) AS TIPO_CONSULTOR

    FROM PROYECTO P
    INNER JOIN SUCURSAL_CLIENTE SC ON SC.ID = P.ID_CLIENTE_SUCURSAL
    LEFT JOIN USUARIO_PROYECTO UP ON UP.ID_PROYECTO = P.ID
    LEFT JOIN USUARIO U ON U.ID = UP.ID_USUARIO
    LEFT JOIN RECURSO R ON R.ID = U.ID_RECURSO
    LEFT JOIN CLIENTE C ON C.ID = SC.ID_CLIENTE
    LEFT JOIN SUCURSAL S ON S.ID = SC.ID_SUCURSAL
    LEFT JOIN TIPOLOGIA T ON T.ID = P.ID_TIPOLOGIA
    LEFT JOIN EMPRESA E ON E.ID = P.TIPO_EMPRESA
    LEFT JOIN CCOSTO_UNEGOCIO CU ON CU.ID = P.ID_CCOSTO_UNEGOCIO 
    LEFT JOIN CCOSTO COSTO ON COSTO.ID = CU.ID_CCOSTO
    LEFT JOIN UNEGOCIO Un ON Un.ID = CU.ID_UNEGOCIO
    LEFT JOIN PRESUPUESTO PR ON PR.ID = P.ID_PRESUPUESTO
    LEFT JOIN STATUS_PROYECTO ST ON ST.ID = P.STATUS_PROYECTO
    LEFT JOIN SEGMENTO SE ON UP.IDSEGMENTO = SE.ID
    LEFT JOIN CUENTA CT ON CT.ID = SE.ID_CUENTA
   
    WHERE (P.ID = @ID OR @ID = 0 OR @ID IS NULL) 
      AND (C.ID = @IDCLIENTE OR @IDCLIENTE = 0 OR @IDCLIENTE IS NULL) 
      AND (P.NOMBRE = @NOMBRE OR @NOMBRE IS NULL)
      AND (P.TIPO_EMPRESA = @ID_TIPOEMPRESA OR @ID_TIPOEMPRESA = 0 OR @ID_TIPOEMPRESA IS NULL) 
      AND (ST.ID = @STATUS_PROYECTO OR @STATUS_PROYECTO = 0 OR @STATUS_PROYECTO IS NULL)
      AND (P.NUM_PROYECTO = @NUMPROYECTO OR @NUMPROYECTO IS NULL)
      AND (P.ID_TIPOLOGIA = @IDTIPOLOGIA OR @IDTIPOLOGIA = 0 OR @IDTIPOLOGIA IS NULL)
      AND (U.ID = @UNIDADNEGOCIO OR @UNIDADNEGOCIO = 0 OR @UNIDADNEGOCIO IS NULL)
      AND (COSTO.ID = @IDCENTROCOSTO OR @IDCENTROCOSTO = 0 OR @IDCENTROCOSTO IS NULL)
    GROUP BY  P.ID, P.NUM_PROYECTO, Un.TIPO_UNEGOCIO, PR.MONTO,PR.MONEDA,COSTO.TIPO_CCOSTO, 
        CU.CODIGO, C.NOMBRE, P.NOMBRE, T.TIPO_TIPOLOGIA, 
        E.TIPO_EMPRESA, PR.AFECTAIVA, ST.TIPO_STATUS, 
        P.PROBABILIDAD, P.PORCENTAJE_PROBABILIDAD, P.PLAZO, 
        P.FECHA_INICIO, P.FECHA_TERMINO, P.FECHA_PLAZO_NEG,un.ID,costo.ID, 
        t.ID,e.ID,st.ID,C.ID,S.ID,S.NOMBRE;
END



ALTER PROCEDURE [dbo].[GENERARFACTURAPROYECTO]
    @IDPROYECTO INT
AS
BEGIN
    -- Evita mostrar el conteo de filas afectadas
    SET NOCOUNT ON;

    -- Declarar las variables necesarias
    DECLARE @PLAZO INT;
    DECLARE @AFECTAIVA VARCHAR(100);
    DECLARE @MONTO DECIMAL(18, 2);  -- Ajustar precisión para montos grandes
    DECLARE @FECHAINICIO DATE;
    DECLARE @VALORIVA DECIMAL(10, 2);
    DECLARE @MONTO_MENSUAL DECIMAL(18, 2);
    DECLARE @MONTO_CON_IVA DECIMAL(18, 2);
    DECLARE @FECHAFACTURA DATE;
    DECLARE @MES INT = 1;
    DECLARE @SEGMENTO VARCHAR(200);
    DECLARE @CUENTA VARCHAR(100);
    DECLARE @IDCUENTA INT;
    DECLARE @SUMA_MONTOS DECIMAL(18, 2) = 0;  -- Para llevar el control de los montos acumulados
    DECLARE @SUMA_IVA DECIMAL(18, 2) = 0;     -- Para llevar el control del IVA acumulado

    -- Obtener la información del proyecto usando @IDPROYECTO
    SELECT @PLAZO = P.PLAZO,
           @FECHAINICIO = P.FECHA_INICIO,
           @MONTO = PE.MONTO,
           @AFECTAIVA = PE.AFECTAIVA,
           @VALORIVA = 0.19,
           @SEGMENTO = S.NOMBRE,
           @IDCUENTA = C.IDCUENTA,
           @CUENTA = C.CUENTA
    FROM PROYECTO P
    INNER JOIN PRESUPUESTO PE ON PE.ID = P.ID_PRESUPUESTO
    INNER JOIN FACTURA F ON F.ID_PROYECTO = P.ID
    INNER JOIN SEGMENTO S ON F.IDSEGMENTO = S.ID
    INNER JOIN CUENTA C ON C.ID = S.ID_CUENTA
    WHERE P.ID = @IDPROYECTO;

    -- Calcular el monto mensual
    SET @MONTO_MENSUAL = ROUND(@MONTO / @PLAZO, 2);

    -- Crear una tabla temporal para almacenar los resultados
    CREATE TABLE #FacturasTemp (
        IdCuenta INT,
        Cuenta VARCHAR(100),
        Segmento VARCHAR(200),
        FechaFactura DATE,
        Monto DECIMAL(18, 2),
        MontoIVA DECIMAL(18, 2),
        Total DECIMAL(18, 2)
    );

    -- Generar facturas para cada mes y guardarlas en la tabla temporal
    WHILE @MES <= @PLAZO
    BEGIN
        -- Calcular la fecha de la factura (un mes después de la fecha de inicio)
        SET @FECHAFACTURA = DATEADD(MONTH, @MES, @FECHAINICIO);

        -- Ajustar el último mes para corregir diferencias por redondeo
        IF @MES = @PLAZO
        BEGIN
            -- Ajustar el último monto mensual para que el total sea exacto
            SET @MONTO_MENSUAL = ROUND(@MONTO - @SUMA_MONTOS, 2);
        END

        -- Calcular el monto con IVA si aplica
        IF @AFECTAIVA = 'SI'
        BEGIN
            IF @MES = @PLAZO
            BEGIN
                -- Ajustar el IVA del último mes para que el total sea exacto
                SET @MONTO_CON_IVA = ROUND((@MONTO_MENSUAL * (1 + @VALORIVA)), 2);
            END
            ELSE
            BEGIN
                SET @MONTO_CON_IVA = ROUND(@MONTO_MENSUAL * (1 + @VALORIVA), 2);
            END
        END
        ELSE
        BEGIN
            SET @MONTO_CON_IVA = ROUND(@MONTO_MENSUAL, 2);
        END

        -- Insertar los datos en la tabla temporal, redondeando
        INSERT INTO #FacturasTemp (IdCuenta, Cuenta, Segmento, FechaFactura, Monto, MontoIVA, Total)
        VALUES (@IDCUENTA, @CUENTA, @SEGMENTO, @FECHAFACTURA, 
                ROUND(@MONTO_MENSUAL, 2), 
                ROUND(@MONTO_CON_IVA - @MONTO_MENSUAL, 2), 
                ROUND(@MONTO_CON_IVA, 2));

        -- Acumular el monto e IVA, redondeando al acumular
        SET @SUMA_MONTOS = ROUND(@SUMA_MONTOS + @MONTO_MENSUAL, 2);
        SET @SUMA_IVA = ROUND(@SUMA_IVA + (@MONTO_CON_IVA - @MONTO_MENSUAL), 2);

        -- Incrementar el mes
        SET @MES = @MES + 1;
    END

    -- Mostrar las facturas generadas y redondear los totales
    SELECT IdCuenta AS 'IdCuenta',
           Cuenta AS 'Cuenta',
           Segmento AS 'Segmento',
           FechaFactura AS 'Fecha_Factura', 
           ROUND(Monto, 2) AS 'Neto', 
           ROUND(MontoIVA, 2) AS 'IVA', 
           ROUND(Total, 2) AS 'Total'
    FROM #FacturasTemp;

  

    -- Eliminar la tabla temporal
    DROP TABLE #FacturasTemp;

    -- Restablecer el comportamiento normal si es necesario
    SET NOCOUNT OFF;
END;




ALTER PROCEDURE [dbo].[OBTENERSEGMENTOHONORARIOS]
@IDCCOSTO INT,
@IDUNEGOCIO INT,
@IDRECURSO INT
AS
BEGIN
DECLARE @ROL_RECURSO VARCHAR(200);
SELECT @ROL_RECURSO=R.NOMBRE_RECURSO FROM USUARIO U INNER JOIN RECURSO R ON R.ID = U.ID_RECURSO WHERE U.ID_RECURSO = @IDRECURSO

IF(@ROL_RECURSO='Consultor Externo')
BEGIN
SELECT S.NOMBRE,C.CUENTA,C.IDCUENTA,s.ID AS IDSEGMENTO FROM CCOSTO_UNEGOCIO CU
INNER JOIN SEGMENTO_CCOSTO SC ON SC.ID_CCOSTO = CU.ID
INNER JOIN SEGMENTO S ON S.ID = SC.ID_SEGMENTO
INNER JOIN CUENTA C ON C.ID = S.ID_CUENTA
WHERE CU.ID_CCOSTO=@IDCCOSTO AND CU.ID_UNEGOCIO=@IDUNEGOCIO AND S.TIPO_SEGMENTO = 'Honorarios' AND S.NOMBRE LIKE '%Consultor%'
END
ELSE
BEGIN
IF(@ROL_RECURSO='Profesional')
begin
SELECT S.NOMBRE,C.CUENTA,C.IDCUENTA,s.ID AS IDSEGMENTO FROM CCOSTO_UNEGOCIO CU
INNER JOIN SEGMENTO_CCOSTO SC ON SC.ID_CCOSTO = CU.ID
INNER JOIN SEGMENTO S ON S.ID = SC.ID_SEGMENTO
INNER JOIN CUENTA C ON C.ID = S.ID_CUENTA
WHERE CU.ID_CCOSTO=@IDCCOSTO AND CU.ID_UNEGOCIO=@IDUNEGOCIO AND S.TIPO_SEGMENTO = 'Honorarios' AND S.NOMBRE LIKE '%Profesional%'
end
END
END;



ALTER PROCEDURE [dbo].[OBTENERSERVICIOSPROYECTO]
@IDPROYECTO INT
AS
BEGIN

SELECT S.ID AS IDSERVICIO,S.NOMBRE AS NOMBRESERVICIO,SE.NOMBRE AS NOMBRSEGMENTO,C.CUENTA  ,C.IDCUENTA,PS.MONTO FROM PROYECTO P

INNER JOIN PROYECTO_SERVICIO PS ON P.ID = PS.ID_PROYECTO
INNER JOIN SERVICIOS S ON S.ID = PS.ID_SERVICIO
INNER JOIN SEGMENTO SE ON SE.ID = PS.IDSEGMENTO
INNER JOIN CUENTA C ON C.ID = SE.ID_CUENTA
WHERE P.ID = @IDPROYECTO
END;
