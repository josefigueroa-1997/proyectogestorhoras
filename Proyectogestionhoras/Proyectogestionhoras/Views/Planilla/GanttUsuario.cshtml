@{

    ViewData["Title"] = "Mi Gantt";

}

<style>
    .form-container {
        max-width: 1200px;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .section-header {
        text-align: center;
        font-size: 24px;
        margin-bottom: 20px;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
    }

    th, td {
        padding: 8px;
        text-align: center;
        border: 1px solid #ddd;
    }
    td{
        font-size:12px;
        width: 40px;
        word-wrap: break-word;

    }

    th {
        background-color: #f4f4f4;
    }

    .completed {
        background-color: #4CAF50;
        color: white;
    }

    .no-hours {
        background-color: #f9f9f9;
    }

    .table-separator {
        margin-bottom: 50px;
    }

   

    .yellow-row td {
        background-color: yellow; 
    }

    .izquierda {
        text-align: left; 
    }

    .linea-gruesa {
        border-bottom: 4px solid black; 
    }

</style>
@{
    string? nombre = Context.Session.GetString("nombre");
}
<div class="form-container">
    <h2 class="section-header">Mi Gantt:@nombre</h2>
    

    <div class="table-separator">
        <table>
            <thead>
                <tr id="headRow">
                    <th>Proyecto</th>
                </tr>
            </thead>
            <tbody id="ganttBody">
              
            </tbody>
            <tfoot>
                <tr id="totalRow">
                    <th>Totales</th>
                </tr>
            </tfoot>
        </table>
    </div>

    <div style="display:none;"  class="section-content table-separator">
        <table>
            <thead>
                <tr style="background-color: #f9eb8b; color: black;">
                    <th style="text-align:center;">Nombre Proyecto</th>
                    <th style="text-align:center;">HH Realizadas</th>
                    <th style="text-align:center;">HH Restantes</th>
                    <th style="text-align:center;">Totales HH</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.Proyectos != null)
                {
                    @foreach (var proyecto in ViewBag.Proyectos)
                    {
                        <tr>
                            <td><strong>@proyecto.NOMBREPROYECTO</strong></td>
                            
                            <td style="text-align:center;"><input class="hhrestantes" type="number" value="@proyecto.HHRESTANTES" readonly/></td>
                            
                        </tr>
                    }
                }

              
            </tbody>
        </table>
    </div>
</div>

@{
    var idusuario = Context.Session.GetInt32("id");
}
<script>
    $(document).ready(function () {
        const idusuario = @Context.Session.GetInt32("id"); 

    
        function getMesesEntreFechas(fechaInicio, fechaFin) {
            const meses = [];
            const fechaActual = new Date(fechaInicio);
            const fechaFinal = new Date(fechaFin);

            while (fechaActual <= fechaFinal) {
                const mesFormateado = (fechaActual.getMonth() + 1).toString().padStart(2, '0');
                meses.push({
                    año: fechaActual.getFullYear(),
                    mes: mesFormateado
                });
                fechaActual.setMonth(fechaActual.getMonth() + 1);
            }

            return meses;
        }

        // Función para generar el encabezado de la tabla
        function generarEncabezado(mesesOrdenados) {
            const headRow = $('#headRow');
            mesesOrdenados.forEach(mes => {
                const [año, mesNum] = mes.split('-');
                const th = $('<th>').text(`${mesNum}/${año}`);
                headRow.append(th);
            });

            headRow.append($('<th>').text('Totales'));
        }

        function llenarCuerpoTabla(ganttData, mesesOrdenados) {
            const tbody = $('#ganttBody');
            const totalesPorMes = new Array(mesesOrdenados.length).fill(0);

            ganttData.forEach(proyecto => {
                let totalHorasProyecto = 0;

                const inputRow = $(`td:contains('${proyecto.nombreProyecto}')`).closest('tr');
                const inputHHRestantes = inputRow.find('.hhrestantes');

                // Calcular las horas totales del proyecto
                proyecto.horasPorMes.forEach(h => {
                    totalHorasProyecto += h.horas; // Sumar horas por mes
                });

                const hhRestantes = parseFloat(inputHHRestantes.val()) || 0;
                const totalHH = totalHorasProyecto + hhRestantes;

                // **Agregar la fila con línea gruesa antes de la fila amarilla**
                const trLineaGruesa = $('<tr>').addClass('linea-gruesa');
                const tdLineaGruesa = $('<td>')
                    .attr('colspan', mesesOrdenados.length + 2) // Colspan que cubre todas las columnas
                    .css('border-bottom', '4px solid black'); // Aplicar borde inferior grueso
                trLineaGruesa.append(tdLineaGruesa);
                tbody.append(trLineaGruesa);

                // Crear la fila amarilla
                const trAmarillo = $('<tr>');
                const tdAmarillo = $('<td>')
                    .text(`Duración: ${proyecto.nombreProyecto}: ${hhRestantes} hrs`)
                    .attr('colspan', 1)
                    .css({
                        'background-color': 'yellow',
                        'text-align': 'left',
                        'word-wrap': 'break-word',
                        'white-space': 'normal'
                    });

                trAmarillo.append(tdAmarillo);

                const mesesDuracion = getMesesEntreFechas(proyecto.fechaInicio, proyecto.fechaTermino);
                const mesesIndices = mesesDuracion.map(m => `${m.año}-${m.mes}`);

                mesesOrdenados.forEach((mes, index) => {
                    const tdDuracion = $('<td>');
                    if (mesesIndices.includes(mes)) {
                        tdDuracion.addClass('duracion').css('background-color', 'yellow');
                    }
                    trAmarillo.append(tdDuracion);
                });

                const tdTotalAmarillo = $('<td>')
                    .text(`${hhRestantes} hrs`)
                    .css('background-color', 'yellow');
                trAmarillo.append(tdTotalAmarillo);

                tbody.append(trAmarillo);

                // Crear la fila verde (horas ejecutadas)
                const tr = $('<tr>');
                const tdProyecto = $('<td>')
                    .text(`Hrs Ejec.: ${proyecto.nombreProyecto}`)
                    .css('text-align', 'left');
                tr.append(tdProyecto);

                let totalHorasFila = 0;

                mesesOrdenados.forEach((mes, index) => {
                    const [año, mesNum] = mes.split('-');
                    const td = $('<td>');

                    const horasData = proyecto.horasPorMes.find(h => h.año == parseInt(año) && h.mes.toString().padStart(2, '0') == mesNum);
                    const horas = horasData ? horasData.horas : 0;

                    if (horas > 0) {
                        td.addClass('completed').text(`${horas} hrs`);
                    } else {
                        td.addClass('no-hours').text('-');
                    }

                    totalesPorMes[index] += horas;
                    totalHorasFila += horas;
                    tr.append(td);
                });

                const tdTotal = $('<td>').text(totalHorasFila > 0 ? `${totalHorasFila} hrs` : '-').addClass('completed');
                tr.append(tdTotal);

                tbody.append(tr);
            });

            llenarFilaTotales(totalesPorMes);
        }

        function llenarFilaTotales(totalesPorMes) {
            const totalRow = $('#totalRow');
            totalesPorMes.forEach(total => {
                const tdTotal = $('<td>').text(total > 0 ? `${total} hrs` : '-');
                totalRow.append(tdTotal);
            });
           
            const totalGeneral = totalesPorMes.reduce((acc, curr) => acc + curr, 0);
            totalRow.append($('<td>').text(totalGeneral > 0 ? `${totalGeneral} hrs` : '-')); 
        }

        $.ajax({
            url: `/Planilla/GenerarGant`,
            type: 'GET',
            data: { idusuario: idusuario },
            success: function (ganttData) {
     
                let mesesUnicos = new Set();
                ganttData.forEach(proyecto => {
                    const meses = getMesesEntreFechas(proyecto.fechaInicio, proyecto.fechaTermino);
                    meses.forEach(m => mesesUnicos.add(`${m.año}-${m.mes}`));
                });

                const mesesOrdenados = Array.from(mesesUnicos).sort((a, b) => {
                    const [añoA, mesA] = a.split('-').map(Number);
                    const [añoB, mesB] = b.split('-').map(Number);
                    return new Date(añoA, mesA - 1) - new Date(añoB, mesB - 1);
                });

           
                generarEncabezado(mesesOrdenados);
                llenarCuerpoTabla(ganttData, mesesOrdenados);
            },
            error: function (error) {
                console.error('Error:', error);
            }
        });
    });
</script>

