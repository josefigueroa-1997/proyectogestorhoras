@{
    ViewData["Title"] = "Vista Previa Egresos";
}


@model List<Proyectogestionhoras.Models.DTO.EgresosExcelDTO>;

<link rel="stylesheet" href="~/css/pageloading.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/dataloading.css" asp-append-version="true" />

 <style>

    .form-container {
        max-width: 1200px;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-top: 60px;
    }

    .form-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
        text-align: center;
        margin-bottom: 10px;
    }

    .form-subtitle {
        font-size: 1.0rem;
        color: #666;
        text-align: center;
        margin-bottom: 20px;
    }

   
  </style>

<div class="form-container">

    <p class="form-subtitle" style="color:black;">Vista Prevía de Egresos Cargados</p>
    <div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
        <p class="text-sm text-gray-600">A Continuación, se muestran los datos cargados del Excel que usted ha subido. Las filas que se marcan en rojo significan que no ha podido encontrar, ya sea un proyecto, proveedor, egreso o un segmento. Estas filas no se guardarán en el sistema. Deberá corregir algun dato o registrar en los parametros dependiendo del dato que no ha encontrado.</p>
    </div>
    <div class="overflow-x-auto">
        <form id="formEgresos" method="post" action="/CargaExcel/GuardarEgresosMasivos">
            <table class="min-w-full text-xs border-collapse">

                <thead>
                    <tr class="bg-green-100 text-black">

                        <th class="p-2 border border-gray-300 text-left">Número del Proyecto</th>
                        <th class="p-2 border border-gray-300 text-left">Egreso</th>
                        <th class="p-2 border border-gray-300 text-left">Proveedor</th>
                        <th class="p-2 border border-gray-300 text-left">Monto</th>
                        <th class="p-2 border border-gray-300 text-left">Fecha</th>
                        <th class="p-2 border border-gray-300 text-left">Estado</th>
                        
                        <th class="p-2 border border-gray-300 text-left">Glosa</th>
                        <th class="p-2 border border-gray-300 text-left">Tipo</th>
                        <th class="p-2 border border-gray-300 text-left">Cuenta</th>
                        <th class="p-2 border border-gray-300 text-left">Segmento</th>


                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="p-2 border border-gray-300 text-left">@item.numproyecto</td>
                            <td class="p-2 border border-gray-300 text-left">@item.egreso</td>
                            <td class="p-2 border border-gray-300 text-left">@item.proveedor</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Monto.ToString("C")</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Fecha.ToString("dd-MM-yyyy")</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Estado</td>
                            
                            <td class="p-2 border border-gray-300 text-left">@item.Glosa</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Tipo</td>
                            <td class="cuenta-cell"></td>
                            <td style="display:none;">
                                <input name="numproyecto" type="hidden" value="@item.numproyecto" />
                                <input name="egreso" type="hidden" value="@item.egreso" />
                                <input name="proveedor" type="hidden" value="@item.proveedor" />
                                <input name="Monto" type="hidden" value="@item.Monto" />
                                <input name="Fecha" type="hidden" value="@item.Fecha" />
                                <input name="Estado" type="hidden" value="@item.Estado" />
                               
                                <input name="Glosa" type="hidden" value="@item.Glosa" />
                                <input name="Tipo" type="hidden" value="@item.Tipo" />


                            </td>
                            <td class="segmento-id-container"></td>
                            <td class="project-id-container"></td>
                            <td class="egreso-id-container"></td>
                            <td class="error-id-proveedor-container"></td>
                            <td class="proveedor-id-container">

                                <input type="hidden" name="IdsProveedor" class="id-proveedor-hidden" />
                            </td>
                            <td style="display:none;" class="hidden-inputs-segmento"></td>

                        </tr>
                    }

                </tbody>

            </table>

            <div class="mt-4 flex justify-center">
                <button id="btnGuardarEgresos" type="submit" disabled class="bg-orange-500 opacity-50 cursor-not-allowed hover:bg-orange-700 text-white font-bold py-2 px-4 rounded">
                    Guardar Egresos
                </button>
            </div>
        
        
        </form>
       


    </div>
</div>

<div id="loader" style="
    position: fixed;
    z-index: 9999;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
">
    <div class="spinner"></div>
</div>

<!--MODAL REGISRO-->

<div id="modalMensaje" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full">
        <div id="modalHeader" class="px-4 py-2 rounded-t-lg text-white text-lg font-semibold">
            
        </div>
        <div class="px-4 py-4 text-gray-800" id="modalBody">
            
        </div>
        <div class="px-4 py-2 flex justify-end">
            <button id="cerrarModal" class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded">Cerrar</button>
        </div>
    </div>
</div>


<!-- Modal de Cargando -->
<div id="modalCargando" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg text-center">
        <div class="loader mb-4"></div>
        <p class="text-lg font-semibold text-gray-700">Cargando datos, por favor espera...</p>
    </div>
</div>



<script>
    window.addEventListener('load', function () {
        
        const loader = document.getElementById('loader');
        if (loader) {
            loader.style.display = 'none';
        }
    });
</script>

<script>
    const filaDatos = new Map(); 

    //ID PROYECTO
    document.addEventListener('DOMContentLoaded', function () {
        const numProyectoCells = document.querySelectorAll('tbody td:first-child');

        numProyectoCells.forEach((cell, index) => {
            const numproyecto = cell.textContent.trim();
            const row = cell.closest('tr');
            const container = row.querySelector('.project-id-container');
            if (numproyecto) {
                fetch(`/CargaExcel/ObtenerIdProyecto?numproyecto=${encodeURIComponent(numproyecto)}`)
                    .then(response => response.json())
                    .then(data => {
                       
                        
                         
                            const hiddenInput = document.createElement('input');
                            hiddenInput.type = 'hidden';
                            hiddenInput.name = `ProyectoId`;
                             container.appendChild(hiddenInput);

                           
                            cell.textContent = `${numproyecto} (ID: ${data})`;
                            if (!data || data === 0) {
                                     container.textContent = 'Proyecto No Encontrado';
                                    row.style.backgroundColor = '#fee2e2';
                                     row.style.color = '#000000';
                                     row.style.fontWeight = 'bold';
                                     marcarFilaProcesada(row);
                                    hiddenInput.disabled = true; 
                                    throw new Error('Proyecto no encontrado');

                            }
                            hiddenInput.value = data;

                            cell.textContent = `${numproyecto} `;
                        
                        if (!filaDatos.has(row)) filaDatos.set(row, {});
                        filaDatos.get(row).idProyecto = data;
                        
                        marcarFilaProcesada(row);
                        intentarObtenerSegmento(row);
                    })
                    .catch(error => {
                        marcarFilaProcesada(row);
                        console.error('Error al obtener el ID del proyecto:', error);
                          const inputs = row.querySelectorAll('input');
    inputs.forEach(input => {
        input.disabled = true;
    });

    const projectInput = row.querySelector('.project-id-container input');
    if (projectInput) {
        projectInput.disabled = true;
    }

    row.classList.add('fila-invalida');



                    });
            }
        });
    });
    //ID EGRESO
    document.addEventListener('DOMContentLoaded', function () {
    
        const egresoCells = document.querySelectorAll('tbody tr td:nth-child(2)');

   
        egresoCells.forEach(cell => {
            const nombreEgreso = cell.textContent.trim();
            const row = cell.parentElement;
            const egresoIdContainer = row.querySelector('.egreso-id-container');
            const cuentaCell = row.querySelector('td:nth-child(9)');
            const tipoCell = row.querySelector('td:nth-child(8)');
            if (nombreEgreso) {
                const tipo = tipoCell ? tipoCell.textContent.trim() : "";
              
                fetch(`/CargaExcel/ObtenerIdEgreso?nombreegreso=${encodeURIComponent(nombreEgreso)}`)
                    .then(response => response.json())
                    .then(idEgreso => {
                        
                        if (!idEgreso || idEgreso === 0) {
                            
                            egresoIdContainer.textContent = 'Egreso No Encontrado';
                            row.style.backgroundColor = '#fee2e2';
                            row.style.color = '#000000';
                            row.style.fontWeight = 'bold';
                            marcarFilaProcesada(row);
                            throw new Error('Egreso no encontrado');
                        }
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'IdEgreso';
                        input.value = idEgreso;

                        marcarFilaProcesada(row);
                        egresoIdContainer.appendChild(input);

                        cell.textContent = `${nombreEgreso}`;
                       
                        return fetch(`/CargaExcel/ObtenerDatosCuenta?idegreso=${idEgreso}&tipo=${encodeURIComponent(tipo)}`);
                    })
                    .then(response => response.json())
                .then(cuentaData => {
                    if (cuentaData && cuentaCell) {
                        cuentaCell.textContent = `${cuentaData.idcuenta} - ${cuentaData.cuenta}`;
                          
                            if (!filaDatos.has(row)) filaDatos.set(row, {});
                            filaDatos.get(row).idCuenta = cuentaData.id;
                            filaDatos.get(row).tipo = tipo;

                          marcarFilaProcesada(row);
                            intentarObtenerSegmento(row);
                    }
                    else{
                        marcarFilaProcesada(row);
                        console.error('No hay datos');
                    }
                    
                })
                    .catch(error => {
                        marcarFilaProcesada(row);
                        const inputs = row.querySelectorAll('input');
                        inputs.forEach(input => {
                            input.disabled = true;
                        });

                        const projectInput = row.querySelector('.project-id-container input');
                        if (projectInput) {
                            projectInput.disabled = true;
                        }

                        row.classList.add('fila-invalida');
                    });
               
            }
        });
    });
        document.querySelector('form').addEventListener('submit', function (e) {
        const filasInvalidas = document.querySelectorAll('tr.fila-invalida');
        filasInvalidas.forEach(fila => {
            const inputs = fila.querySelectorAll('input, select, textarea');
            inputs.forEach(input => input.remove()); 
        });
    });

    function intentarObtenerSegmento(row) {
        const datos = filaDatos.get(row);
        if (datos && datos.idProyecto && datos.idCuenta && datos.tipo) {
            fetch(`/CargaExcel/obtenerSegmento?idproyecto=${datos.idProyecto}&idcuenta=${datos.idCuenta}&tipo=${encodeURIComponent(datos.tipo)}`)
                .then(response => response.json())
                .then(segmentoData => {
                    const segmentoCell = row.querySelector('.segmento-id-container');
                    const segmentoinput = row.querySelector('.hidden-inputs-segmento');
                    if (segmentoData && segmentoData.idsegmento) { 
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'idsegmento';
                        input.value = segmentoData.idsegmento;
                        
                        segmentoinput.appendChild(input);
                        segmentoCell.textContent = `${segmentoData.nombre}`;
                        marcarFilaProcesada(row);
                       
                    } else {
                        segmentoCell.textContent = 'Segmento no encontrado';
                        row.style.backgroundColor = '#fee2e2';
                        row.style.color = '#000000';
                        row.style.fontWeight = 'bold';
                        marcarFilaProcesada(row);
                        throw new Error('Segmento no encontrado');
                    }
                      
                })
                .catch(error => {
                   marcarFilaProcesada(row);
                    const inputs = row.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.disabled = true;
                    });

                    const projectInput = row.querySelector('.project-id-container input');
                    if (projectInput) {
                        projectInput.disabled = true;
                    }

                    row.classList.add('fila-invalida');
                });
        }
    }

  
</script>

<script>
    document.addEventListener("DOMContentLoaded", async () => {
        const rows = document.querySelectorAll("table tbody tr");

        for (const row of rows) {
            const proveedorCell = row.children[2]; 
            const inputHidden = row.querySelector(".id-proveedor-hidden");
            const proveedorerror = row.querySelector(".error-id-proveedor-container");
            if (proveedorCell && inputHidden) {
                const nombreProveedor = proveedorCell.textContent.trim();

                try {
                    const response = await fetch(`/CargaExcel/ObtenerIdProveedor?nombreproveedor=${encodeURIComponent(nombreProveedor)}`);
                    if (response.ok) {
                        const id = await response.json();
                        inputHidden.value = id;
                       
                        if(!id || id===0){
                             proveedorerror.textContent = 'Proveedor No Encontrado';
                            row.style.backgroundColor = '#fee2e2';
                            row.style.color = '#000000';
                            row.style.fontWeight = 'bold';
                           
                            throw new Error('Proveedor no encontrado');
                        }
                        
                    }
                } catch (error) {
                    console.error("Error de red:", error);
                   
                     const inputs = row.querySelectorAll('input');
                        inputs.forEach(input => {
                        input.disabled = true;
                     });

                            const projectInput = row.querySelector('.project-id-container input');
                     if (projectInput) {
                            projectInput.disabled = true;
                     }

                    row.classList.add('fila-invalida');
                }
                finally {
                
                marcarFilaProcesada(row);
                }   
            }
              else {
            
            marcarFilaProcesada(row);
        }
        }
    });
</script>


<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('formEgresos');
        const modal = document.getElementById('modalMensaje');
        const modalBody = document.getElementById('modalBody');
        const modalHeader = document.getElementById('modalHeader');
        const cerrarModal = document.getElementById('cerrarModal');

        cerrarModal.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        form.addEventListener('submit', function (e) {
            e.preventDefault();
            modalHeader.className = "px-4 py-2 rounded-t-lg bg-blue-600 text-white text-lg font-semibold";
            modalHeader.textContent = "Espere...";
            modalBody.textContent = "Cargando solicitud...";
            modal.classList.remove('hidden');
            const formData = new FormData(form);

            fetch('/CargaExcel/GuardarEgresosMasivos', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        modalHeader.className = "px-4 py-2 rounded-t-lg bg-green-600 text-white text-lg font-semibold";
                        modalHeader.textContent = "¡Éxito!";
                         modalBody.textContent = result.message || "Operación completada.";
                         modal.classList.remove('hidden');
                         cerrarModal.classList.add('hidden');
                         setTimeout(() => {
                                window.location.href = "/Home/Index"; 
                        }, 2500);
                        return;
                    } else {
                        modalHeader.className = "px-4 py-2 rounded-t-lg bg-red-600 text-white text-lg font-semibold";
                    }

                   
                })
                .catch(error => {
                    modalHeader.className = "px-4 py-2 rounded-t-lg bg-red-600 text-white text-lg font-semibold";
                    modalBody.textContent = "Error al guardar los egresos.";
                    modal.classList.remove('hidden');
                    console.error(error);
                });
        });
    });
</script>

<script>
    const totalFilas = document.querySelectorAll("table tbody tr").length;
        let filasProcesadas = 0; 

    function marcarFilaProcesada(row) {
        if (!row.classList.contains('procesada')) {
            row.classList.add('procesada');
            filasProcesadas++;
            verificarSiTodasLasFilasEstanProcesadas();
        }
    }

       function verificarSiTodasLasFilasEstanProcesadas() {
        if (filasProcesadas === totalFilas) {
            const modal = document.getElementById("modalCargando");
            const boton = document.getElementById("btnGuardarEgresos");

            if (modal) modal.style.display = "none";
            boton.disabled = false;
            boton.classList.remove("opacity-50", "cursor-not-allowed");
        }
    }

    
    document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modalCargando");
        if (modal) modal.style.display = "flex"; 
    });
</script>