@{
    ViewData["Title"] = "Vista Previa Egresos";
}


@model List<Proyectogestionhoras.Models.DTO.EgresosExcelDTO>;

<link rel="stylesheet" href="~/css/pageloading.css" asp-append-version="true" />
<link rel="stylesheet" href="~/css/dataloading.css" asp-append-version="true" />

 <style>

    .form-container {
        max-width: 1200px;
        margin: 0 auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-top: 60px;
    }

    .form-title {
        font-size: 1.2rem;
        font-weight: 600;
        color: #333;
        text-align: center;
        margin-bottom: 10px;
    }

    .form-subtitle {
        font-size: 1.0rem;
        color: #666;
        text-align: center;
        margin-bottom: 20px;
    }

    #toastContainer {
        position: fixed;
        top: 9rem;
        right: 1rem;
        z-index: 9999;
    }

        #toastContainer > div {
            min-width: 250px;
            font-weight: bold;
            opacity: 1;
            transition: opacity 0.5s ease-in-out;
        }

   
  </style>

<div class="form-container">

    <p class="form-subtitle" style="color:black;">Vista Prevía de Egresos Cargados</p>
    <div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
        <p class="text-sm text-gray-600">A Continuación, se muestran los datos cargados del Excel que usted ha subido. Las filas que se marcan en rojo significan que no ha podido encontrar, ya sea un proyecto, proveedor, egreso o un segmento. Estas filas no se guardarán en el sistema. Deberá corregir algun dato o registrar en los parametros dependiendo del dato que no ha encontrado.</p>
    </div>
    <div class="overflow-x-auto">
        <form id="formEgresos" method="post" action="/CargaExcel/GuardarEgresosMasivos">
            <table class="min-w-full text-xs border-collapse">

                <thead>
                    <tr class="bg-green-100 text-black">

                        <th class="p-2 border border-gray-300 text-left">Número del Proyecto</th>
                        <th class="p-2 border border-gray-300 text-left">Egreso</th>
                        <th class="p-2 border border-gray-300 text-left">Proveedor</th>
                        <th class="p-2 border border-gray-300 text-left">Monto</th>
                        <th class="p-2 border border-gray-300 text-left">Fecha</th>
                        <th class="p-2 border border-gray-300 text-left">Estado</th>
                        
                        <th class="p-2 border border-gray-300 text-left">Glosa</th>
                        <th class="p-2 border border-gray-300 text-left">Tipo</th>
                      


                    </tr>
                </thead>
                <tbody>

                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="p-2 border border-gray-300 text-left">@item.numproyecto</td>
                            <td class="p-2 border border-gray-300 text-left">@item.egreso</td>
                            <td class="p-2 border border-gray-300 text-left">@item.proveedor</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Monto.ToString("C")</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Fecha.ToString("dd-MM-yyyy")</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Estado</td>
                            
                            <td class="p-2 border border-gray-300 text-left">@item.Glosa</td>
                            <td class="p-2 border border-gray-300 text-left">@item.Tipo</td>
                            <td class="cuenta-cell"></td>
                            <td style="display:none;">
                                <input name="numproyecto" type="hidden" value="@item.numproyecto" />
                                <input name="egreso" type="hidden" value="@item.egreso" />
                                <input name="proveedor" type="hidden" value="@item.proveedor" />
                                <input name="Monto" type="hidden" value="@item.Monto" />
                                <input name="Fecha" type="hidden" value="@item.Fecha" />
                                <input name="Estado" type="hidden" value="@item.Estado" />
                               
                                <input name="Glosa" type="hidden" value="@item.Glosa" />
                                <input name="Tipo" type="hidden" value="@item.Tipo" />


                            </td>
                            <td class="segmento-id-container"></td>
                            <td class="project-id-container"></td>
                            <td class="egreso-id-container"></td>
                            <td class="error-id-proveedor-container"></td>
                            <td class="proveedor-id-container">

                                <input type="hidden" name="IdsProveedor" class="id-proveedor-hidden" />
                            </td>
                            <td style="display:none;" class="hidden-inputs-segmento"></td>

                        </tr>
                    }

                </tbody>

            </table>

            <div class="mt-4 flex justify-center">
                <button id="btnGuardarEgresos" type="submit" disabled class="bg-orange-500 opacity-50 cursor-not-allowed hover:bg-orange-700 text-white font-bold py-2 px-4 rounded">
                    Guardar Egresos
                </button>
            </div>
        
        
        </form>
       


    </div>
   
</div>

<div id="loader" style="
    position: fixed;
    z-index: 9999;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background: white;
    display: flex;
    align-items: center;
    justify-content: center;
">
    <div class="spinner"></div>
</div>

<!--MODAL REGISRO-->

<div id="modalMensaje" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50 hidden">
    <div class="bg-white rounded-lg shadow-lg max-w-md w-full">
        <div id="modalHeader" class="px-4 py-2 rounded-t-lg text-white text-lg font-semibold">
            
        </div>
        <div class="px-4 py-4 text-gray-800" id="modalBody">
            
        </div>
        <div class="px-4 py-2 flex justify-end">
            <button id="cerrarModal" class="px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded">Cerrar</button>
        </div>
    </div>
</div>


<!-- Modal de Cargando -->
<div id="modalCargando" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
    <div class="bg-white p-6 rounded-lg shadow-lg text-center">
        <div class="loader mb-4"></div>
        <p class="text-lg font-semibold text-gray-700">Cargando datos, por favor espera...</p>
    </div>
</div>

<div id="toastContainer" class="fixed top-12 right-5 z-50"></div>

<script>
    window.addEventListener('load', function () {
        
        const loader = document.getElementById('loader');
        if (loader) {
            loader.style.display = 'none';
        }
    });
</script>

<script>
    let huboErrorEnFetch = false;

    const filaDatos = new Map(); 

    //ID PROYECTO
       async function cargarProyectos() {
        const filas = Array.from(document.querySelectorAll('tbody tr'));
        const listaNumProyectos = filas.map(row => {
            const cell = row.querySelector('td:first-child');
            return cell?.textContent.trim() || null;
        }).filter(x => x);

        if (listaNumProyectos.length === 0) return;

        try {
            const response = await fetch('/CargaExcel/ObtenerIdsProyectosBatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(listaNumProyectos)
            });

            const data = await response.json();

            filas.forEach(row => {
                const cell = row.querySelector('td:first-child');
                const container = row.querySelector('.project-id-container');
                const numproyecto = cell?.textContent.trim();

                if (!numproyecto) {
                    row.style.backgroundColor = '#fee2e2';
                    row.style.color = '#000';
                    row.style.fontWeight = 'bold';
                    row.classList.add('fila-invalida');
                 
                    return;
                }

                const id = data[numproyecto] || 0;

                if (id === 0) {
                    row.classList.add('fila-invalida');
    row.style.backgroundColor = '#fee2e2'; // rojo
    row.style.color = '#000';
   
    const inputs = row.querySelectorAll('input, select, textarea');
    inputs.forEach(input => input.remove());
    
    const container = row.querySelector('.project-id-container');
    container.textContent = 'Proyecto No Encontrado';

                    marcarPaso(row, "proyecto");
                } else {
                    container.textContent = ''; 
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'ProyectoId';
                    hiddenInput.value = id;
                    container.appendChild(hiddenInput);

                    cell.textContent = numproyecto;
                    marcarPaso(row, "proyecto");
                }
            });
        } catch (error) {
            console.error('Error al cargar proyectos batch:', error);
             huboErrorEnFetch = true;
            filas.forEach(row => {
                row.style.backgroundColor = '#fee2e2';
                row.style.color = '#000';
                row.style.fontWeight = 'bold';
                row.classList.add('fila-invalida');
                   const inputProyectos = row.querySelectorAll('input[name="ProyectoId"]');
    inputProyectos.forEach(input => input.remove());
                marcarPaso(row, "proyecto");
            });
             const inputs = row.querySelectorAll('input');
                        inputs.forEach(input => {
                            input.disabled = true;
                        });

                         

        }
    }


    //ID EGRESO
            async function cargarEgresos() {
        const rows = document.querySelectorAll('tbody tr');
        const nombresPorTipo = {
            GASTOS: [],
            SERVICIOS: []
        };
        const filaPorEgreso = new Map();

        rows.forEach(row => {
            const cellNombre = row.querySelector('td:nth-child(2)');
            const cellTipo = row.querySelector('td:nth-child(8)');

            const nombreEgreso = cellNombre?.textContent.trim().toUpperCase();
            const tipoTexto = cellTipo?.textContent.trim().toUpperCase();

               let tipo;
    if (tipoTexto === 'GASTOS') {
      tipo = 'GASTOS';
    } else if (tipoTexto === 'OTROS' || tipoTexto === 'CONSULTORES EXTERNOS') {
      tipo = 'SERVICIOS';
    } else {
      tipo = 'SERVICIOS'; 
    }


            if (nombreEgreso) {
                nombresPorTipo[tipo].push(nombreEgreso);

                const key = `${tipo}||${nombreEgreso}`; 
                if (!filaPorEgreso.has(key)) {
                    filaPorEgreso.set(key, []);
                }
                filaPorEgreso.get(key).push(row);
            }
        });

        for (const tipo of ['GASTOS', 'SERVICIOS']) {
            if (nombresPorTipo[tipo].length === 0) continue;

            try {
                const response = await fetch('/CargaExcel/ObtenerIdsEgresosBatch', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        nombres: nombresPorTipo[tipo],
                        tipo: tipo
                    })
                });

                const egresosMap = await response.json();

                nombresPorTipo[tipo].forEach(nombre => {
                    const key = `${tipo}||${nombre}`;
                    const filas = filaPorEgreso.get(key);
                    const id = egresosMap[nombre];

                    filas.forEach(row => {
                        const egresoIdContainer = row.querySelector('.egreso-id-container');
                        const cell = row.querySelector('td:nth-child(2)');
                      
                        if (!id || id === 0) {
                             egresoIdContainer.textContent = 'Egreso No Encontrado';
    row.style.backgroundColor = '#fee2e2';
    row.style.color = '#000000';
    row.style.fontWeight = 'bold';
    row.classList.add('fila-invalida');

    // Remueve todos los inputs para que no se envíen
    const inputs = row.querySelectorAll('input, select, textarea');
    inputs.forEach(input => input.remove());


    const inputProyectos = row.querySelectorAll('input[name="ProyectoId"]');
    inputProyectos.forEach(input => input.remove());

                                marcarPaso(row, 'egreso');
                            huboErrorEnFetch = true;
                            return;
                        }

                        egresoIdContainer.textContent = '';

                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'IdEgreso';
                        input.value = id;
                        egresoIdContainer.appendChild(input);

                        marcarPaso(row, 'egreso');
                        cell.textContent = nombre;
                    });
                });

            } catch (error) {
                console.error('Error en cargarEgresosBatch:', error);

                nombresPorTipo[tipo].forEach(nombre => {
                    const key = `${tipo}||${nombre}`;
                    const filas = filaPorEgreso.get(key);

                    filas.forEach(row => {
                        row.style.backgroundColor = '#fee2e2';
                        row.style.color = '#000';
                        row.style.fontWeight = 'bold';
                        row.classList.add('fila-invalida');

                        const inputs = row.querySelectorAll('input');
                        inputs.forEach(input => input.disabled = true);
                            const inputProyectos = row.querySelectorAll('input[name="ProyectoId"]');
    inputProyectos.forEach(input => input.remove());


                            marcarPaso(row, "egreso");
                    });
                });

                huboErrorEnFetch = true;
            }
        }
    }



        document.querySelector('form').addEventListener('submit', function (e) {
        const filasInvalidas = document.querySelectorAll('tr.fila-invalida');
        filasInvalidas.forEach(fila => {
            const inputs = fila.querySelectorAll('input, select, textarea');
            inputs.forEach(input => input.remove()); 
        });
    });

    function intentarObtenerSegmento(row) {
        const datos = filaDatos.get(row);
        if (datos && datos.idProyecto && datos.idCuenta && datos.tipo) {
            fetch(`/CargaExcel/obtenerSegmento?idproyecto=${datos.idProyecto}&idcuenta=${datos.idCuenta}&tipo=${encodeURIComponent(datos.tipo)}`)
                .then(response => response.json())
                .then(segmentoData => {
                    const segmentoCell = row.querySelector('.segmento-id-container');
                    const segmentoinput = row.querySelector('.hidden-inputs-segmento');
                    if (segmentoData && segmentoData.idsegmento) { 
                        const input = document.createElement('input');
                        input.type = 'hidden';
                        input.name = 'idsegmento';
                        input.value = segmentoData.idsegmento;
                        
                        segmentoinput.appendChild(input);
                        segmentoCell.textContent = `${segmentoData.nombre}`;
                        marcarPaso(row, "segmento");
                       
                    } else {
                        segmentoCell.textContent = 'Segmento no encontrado';
                        row.style.backgroundColor = '#fee2e2';
                        row.style.color = '#000000';
                        row.style.fontWeight = 'bold';
                        marcarPaso(row, "segmento");
                        throw new Error('Segmento no encontrado');
                    }
                      
                })
                .catch(error => {
                   marcarPaso(row, "segmento");
                   huboErrorEnFetch = true;
                    const inputs = row.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.disabled = true;
                    });

                    const projectInput = row.querySelector('.project-id-container input');
                    if (projectInput) {
                        projectInput.disabled = true;
                    }

                    row.classList.add('fila-invalida');
                });
        }
    }

  
</script>

<script>
          async function cargarProveedores() {
        const filas = Array.from(document.querySelectorAll("table tbody tr"));

      
        const listaProveedores = filas
            .map(row => {
                const proveedorCell = row.children[2];
                return proveedorCell?.textContent.trim() || null;
            })
            .filter(x => x);

        if (listaProveedores.length === 0) return;

        try {
           
            const response = await fetch('/CargaExcel/ObtenerIdsProveedoresBatch', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(listaProveedores)
            });

               let data;
    if (response.ok) {
        data = await response.json();
    } else {
        const text = await response.text();
        console.error('Error HTTP:', response.status, text);
        throw new Error(`Error del servidor: ${text}`);
    }

            filas.forEach(row => {
                const proveedorCell = row.children[2];
                const inputHidden = row.querySelector(".id-proveedor-hidden");
                const proveedorerror = row.querySelector(".error-id-proveedor-container");

                if (!proveedorCell || !inputHidden) {
                    marcarPaso(row, "proveedor");
                    return;
                }

                const nombreProveedor = proveedorCell.textContent.trim().toUpperCase();
                const id = data[nombreProveedor] || 0;

                if (id === 0) {
                      if (proveedorerror) proveedorerror.textContent = 'Proveedor No Encontrado';
    row.style.backgroundColor = '#fee2e2';
    row.style.color = '#000000';
    row.style.fontWeight = 'bold';
    row.classList.add('fila-invalida');

    
    const inputs = row.querySelectorAll('input, select, textarea');
    inputs.forEach(input => input.remove());

   
    const inputProyectos = row.querySelectorAll('input[name="ProyectoId"]');
    inputProyectos.forEach(input => input.remove());

                } else {
                    if (proveedorerror) proveedorerror.textContent = '';
                    inputHidden.value = id;
           
                    row.style.backgroundColor = '';
                    row.style.color = '';
                    row.style.fontWeight = '';
                    row.classList.remove('fila-invalida');
                }

                marcarPaso(row, "proveedor");
            });

        } catch (error) {
            console.error('Error al cargar proveedores batch:', error);
            filas.forEach(row => {
                row.style.backgroundColor = '#fee2e2';
                row.style.color = '#000000';
                row.style.fontWeight = 'bold';
                row.classList.add('fila-invalida');

                const inputs = row.querySelectorAll('input');
                inputs.forEach(input => input.disabled = true);


                           const inputProyectos = row.querySelectorAll('input[name="ProyectoId"]');
    inputProyectos.forEach(input => input.remove());

                marcarPaso(row, "proveedor");
            });
            huboErrorEnFetch = true;
        }
    }


</script>
<script>
       document.addEventListener('DOMContentLoaded', async () => {
      try {
       
        await Promise.all([
      cargarProyectos(),
      cargarProveedores(),
	  cargarEgresos()
    ]);


      } catch (error) {
        console.error('Error en la carga inicial:', error);
      }
    });
        </script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('formEgresos');
        const modal = document.getElementById('modalMensaje');
        const modalBody = document.getElementById('modalBody');
        const modalHeader = document.getElementById('modalHeader');
        const cerrarModal = document.getElementById('cerrarModal');

        cerrarModal.addEventListener('click', () => {
            modal.classList.add('hidden');
        });

        form.addEventListener('submit', function (e) {
            e.preventDefault();
            modalHeader.className = "px-4 py-2 rounded-t-lg bg-blue-600 text-white text-lg font-semibold";
            modalHeader.textContent = "Espere...";
            modalBody.textContent = "Cargando solicitud...";
            modal.classList.remove('hidden');
            const formData = new FormData(form);

            fetch('/CargaExcel/GuardarEgresosMasivos', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(result => {
                    if (result.success) {
                        modalHeader.className = "px-4 py-2 rounded-t-lg bg-green-600 text-white text-lg font-semibold";
                        modalHeader.textContent = "¡Éxito!";
                         modalBody.textContent = result.message || "Operación completada.";
                         modal.classList.remove('hidden');
                         cerrarModal.classList.add('hidden');
                         setTimeout(() => {
                                window.location.href = "/Home/Index"; 
                        }, 2500);
                        return;
                    } else {
                        modalHeader.className = "px-4 py-2 rounded-t-lg bg-red-600 text-white text-lg font-semibold";
                    }

                   
                })
                .catch(error => {
                    modalHeader.className = "px-4 py-2 rounded-t-lg bg-red-600 text-white text-lg font-semibold";
                    modalBody.textContent = "Error al guardar los egresos.";
                    modal.classList.remove('hidden');
                    console.error(error);
                });
        });
    });
</script>

<script>
    const estadoFilas = new Map();

        function marcarPaso(row, paso) {
        if (!estadoFilas.has(row)) {
            estadoFilas.set(row, {
                proyecto: false,
                egreso: false,
               // cuenta: false,
              //  segmento: false,
                proveedor: false
            });
        }

        const estado = estadoFilas.get(row);

        estado[paso] = true;
       

        const completa = Object.values(estado).every(v => v === true);
        if (completa && !row.classList.contains('procesada')) {
            row.classList.add('procesada');
            verificarSiTodasLasFilasEstanCompletas();
        }
    }

          function verificarSiTodasLasFilasEstanCompletas() {
        const totalFilas = document.querySelectorAll("table tbody tr").length;
        const completadas = document.querySelectorAll("tr.procesada").length;

        if (completadas === totalFilas) {
            const modal = document.getElementById("modalCargando");
            const boton = document.getElementById("btnGuardarEgresos");

            if (modal) modal.style.display = "none";
            boton.disabled = false;
            boton.classList.remove("opacity-50", "cursor-not-allowed");
            if (huboErrorEnFetch) {
            mostrarToast("Hubo un error al cargar algunos datos.", "error");
            } else {
            mostrarToast("Datos cargados correctamente.", "success");
            }
        }
    }

    
   document.addEventListener("DOMContentLoaded", () => {
        const modal = document.getElementById("modalCargando");
        if (modal) modal.style.display = "flex";
     });
</script>

<script>
       function mostrarToast(mensaje, tipo) {
        
        const container = document.getElementById("toastContainer");
        if (!container) {
            console.error("toastContainer no encontrado en el DOM");
            return;
        }

        const toast = document.createElement("div");
           toast.className = `opacity-100 mb-2 px-4 py-2 rounded shadow-xl text-white transition-opacity duration-500 ${
        tipo === "success" ? "bg-green-500" : "bg-red-500"
    }`;

        toast.textContent = mensaje;
        container.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = "0";
        }, 3000);

        setTimeout(() => {
            toast.remove();
        }, 3500);
    }
</script>