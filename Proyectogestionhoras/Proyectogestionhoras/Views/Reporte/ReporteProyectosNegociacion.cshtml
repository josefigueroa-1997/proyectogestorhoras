@{
    ViewData["Title"] = "Proyectos En Negociación";

}
<h1 style="margin-top: 50px;" class="text-2xl font-bold mb-4">Proyectos en Negociación</h1>
<div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
    <p class="text-sm text-gray-600">Muestra los proyectos en negociación agrupandolos por probabilidad, centro de costo y tipologías.Además, se enseñan las facturaciones proyectadas</p>
</div>
<div style="margin-top: 50px;" class="container mx-auto mt-4 p-4 bg-white rounded-lg shadow-md">
    <div id="mensajeNoDatos" class="text-center text-gray-500 text-lg font-bold hidden">
        No hay datos disponibles para mostrar.
    </div>
    <div class="overflow-x-auto" id="contenedorTabla">
        <button id="exportButton" class="bg-green-500 text-white px-4 py-2 rounded">Exportar a Excel</button>
        <table class="min-w-full divide-y divide-gray-200" id="tablaReporte">
            <thead class="bg-blue-100">
                <tr>
                    <th class="text-left text-xs font-medium ">Probabilidad</th>
                    <th class="text-left text-xs font-medium ">Tipología</th>
                    <th class="text-left text-xs font-medium ">U. Negocio</th>
                    <th class="text-left text-xs font-medium ">Cliente</th>
                    <th class="text-left text-xs font-medium ">Num Proyecto</th>
                    <th class="text-left text-xs font-medium ">Nombre</th>
                    <th class="text-left text-xs font-medium ">C. Costo</th>

                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/exceljs/dist/exceljs.min.js"></script>

<script>
    function formatearNumero(num) {
        num = Math.round(num);  
        return num.toLocaleString('de-DE', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }
    let indicesFechas = [];
    $(document).ready(function () {
        cargarReporte();
    
        $('#exportButton').click(function () {
            exportarExcel();
        });
    });

    function cargarReporte() {
        $.ajax({
            url: '/Reporte/ObtenerDatosNegociacion',
            method: 'GET',
            dataType: 'json',
            success: function (datos) {
                const contenedorTabla = $('#contenedorTabla');
                const mensajeNoDatos = $('#mensajeNoDatos');
                const tablaBody = $('#tablaReporte tbody');
               
                tablaBody.empty();
     
                if (datos.length === 0) {
                    contenedorTabla.hide();
                    mensajeNoDatos.show();
                    return;
                } else {
                    contenedorTabla.show();
                    mensajeNoDatos.hide();
                }


                const tabla = $('#tablaReporte');
                const fechasUnicas = new Set();

                datos.forEach(item => {
                    const fecha = new Date(item.fechaFactura);
                    const mes = String(fecha.getMonth() + 1).padStart(2, '0');
                    const anio = fecha.getFullYear();
                    const mesAnio = `${mes}-${anio}`;
                    fechasUnicas.add(mesAnio);
                });

                const fechasOrdenadas = Array.from(fechasUnicas).sort((a, b) => {
                    const [mesA, anioA] = a.split('-');
                    const [mesB, anioB] = b.split('-');
                    return anioA - anioB || mesA - mesB;
                });

                const filaCabecera = tabla.find('thead tr');
                
                

                fechasOrdenadas.forEach((mesAnio,index) => {
                    const th = $('<th class="text-left text-xs font-medium "></th>').text(mesAnio);
                    filaCabecera.append(th); 
                    indicesFechas.push(index + 7);
                });
                
                filaCabecera.append('<th class="text-left text-xs font-medium ">Total Proyecto</th>');
                const ordenProbabilidad = {
                    "Alto": 1,
                    "Medio": 2,
                    "Bajo": 3
                };

                const datosAgrupados = {};
                datos.forEach(item => {
                    const numProyecto = item.numProyecto;
                    if (!datosAgrupados[numProyecto]) {
                        datosAgrupados[numProyecto] = {
                            ...item,
                            montos: {}
                        };
                    }
                    const fecha = new Date(item.fechaFactura);
                    const mes = String(fecha.getMonth() + 1).padStart(2, '0');
                    const anio = fecha.getFullYear();
                    const mesAnio = `${mes}-${anio}`;
                    datosAgrupados[numProyecto].montos[mesAnio] = item.neto;
                });

                const datosArray = Object.values(datosAgrupados);

                datosArray.sort((a, b) => {
                    const comparacionProbabilidad = ordenProbabilidad[a.probabilidad] - ordenProbabilidad[b.probabilidad];
                    if (comparacionProbabilidad !== 0) {
                        return comparacionProbabilidad;
                    }
                    const comparacionTipologia = a.tipoTipologia.localeCompare(b.tipoTipologia);
                    if (comparacionTipologia !== 0) {
                        return comparacionTipologia;
                    }
                    return a.unegocio.localeCompare(b.unegocio);
                });

                function crearFilaTotal(titulo, totalPorMes) {
                    let totalFila = 0;
                    for (const mesAnio in totalPorMes) {
                        totalFila += totalPorMes[mesAnio] || 0;
                    }

                  
                    if (totalFila > 0) {
                        const filaTotal = $('<tr class="text-left text-xs font-medium border border-black px-4 py-2 min-w-[150px]"></tr>').addClass('fila-total').html(
                            `<td class="text-left text-xs font-medium border border-black px-4 py-2 min-w-[150px]" colspan="7">Total ${titulo}</td>`
                        );

                        fechasOrdenadas.forEach(mesAnio => {
                            const totalMes = totalPorMes[mesAnio] || 0;
                            const td = $('<td class="text-xs font-medium text-right border border-black px-4 py-2 min-w-[150px]"></td>').html(`${formatearNumero(totalMes)}`);
                            filaTotal.append(td);
                        });

                        filaTotal.append(`<td class="text-left text-xs font-medium text-right border border-black px-4 py-2 min-w-[150px]">${formatearNumero(totalFila)}</td>`);
                        return filaTotal;
                    }
                    return null; 
                }

                let totalPorMesProbabilidad = {};
                let totalPorMesTipologia = {};
                let totalPorMesNegocio = {};
                let probabilidadActual = null;
                let tipologiaActual = null;
                let negocioActual = null;

                let totalGeneral = 0;

                datosArray.forEach(item => {
                    if (tipologiaActual && (tipologiaActual !== item.tipoTipologia || probabilidadActual !== item.probabilidad)) {
                        const filaTotal = crearFilaTotal(`Unidad de Negocio ${negocioActual}`, Math.round(totalPorMesNegocio));
                        if (filaTotal) {
                            tabla.find('tbody').append(filaTotal);
                        }
                        const filaTotalTipologia = crearFilaTotal(`Tipología ${tipologiaActual} (Probabilidad ${probabilidadActual})`, totalPorMesTipologia);
                        if (filaTotalTipologia) {
                            tabla.find('tbody').append(filaTotalTipologia);
                        }
                        totalPorMesTipologia = {};
                        totalPorMesNegocio = {};
                    }

                    if (probabilidadActual && probabilidadActual !== item.probabilidad) {
                        const filaTotalProbabilidad = crearFilaTotal(`Probabilidad ${probabilidadActual}`, totalPorMesProbabilidad);
                        if (filaTotalProbabilidad) {
                            tabla.find('tbody').append(filaTotalProbabilidad);
                        }
                        totalPorMesProbabilidad = {};
                    }

                    if (negocioActual && negocioActual !== item.unegocio) {
                        const filaTotalNegocio = crearFilaTotal(`Unidad de Negocio ${negocioActual}`, totalPorMesNegocio);
                        if (filaTotalNegocio) {
                            tabla.find('tbody').append(filaTotalNegocio);
                        }
                        totalPorMesNegocio = {};
                    }

                    probabilidadActual = item.probabilidad;
                    tipologiaActual = item.tipoTipologia;
                    negocioActual = item.unegocio;

                    const fila = $('<tr></tr>').html(
                        `<td class="text-left text-xs font-medium ">${item.probabilidad}</td>
                             <td class="text-left text-xs font-medium ">${item.tipoTipologia}</td>
                             <td class="text-left text-xs font-medium ">${item.unegocio}</td>
                             <td class="text-left text-xs font-medium ">${item.nombreCliente}</td>
                 <td class="text-left text-xs font-medium ">${"'" + item.numProyecto}</td>

                             <td class="text-left text-xs font-medium ">${item.nombre}</td>
                             <td class="text-left text-xs font-medium ">${item.cCosto}</td>`
                    );

                    let totalFila = 0;

                    fechasOrdenadas.forEach(mesAnio => {
                        const monto = item.montos[mesAnio] || 0;
                        const td = $('<td class="text-left text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]"></td>');
                        const montoRedondeado = Math.round(monto);

                        if (montoRedondeado !== 0) {
                            td.text(formatearNumero(montoRedondeado));
                        }
                        fila.append(td);

                        totalFila += monto;
                        totalGeneral += monto;

                        if (!totalPorMesProbabilidad[mesAnio]) totalPorMesProbabilidad[mesAnio] = 0;
                        if (!totalPorMesTipologia[mesAnio]) totalPorMesTipologia[mesAnio] = 0;
                        if (!totalPorMesNegocio[mesAnio]) totalPorMesNegocio[mesAnio] = 0;

                        totalPorMesTipologia[mesAnio] = (totalPorMesTipologia[mesAnio] || 0) + monto;
                        totalPorMesProbabilidad[mesAnio] = (totalPorMesProbabilidad[mesAnio] || 0) + monto;
                        totalPorMesNegocio[mesAnio] = (totalPorMesNegocio[mesAnio] || 0) + monto;
                    });

                    fila.append(`<td class="text-left text-xs font-medium border text-right border-black px-4 py-2 min-w-[150px]">${formatearNumero(Math.round(totalFila))}</td>`);
                    tabla.find('tbody').append(fila);
                });

                const filaTotalNegocio = crearFilaTotal(`Unidad de Negocio ${negocioActual}`, Math.round(totalPorMesNegocio));
                if (filaTotalNegocio) {
                    tabla.find('tbody').append(filaTotalNegocio);
                }
                const filaTotalTipologia = crearFilaTotal(`Tipología ${tipologiaActual} (Probabilidad ${probabilidadActual})`, totalPorMesTipologia);
                if (filaTotalTipologia) {
                    tabla.find('tbody').append(filaTotalTipologia);
                }
                const filaTotalProbabilidad = crearFilaTotal(`Probabilidad ${probabilidadActual}`, totalPorMesProbabilidad);
                if (filaTotalProbabilidad) {
                    tabla.find('tbody').append(filaTotalProbabilidad);
                }

                const filaTotalGeneral = $('<tr class="text-left text-xs font-medium text-right border border-black px-4 py-2 min-w-[150px]"></tr>').addClass('totales').html(
                    '<td class="text-left text-xs font-medium border border-black" colspan="7">Total General</td>'
                );

                fechasOrdenadas.forEach(mesAnio => {
                    const totalPorMes = datosArray.reduce((acumulado, item) => {
                        return acumulado + (item.montos[mesAnio] || 0);
                    }, 0);
                    const td = $('<td class="text-left text-xs font-medium text-right border border-black px-4 py-2 min-w-[150px]"></td>').html(`${formatearNumero(Math.round(totalPorMes))}`);
                    filaTotalGeneral.append(td);
                });

                filaTotalGeneral.append(`<td class="text-left text-xs font-medium text-right border border-black px-4 py-2 min-w-[150px]">${formatearNumero(Math.round(totalGeneral))}</td>`);
                tabla.find('tbody').append(filaTotalGeneral);
                $('.fila-total').css('background-color', '#f2f2f2');
                $('.totales').css('background-color', '#d6eaf8');
            },
            error: function () {
                alert('Error al cargar los datos');
            }
        });
    }


    async function exportarExcel() {

        const wb = new ExcelJS.Workbook();
        const ws = wb.addWorksheet('Proyectos');
        const response = await fetch('/images/unitt.png');
        const imageBlob = await response.blob();
        const arrayBuffer = await imageBlob.arrayBuffer();
        const logoImageId = wb.addImage({
            buffer: arrayBuffer,
            extension: 'png'
        });


        ws.addImage(logoImageId, {
            tl: { col: 0, row: 0 },
            ext: { width: 150, height: 50 }
        });

        ws.getRow(1).height = 70;


        ws.getRow(2).height = 20;

        const tabla = document.getElementById('tablaReporte');

        const filas = Array.from(tabla.rows);


        const encabezadosExcel = Array.from(filas[0].cells).map(celda => {
            return { header: celda.innerText.trim(), key: celda.innerText.trim(), width: 15 };
        });


        ws.columns = encabezadosExcel;


        for (let i = 1; i < filas.length; i++) {
            const celdas = Array.from(filas[i].cells);
            const filaDatos = [];

            for (let j = 0; j < celdas.length; j++) {
                const valor = celdas[j].innerText.trim();
                const colspan = celdas[j].colSpan || 1;


                let dato;

                const monto = parseFloat(valor.replace(/\./g, '').replace(/,/g, '.'));
                dato = !isNaN(monto) ? monto : valor;



                filaDatos.push(dato);


                for (let k = 1; k < colspan; k++) {
                    filaDatos.push('');
                }
            }


            while (filaDatos.length < encabezadosExcel.length) {
                filaDatos.push('');
            }


            const nuevaFila = ws.addRow(filaDatos);


            filaDatos.forEach((cellValue, index) => {
                if (typeof cellValue === 'number' && !isNaN(cellValue)) {
                    nuevaFila.getCell(index + 1).numFmt = '#,##0';
                    nuevaFila.getCell(index + 1).alignment = { horizontal: 'right' };
                } else {
                    nuevaFila.getCell(index + 1).alignment = { horizontal: 'left' };
                }
            });
        }


        wb.xlsx.writeBuffer().then(buffer => {
            const blob = new Blob([buffer], { type: 'application/octet-stream' });
            const link = document.createElement('a');
            link.href = window.URL.createObjectURL(blob);
            link.download = 'Proyectos_Negociacion.xlsx';
            link.click();
        });
    }

    function formatMesAno(valor) {
        const partes = valor.split('-');
        if (partes.length === 2) {
            const mes = parseInt(partes[0]);
            const anio = parseInt(partes[1]);
            if (!isNaN(mes) && !isNaN(anio) && mes >= 1 && mes <= 12) {
                return new Date(anio, mes - 1); 
            }
        }
        return null;
    }
</script>