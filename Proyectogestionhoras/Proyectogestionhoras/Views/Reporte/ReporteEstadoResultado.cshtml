@{
    ViewData["Title"] = "Estado Resultado Mensual";
}



<h2 style="margin-top:50px;">Estado de Resultado</h2>
<button onclick="exportarExcel()" class="bg-green-500 text-white px-4 py-2 rounded">Exportar a Excel</button>


<div class="container mx-auto mt-4 p-4 bg-white rounded-lg shadow-md sticky top-[900px] z-50">
    <div class="overflow-x-auto relative">
        <div class="w-full max-w-3xl border-collapse text-left text-sm justify-center" id="tablaContainer"></div>
    </div>
</div>


<script>
    window.onload = async function () {
        const anio = new Date().getFullYear();
        const response = await fetch(`/Reporte/ObtenerEERR?anio=${anio}`);
        const data = await response.json();
        renderizarTabla(data,anio);
    }

    function renderizarTabla(data,anio) {
        // Obtener claves mes/año únicas y ordenarlas
        const mesesUnicos = Array.from(
            new Set(data.map(d => `${d.mes}/${d.anio}`))
        ).sort((a, b) => {
            const [mesA, anioA] = a.split('/').map(Number);
            const [mesB, anioB] = b.split('/').map(Number);
            return anioA - anioB || mesA - mesB;
        });

        // Agrupar por tipo
        const tiposMap = {};
        for (const item of data) {
            if (!tiposMap[item.tipo]) tiposMap[item.tipo] = [];
            tiposMap[item.tipo].push(item);
        }

        let html = `<table id="tablaestadoresultado" class="min-w-full border-collapse table-auto"><thead><tr class="bg-blue-100 text-black"><th class="text-center  px-4 py-2 min-w-[100px] ">Tipo</th>`;
        for (const mes of mesesUnicos) {
            html += `<th class="text-center  px-4 py-2 min-w-[100px] ">${mes}</th>`;
        }
        html += `<th class="text-center  px-4 py-2 min-w-[100px] ">Total ${anio}</th>`;
        html += `<th class="text-center  px-4 py-2 min-w-[100px] ">%</th>`;

        html += `</tr></thead><tbody>`;

        const totalesPorMes = {};
       
        for (const mes of mesesUnicos) totalesPorMes[mes] = 0;
        const ventasAsesoriasPorMes = {};
        let totalVentasAsesorias = 0;
        // Calcular esto una vez fuera del loop:
        if (tiposMap["Ingresos de la Explotación"]) {
            for (const item of tiposMap["Ingresos de la Explotación"]) {
                if (item.cuenta === "Ventas Asesorias") {
                    const claveMes = `${item.mes}/${item.anio}`;
                    if (!ventasAsesoriasPorMes[claveMes]) ventasAsesoriasPorMes[claveMes] = 0;
                    ventasAsesoriasPorMes[claveMes] += item.monto;
                  totalVentasAsesorias += item.monto;
                }
            }
        }

        const totalesInversion = {};
        const totalesGastosAdmVentas = {};
        const totalesEgresosFueraExplotacion = {};
        const totalesIIDyA = {};
        const utilidadNetaPorMes = {};
        function acumularTotalesTipo(tipoNombre, acumulador) {
            if (tiposMap[tipoNombre]) {
                for (const item of tiposMap[tipoNombre]) {
                    const claveMes = `${item.mes}/${item.anio}`;
                    if (!acumulador[claveMes]) acumulador[claveMes] = 0;
                    acumulador[claveMes] += item.monto;
                }
            }
        }

        acumularTotalesTipo("Inversion", totalesInversion);
        acumularTotalesTipo("Gastos de Administración y Ventas", totalesGastosAdmVentas);
        acumularTotalesTipo("Egresos fuera de la Explotación", totalesEgresosFueraExplotacion);
        acumularTotalesTipo("Intereses, Impuestos, Depreciaciones y Amortizaciones", totalesIIDyA);
        let utilidadNetaAgregada = false;
            const ordenTipos = [
                 "Ingresos de la Explotación",
                 "Costos Directos",
                "Gastos de Administración y Ventas",
                "Ingresos fuera de la Explotación",
                "Inversion",
                "Egresos fuera de la Explotación",
                 "Intereses, Impuestos, Depreciaciones y Amortizaciones"
                 ];

        for (const tipo of ordenTipos) {
            if (!tiposMap[tipo]) continue;
            // Calcular totales por tipo y mes
            const totalesTipoMes = {};
            for (const item of tiposMap[tipo]) {
                const claveMes = `${item.mes}/${item.anio}`;
                if (!totalesTipoMes[claveMes]) totalesTipoMes[claveMes] = 0;
                totalesTipoMes[claveMes] += item.monto;
            }

            // Fila del tipo con totales
            html += `<tr class="p-2 bg-gray-300 border font-bold border-gray-300"><td class="text-left text-xs min-w-[300px]">${tipo}</td>`;
            for (const mes of mesesUnicos) {
                const suma = totalesTipoMes[mes] || 0;
                html += `<td class="text-right text-xs border-gray px-4 py-2 min-w-[250px]">${suma === 0 ? '' : suma.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;

            }
            
            const totalAnualTipo = mesesUnicos.reduce((acc, mes) => acc + (totalesTipoMes[mes] || 0), 0);
            html += `<td>${totalAnualTipo ===0 ? '' :   totalAnualTipo.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
               let porcentajetotaltipo = 0;
                if (totalVentasAsesorias !== 0) {
                        porcentajetotaltipo = (totalAnualTipo / totalVentasAsesorias) * 100;
                }
            html += `<td>${porcentajetotaltipo === 0 ? '' : porcentajetotaltipo.toFixed(2)}%</td>`;

            html += `</tr>`;

            const cuentas = {};
            for (const item of tiposMap[tipo]) {
                if (!cuentas[item.cuenta]) cuentas[item.cuenta] = {};
                const claveMes = `${item.mes}/${item.anio}`;
                if (!cuentas[item.cuenta][claveMes]) cuentas[item.cuenta][claveMes] = 0;
                cuentas[item.cuenta][claveMes] += item.monto;
            }

            Object.keys(cuentas).sort().forEach(cuenta => {
                html += `<tr><td>${cuenta}</td>`;
                let totalCuenta = 0;
                for (const mes of mesesUnicos) {
                    const monto = cuentas[cuenta][mes] || 0;
                    html += `<td class="text-xs border  text-right border-black px-4 py-2 min-w-[100px]">${ monto === 0 ? '' : monto.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                    totalCuenta += monto;
                    totalesPorMes[mes] += monto;
                }
                html += `<td>${totalCuenta === 0 ? '' : totalCuenta.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                let porcentajetotalcuenta = 0;
                if (totalVentasAsesorias !== 0) {
                        porcentajetotalcuenta = (totalCuenta / totalVentasAsesorias) * 100;
                }
                html += `<td>${porcentajetotalcuenta === 0 ? '' :  porcentajetotalcuenta.toFixed(2)}%</td>`;
                html += `</tr>`;
            });
            if (tipo === "Costos Directos") {
                html += `<tr class="tipo-row"><td>Margen de contribución</td>`;
                let totalmargen = 0;
                let totalventa = 0;
                for (const mes of mesesUnicos) {
                    const venta = ventasAsesoriasPorMes[mes] || 0;
                    const costo = totalesTipoMes[mes] || 0;
                    const margen = venta + costo;
                    totalmargen += margen;
                    totalventa +=venta;
                    html += `<td>${margen === 0 ? '' :margen.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                }
                html += `<td>${totalmargen === 0 ? '' : totalmargen.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                 let porcentajetotalmargen = 0;
                 if (totalventa !== 0) {
                        porcentajetotalmargen = (totalmargen / totalventa) * 100;
                 }
                 html += `<td>${porcentajetotalmargen === 0 ? '' : porcentajetotalmargen.toFixed(2)}%</td>`;
                html += `<tr class="tipo-row"><td>% Margen de contribución</td>`;
                for (const mes of mesesUnicos) {
                    const venta = ventasAsesoriasPorMes[mes] || 0;
                    const costo = totalesTipoMes[mes] || 0;
                    const margen = venta + costo;

                    let porcentaje = 0;
                    if (venta !== 0) {
                        porcentaje = (margen / venta) * 100;
                    }
                  
                    html += `<td>${porcentaje === 0 ? '' : porcentaje.toFixed(2)}%</td>`;
                }
               
                 html += `<td>${porcentajetotalmargen === 0 ? '': porcentajetotalmargen.toFixed(2)}%</td>`;
                  html += `<td>${porcentajetotalmargen === 0 ? '': porcentajetotalmargen.toFixed(2)}%</td>`;
                html += `</tr>`;
            }
            if (tipo === "Egresos fuera de la Explotación") {
                
                html += `<tr class="tipo-row"><td>EBITDA</td>`;
                let totalebitda = 0;
                for (const mes of mesesUnicos) {
                    const margen = (() => {
                        const venta = ventasAsesoriasPorMes[mes] || 0;
                        const costo = (tiposMap["Costos Directos"] ? tiposMap["Costos Directos"].reduce((acc, cur) => {
                            if (`${cur.mes}/${cur.anio}` === mes) return acc + cur.monto;
                            return acc;
                        }, 0) : 0);
                        return venta + costo;
                    })();

                    const inversion = totalesInversion[mes] || 0;
                    const gastosAdmVentas = totalesGastosAdmVentas[mes] || 0;
                    const egresosFuera = totalesEgresosFueraExplotacion[mes] || 0;

                    const ebitda = margen + inversion + gastosAdmVentas + egresosFuera;
                    totalebitda += ebitda;
                    html += `<td>${ebitda === 0 ? '': ebitda.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                }
                html += `<td>${totalebitda === 0 ? '': totalebitda.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
                 let porcentajetotalebitda = 0;
                 if (totalVentasAsesorias !== 0) {
                        porcentajetotalebitda = (totalebitda / totalVentasAsesorias) * 100;
                 }
                 html += `<td>${porcentajetotalebitda === 0 ? '': porcentajetotalebitda.toFixed(2)}%</td>`;
                html += `</tr>`;
            }
            if (tipo === "Intereses, Impuestos, Depreciaciones y Amortizaciones") {
                html += generarFilaUtilidadNeta(mesesUnicos, ventasAsesoriasPorMes, tiposMap, totalesIIDyA, utilidadNetaPorMes);
                utilidadNetaAgregada = true;
                html += generarFilaPorcentajeUtilidadNeta(mesesUnicos, tiposMap, utilidadNetaPorMes);
            }

           
        }
        if (!utilidadNetaAgregada) {
            html += generarFilaUtilidadNeta(mesesUnicos, ventasAsesoriasPorMes, tiposMap, totalesIIDyA, utilidadNetaPorMes);
            html += generarFilaPorcentajeUtilidadNeta(mesesUnicos, tiposMap, utilidadNetaPorMes);
        }
       
        html += `</tr>`;

        html += `</tbody></table>`;
        document.getElementById('tablaContainer').innerHTML = html;
    }
    function generarFilaUtilidadNeta(mesesUnicos, ventasAsesoriasPorMes, tiposMap, totalesIIDyA, utilidadNetaPorMes) {
        // Recalcular totales para EBITDA como en el paso anterior
        const totalesInversion = {};
        const totalesGastosAdmVentas = {};
        const totalesEgresosFueraExplotacion = {};

        function acumularTotales(tipoNombre, acumulador) {
            if (tiposMap[tipoNombre]) {
                for (const item of tiposMap[tipoNombre]) {
                    const claveMes = `${item.mes}/${item.anio}`;
                    if (!acumulador[claveMes]) acumulador[claveMes] = 0;
                    acumulador[claveMes] += item.monto;
                }
            }
        }
        acumularTotales("Inversion", totalesInversion);
        acumularTotales("Gastos de Administración y Ventas", totalesGastosAdmVentas);
        acumularTotales("Egresos fuera de la Explotación", totalesEgresosFueraExplotacion);

        let fila = `<tr class="tipo-row"><td>Utilidad neta</td>`;
        let totaleneto = 0;
        let totalingreo = 0;
        for (const mes of mesesUnicos) {
            const venta = ventasAsesoriasPorMes[mes] || 0;
            const costo = (tiposMap["Costos Directos"] ? tiposMap["Costos Directos"].reduce((acc, cur) => {
                if (`${cur.mes}/${cur.anio}` === mes) return acc + cur.monto;
                return acc;
            }, 0) : 0);
            const margen = venta + costo;

            const inversion = totalesInversion[mes] || 0;
            const gastosAdmVentas = totalesGastosAdmVentas[mes] || 0;
            const egresosFuera = totalesEgresosFueraExplotacion[mes] || 0;
            const ebitda = margen + inversion + gastosAdmVentas + egresosFuera;
            totalingreo+=venta;
            const iidya = totalesIIDyA[mes] || 0;

            const utilidadNeta = ebitda + iidya;
            totaleneto+=utilidadNeta;
            utilidadNetaPorMes[mes] = utilidadNeta;

            fila += `<td>${utilidadNeta === 0 ? '' : utilidadNeta.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
        }
        fila += `<td>${totaleneto === 0 ? '' :totaleneto.toLocaleString('es-CL', { style: 'currency', currency: 'CLP' })}</td>`;
         let porcentajetotal = 0;
        if (totalingreo !== 0) {
                porcentajetotal = (totaleneto / totalingreo) * 100;
            }
            fila += `<td>${porcentajetotal === 0 ? '' : porcentajetotal.toFixed(2)}%</td>`;
        fila += `</tr>`;

        return fila;
    }

    function generarFilaPorcentajeUtilidadNeta(mesesUnicos, tiposMap, utilidadNetaPorMes) {
        // Totales Ingresos de la Explotación
        const totalesIngresosExplotacion = {};
        totalneto = 0;
        totalingreo = 0;
        if (tiposMap["Ingresos de la Explotación"]) {
            for (const item of tiposMap["Ingresos de la Explotación"]) {
                const claveMes = `${item.mes}/${item.anio}`;
                if (!totalesIngresosExplotacion[claveMes]) totalesIngresosExplotacion[claveMes] = 0;
                totalesIngresosExplotacion[claveMes] += item.monto;
                totalingreo+=item.monto;
            }
        }

        let fila = `<tr class="tipo-row"><td>% Utilidad neta</td>`;
        for (const mes of mesesUnicos) {
            const ingreso = totalesIngresosExplotacion[mes] || 0;
            const utilidad = utilidadNetaPorMes[mes] || 0;
            let porcentaje = 0;
            if (ingreso !== 0) {
                porcentaje = (utilidad / ingreso) * 100;
            }
            fila += `<td>${porcentaje === 0 ? '' : porcentaje.toFixed(2)}%</td>`;
            totalneto+=utilidad;
        }
        let porcentajetotal = 0;
        if (totalingreo !== 0) {
                porcentajetotal = (totalneto / totalingreo) * 100;
            }
        fila += `<td>${porcentajetotal === 0 ? '' : porcentajetotal.toFixed(2)}%</td>`;
        fila += `<td>${porcentajetotal === 0 ? '' : porcentajetotal.toFixed(2)}%</td>`;
        
        fila += `</tr>`;
        return fila;
    }
</script>

<script>
    async function exportarExcel() {
        const table = document.getElementById("tablaestadoresultado");
        if (!table) return alert("No se encontró la tabla.");

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet("Estado de Resultados");

       
        const rows = Array.from(table.rows);
        rows.forEach((htmlRow, rowIndex) => {
            const cells = Array.from(htmlRow.cells);
            const rowData = [];
            cells.forEach((cell, colIndex) => {
                const text = cell.textContent.trim();

                const alignRight = cell.classList.contains("text-right");
                const isCurrency = /^\$/.test(text);
                const isPercentage = text.endsWith("%");

                
                let value = text;
                if (isCurrency) {
                    value = parseFloat(text.replace(/\$/g, '').replace(/\./g, '').replace(/,/g, '.')) || '';
                } else if (isPercentage) {
                    value = parseFloat(text.replace('%', '')) / 100 || '';
                }

                
                rowData.push({
                    value: value === 0 ? '' : value,
                    alignment: { horizontal: alignRight || isCurrency || isPercentage ? 'right' : 'left' },
                    numFmt: isCurrency ? '"$"#,##0' : (isPercentage ? '0.00%' : undefined)
                });
            });
            worksheet.addRow(rowData.map(c => c.value));

            
            rowData.forEach((c, i) => {
                const cell = worksheet.getRow(rowIndex + 1).getCell(i + 1);
                cell.alignment = c.alignment;
                if (c.numFmt) cell.numFmt = c.numFmt;
                if (rowIndex === 0) {
                    cell.font = { bold: true };
                    cell.fill = {
                        type: 'pattern',
                        pattern: 'solid',
                        fgColor: { argb: 'FFCCE5FF' } 
                    };
                }
                    const tiposEnNegrita = [
        "Ingresos de la Explotación",
        "Costos Directos",
        "Gastos de Administración y Ventas",
        "Ingresos fuera de la Explotación",
        "Inversion",
        "Egresos fuera de la Explotación",
        "Intereses, Impuestos, Depreciaciones y Amortizaciones"
    ];

    // Si la primera celda de la fila coincide con algún tipo, aplicar estilo gris y negrita
    if (i === 0 && tiposEnNegrita.includes(c.value)) {
        worksheet.getRow(rowIndex + 1).eachCell((cell) => {
            cell.fill = {
                type: 'pattern',
                pattern: 'solid',
                fgColor: { argb: 'FFD9D9D9' } // Gris claro
            };
            cell.font = { bold: true };
        });
    }
            });

        });


        const blob = await workbook.xlsx.writeBuffer();
        const blobURL = URL.createObjectURL(new Blob([blob], { type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" }));
        const a = document.createElement("a");
        a.href = blobURL;
        a.download = "EstadoResultados.xlsx";
        document.body.appendChild(a);
        a.click();
        a.remove();
    }
</script>
