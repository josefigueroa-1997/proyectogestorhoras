@{
    ViewData["Title"] = "Reporte Actividades Socios";
}


<div class="container mx-auto p-4" style="margin-top: 50px;">
    <div class="bg-white border border-black rounded-lg shadow-md p-4 mb-6 overflow-x-auto">
        <h1 class="text-xl font-bold mb-4 text-center">Actividades Socios</h1>
        <h1 class="text-xl font-bold mb-4 text-center">Mes: @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@DateTime.Now.Month)</h1>
        <div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
            <p class="text-sm text-gray-600">Muestra la cantidad de horas que los socios han ejecutado por actividad,en el mes actual,año actual y últimos doce meses, tomando como punto de origen el mes actual.(Solo se muestran las actividades que tengan horas registradas)</p>
        </div>
        <button id="download-btn" class="p-2 bg-green-500 text-white rounded">Exportar a Excel</button>
        <div id="tables-container"></div>
    </div>
</div>



<script>
    async function obtenerHorasSocios(mes) {
        const response = await fetch(`/Reporte/ObtenerHorasSociosActividad?mes=${mes}`);
        if (!response.ok) {
            throw new Error('Error al obtener los datos');
        }
        return await response.json();
    }

    function agruparDatos(datos) {
        const agrupados = {};

        datos.forEach(item => {
            const { nombreUsuario, tipo, actividad, hh } = item;

     
            if (!nombreUsuario) return;

            if (!agrupados[nombreUsuario]) {
                agrupados[nombreUsuario] = {};
            }

            if (!agrupados[nombreUsuario][tipo]) {
                agrupados[nombreUsuario][tipo] = {};
            }

            if (!agrupados[nombreUsuario][tipo][actividad]) {
                agrupados[nombreUsuario][tipo][actividad] = 0;
            }

            agrupados[nombreUsuario][tipo][actividad] += hh; 
        });

        return agrupados;
    }

    function crearTabla(agrupados) {
        const container = document.getElementById('tables-container');
        container.innerHTML = ''; 

        for (const [nombreUsuario, tipos] of Object.entries(agrupados)) {
            const table = document.createElement('table');
            table.className = 'min-w-full border-collapse border border-black';
     
            const actividadesSet = new Set();
            for (const tipo in tipos) {
                for (const actividad in tipos[tipo]) {
                    actividadesSet.add(actividad);
                }
            }

            const actividadesArray = Array.from(actividadesSet);

            // Crear cabecera
            const thead = document.createElement('thead');
            thead.className = 'bg-yellow-200';
            const headerRow = document.createElement('tr');
       
            headerRow.innerHTML = `<th class="text-left text-xs font-medium">Tipo</th>`;

         
            actividadesArray.forEach(actividad => {
                headerRow.innerHTML += `<th class="text-center text-xs font-medium">${actividad}</th>`;
            });
        
            headerRow.innerHTML += `<th class="text-center text-xs font-medium">Total</th>`;

            thead.appendChild(headerRow);
            table.appendChild(thead);

            const tbody = document.createElement('tbody');

            for (const [tipo, actividades] of Object.entries(tipos)) {
                const row = document.createElement('tr');
                row.innerHTML = `<td class="text-left text-xs font-medium border border-black">${tipo}</td>`; // Tipo como primera columna
                let totalHoras = 0;
                // Rellenar horas por actividad
                actividadesArray.forEach(actividad => {
                    const horas = actividades[actividad] || 0; 
                    row.innerHTML += `<td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[50px]">${horas !==0 ? horas + ' hrs' : ''}</td>`;
                    totalHoras += horas;
                });
                row.innerHTML += `<td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[50px]">${totalHoras !==0 ? totalHoras + ' hrs' : ''}</td>`;
                tbody.appendChild(row);
            }

            table.appendChild(tbody);

            // Título para cada tabla
            const title = document.createElement('h3');
            title.className = 'text-xl font-bold mb-4';
            title.textContent = `Horas de ${nombreUsuario}`;

            container.appendChild(title);
            container.appendChild(table);
        }
    }

    async function generarExcel(agrupados) {
        const workbook = new ExcelJS.Workbook();
        workbook.creator = 'Sistema';
        workbook.created = new Date();
        const worksheet = workbook.addWorksheet('Horas Socios');

       
        const response = await fetch('/images/unitt.png');
        const imageBlob = await response.blob();
        const arrayBuffer = await imageBlob.arrayBuffer();
        const logoImageId = workbook.addImage({
            buffer: arrayBuffer,
            extension: 'png',
        });

        worksheet.addImage(logoImageId, {
            tl: { col: 0, row: 0 },
            ext: { width: 150, height: 50 },
        });


        const mes = new Date().toLocaleString('default', { month: 'long' }); 
        worksheet.mergeCells('H3:L3'); 
        worksheet.getCell('H3').value = 'Actividades Socios'; 
        worksheet.getCell('H3').font = { bold: true, size: 14 };
        worksheet.getCell('H3').alignment = { horizontal: 'center' };

        worksheet.mergeCells('H4:L4'); 
        worksheet.getCell('H4').value = `Mes: ${mes}`; 
        worksheet.getCell('H4').font = { bold: true, size: 12 };
        worksheet.getCell('H4').alignment = { horizontal: 'center' };

        let currentRow = 5; 
        for (const [nombreUsuario, tipos] of Object.entries(agrupados)) {
            const actividadesSet = new Set();
            for (const tipo in tipos) {
                for (const actividad in tipos[tipo]) {
                    actividadesSet.add(actividad);
                }
            }

            const actividadesArray = Array.from(actividadesSet);

         
            worksheet.mergeCells(`A${currentRow}:C${currentRow}`);
            worksheet.getCell(`A${currentRow}`).value = `Horas de ${nombreUsuario}`;
            worksheet.getCell(`A${currentRow}`).font = { bold: true, size: 14 };
            currentRow++;

         
            const headerRow = [`Tipo`, ...actividadesArray, `Total`];
            worksheet.addRow(headerRow).font = { bold: true };
            worksheet.getRow(currentRow).alignment = { horizontal: 'center' };
            currentRow++;

            for (const [tipo, actividades] of Object.entries(tipos)) {
                const row = [tipo];
                let totalHoras = 0;

                actividadesArray.forEach(actividad => {
                    const horas = actividades[actividad] || 0;
                    row.push(horas);
                    totalHoras += horas;
                });

                row.push(totalHoras);
                worksheet.addRow(row);
                currentRow++;
            }

       
            currentRow += 2;
        }

        const buffer = await workbook.xlsx.writeBuffer();
        const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.href = url;
        link.download = 'Horas_Socios.xlsx';
        link.click();
        URL.revokeObjectURL(url);
    }


    async function cargarDatos(mes) {
        try {
            const datos = await obtenerHorasSocios(mes);
            const agrupados = agruparDatos(datos);
            crearTabla(agrupados);

            document.getElementById('download-btn').onclick = () => generarExcel(agrupados);
        } catch (error) {
            console.error(error);
        }
    }

    cargarDatos(new Date().getMonth() + 1);


</script>