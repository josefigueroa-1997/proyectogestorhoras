@{
    ViewData["Title"] = "Plan de Ventas";
}

<h2 style="margin-top: 50px;" class="text-2xl font-bold mb-4">Plan de Ventas</h2>


<div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
    <p class="text-sm text-gray-600">
        Muestra el plan de ventas de los proyectos agrupandolos por año, quarter y por su estado de probabilidad más los aprobados con un indicador de éxito que se compara con la meta de facturación del quarter.

    </p>
</div>

<div class="container mx-auto mt-4 p-4 bg-white rounded-lg shadow-md">
    <div class="overflow-x-auto relative">
        <div class="w-full max-w-3xl border-collapse text-left text-xs justify-center" id="tables-container"></div>

    </div>
</div>




<script>
    function formatearMiles(valor) {
        return valor.toLocaleString('de-DE', { minimumFractionDigits: 0, maximumFractionDigits: 0 });

    }
    document.addEventListener('DOMContentLoaded', function () {
       
        async function obtenerDatos() {
            try {
                const response = await fetch('/Reporte/ObtenerPlandeVentas');
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error al obtener los datos:', error);
                return [];
            }
        }

        function crearTabla(datos) {
            const organizado = {};

            datos.forEach(item => {
          
                if (item.anio === 0 || !item.anio || !item.trimestre) {
                    return; 
                }

                if (!organizado[item.tipo]) {
                    organizado[item.tipo] = {};
                }
                if (!organizado[item.tipo][item.anio]) {
                    organizado[item.tipo][item.anio] = {};
                }
                if (!organizado[item.tipo][item.anio][item.trimestre]) {
                    organizado[item.tipo][item.anio][item.trimestre] = 0; 
                }
            
                organizado[item.tipo][item.anio][item.trimestre] += item.monto;
            });

           
            const años = [...new Set(datos.filter(item => item.anio !== 0).map(item => item.anio))].sort();

            const trimestres = [...new Set(datos.filter(item => item.trimestre).map(item => item.trimestre))].sort();

          
            const table = document.createElement('table');
            table.border = '1';

       
            const headerRow = document.createElement('tr');
            headerRow.className = 'bg-blue-100 text-black';
            const headerTipo = document.createElement('th');
            headerTipo.textContent = 'Tipo';
            headerRow.appendChild(headerTipo);

            años.forEach(anio => {
                const headerAnio = document.createElement('th');
                headerAnio.className = 'p-2 border border-gray-300 text-center';
                headerAnio.colSpan = trimestres.length; 
                headerAnio.textContent = anio;
                headerRow.appendChild(headerAnio);
            });
            table.appendChild(headerRow);

           
            const trimestreRow = document.createElement('tr');
            trimestreRow.className = 'bg-yellow-100 text-black';
            trimestreRow.appendChild(document.createElement('th')); 

            años.forEach(anio => {
                trimestres.forEach(trimestre => {
                    const trimestreHeader = document.createElement('th');
                    trimestreHeader.className = 'text-center border border-black px-4 py-2 min-w-[100px]';
                    trimestreHeader.textContent = trimestre; 
                    trimestreRow.appendChild(trimestreHeader);
                });
            });
            table.appendChild(trimestreRow);

    
            Object.keys(organizado).forEach(tipo => {
                const dataRow = document.createElement('tr');
                const tipoCell = document.createElement('td');
                tipoCell.className = 'text-left border border-black px-4 py-2 min-w-[250px]';
                tipoCell.textContent = tipo;
                dataRow.appendChild(tipoCell);

                años.forEach(anio => {
                    trimestres.forEach(trimestre => {
                        const montoCell = document.createElement('td');
                        montoCell.className = 'text-xs border font-bold text-right border-black px-4 py-2 min-w-[100px]';
                        const monto = organizado[tipo][anio] ? organizado[tipo][anio][trimestre] || 0 : 0;
                   
                        if (monto === 0) {
                            montoCell.textContent = ''; 
                        } else {
                            montoCell.textContent = formatearMiles(monto); 
                        }
                        dataRow.appendChild(montoCell);
                    });
                });
                table.appendChild(dataRow);

           
                if (tipo === "Aprobado") {
                    const indicadorRow = document.createElement('tr');
                    indicadorRow.className = 'bg-green-100';
                    const indicadorCell = document.createElement('td');
                    indicadorCell.className = 'text-left border border-black px-4 py-2 min-w-[250px]';
                    indicadorCell.textContent = "Indicador Aprobado";
                    indicadorRow.appendChild(indicadorCell);

                    años.forEach(anio => {
                        trimestres.forEach(trimestre => {
                            const indicadorMontoCell = document.createElement('td');
                            indicadorMontoCell.className = 'text-xs border font-bold text-right border-black px-4 py-2 min-w-[100px]';
                            const montoAprobado = organizado["Aprobado"][anio] ? organizado["Aprobado"][anio][trimestre] || 0 : 0;
                            const montoMeta = organizado["Meta"][anio] ? organizado["Meta"][anio][trimestre] || 0 : 0;

                         
                            const indicador = montoMeta !== 0 ? ((montoAprobado / montoMeta) * 100).toFixed(2) + "%" : "0%";
                            indicadorMontoCell.textContent = indicador;
                            indicadorRow.appendChild(indicadorMontoCell);
                        });
                    });
                    table.appendChild(indicadorRow);
                }
            });

            const tablesContainer = document.getElementById('tables-container');
            tablesContainer.appendChild(table);
        }

        obtenerDatos().then(datos => {
            crearTabla(datos);
        });
    
    
    });
    
</script>