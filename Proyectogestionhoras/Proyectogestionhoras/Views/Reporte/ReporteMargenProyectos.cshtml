@{
    ViewData["Title"] = "Reporte Margen de Contribución";
}
 
<h2 style="margin-top: 50px;" class="text-2xl font-bold mb-4">Margen de Contribución de Proyectos</h2>
<div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
    <p class="text-sm text-gray-600">Muestra los margenes de contribución de los proyectos en Ejecución.</p>
</div>
<button id="exportButton" class="mt-4 bg-green-500 text-white p-2 rounded">Exportar a Excel</button>
<div class="container mx-auto mb-4 p-4 bg-white rounded-lg shadow-md">
    <p class="text-center">Fecha de última modificación: @ViewBag.FechaModificacion</p>
    <p class="text-sm text-gray-600 mb-2">Filtros</p>

    <div class="flex space-x-4">
        <div class="flex-1">
            <label for="unegocio" class="block text-sm font-medium text-gray-700">Unidad de Negocio</label>
            <select id="unegocio" name="unegocio" class="unegociosselect w-full px-4 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                @if (ViewBag.Unegocios != null)
                {
                    <option value="" disabled selected>Seleccione una Unidad de Negocio</option>
                    @foreach (var unegocio in ViewBag.Unegocios)
                    {
                        <option value="@unegocio.TipoUnegocio">@unegocio.TipoUnegocio</option>
                    }
                }
            </select>
        </div>

        <div class="flex-1">
            <label for="ccosto" class="block text-sm font-medium text-gray-700">Centro de Costo</label>
            <select id="ccosto" name="ccosto" class="ccosto w-full px-4 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                @if (ViewBag.Ccostos != null)
                {
                    <option value="" disabled selected>Seleccione un Centro de Costo</option>
                    @foreach (var ccosto in ViewBag.Ccostos)
                    {
                        <option value="@ccosto.TipoCcosto">@ccosto.TipoCcosto</option>
                    }
                }
            </select>
        </div>

        <div class="flex-1">
            <label for="tipologia" class="block text-sm font-medium text-gray-700">Tipología</label>
            <select id="tipologia" name="tipologia" class="tipologia w-full px-4 py-2 text-sm border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500">
                @if (ViewBag.Tipologias != null)
                {
                    <option value="" disabled selected>Seleccione una Tipología</option>
                    @foreach (var tipologia in ViewBag.Tipologias)
                    {
                        <option value="@tipologia.TipoTipologia">@tipologia.TipoTipologia</option>
                    }
                }
            </select>
        </div>
        <div class="flex-1">
            <button id="clearFilters" class="bg-blue-500 text-white px-4 py-2 rounded">Limpiar Filtros</button>
        </div>
    </div>
</div>

<div style="margin-top: 50px;" class="container mx-auto mt-4 p-4 bg-white rounded-lg shadow-md">
    <div class="overflow-x-auto">
        <table id="facturasTable" class="min-w-full border-collapse border border-black">
            <thead >
                <tr>
                    <th class="text-left text-xs font-medium "></th>
                    <th class="text-left text-xs font-medium "></th>
                    <th class="text-left text-xs font-medium "></th>
                    <th class="text-left text-xs font-medium "></th>
                    <th class="text-left text-xs font-medium border border-black "></th>
                    <th class="text-left text-xs font-medium  bg-blue-100"></th>
                    <th class="text-left text-xs font-medium bg-blue-100">Presupuesto</th>
                    <th  class="text-center text-xs bg-blue-100  font-medium "></th>
                    <th  class="text-center text-xs bg-blue-100  font-medium "></th>
                    <th class="text-center text-xs bg-red-100 font-medium "></th>
                    <th class="text-center text-xs bg-red-100  font-medium ">Real + Forecast</th>
                    <th class="text-center text-xs bg-red-100 font-medium "></th>
                    <th class="text-center text-xs bg-red-100  font-medium "></th>
                    
                  
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @{
                    decimal
                    totalMontoPresupuesto = 0;
                    decimal
                    totalcostospresupuesto = 0;
                    decimal
                    totalMargenpresupuesto = 0;
                    decimal
                    totalIngresosRealForecast = 0;
                    decimal
                    totalcostosrealforecast = 0;
                    decimal
                    totalmargenrealforecast = 0;
                    decimal
                    diferenciatotalmargen = 0;
                    decimal
                    promediomontopresupuesto = 0;
                    decimal
                    promediocostospresupuesto = 0;
                    decimal
                    promediomargenpresupuesto = 0;
                    decimal
                    promediomontorealforecast = 0;
                    decimal
                    promediocostorealforecast = 0;
                    decimal
                    promediomargenforecastreal = 0;
                    decimal
                    diferenciamargenpromedio = 0;
                   
                    int contador = 0;
                }
                

                @if (ViewBag.Margen != null)
                {
                    <tr class="header-row">
                        <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">NumProyecto</td>
                        <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">Nombre</td>
                        <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">U.Negocio</td>
                        <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">C.Costo</td>
                        <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">Tipología</td>
                        <td class="text-xs border font-medium text-left border-black bg-blue-100  px-4 py-2 min-w-[150px]">Total Ingresos</td>
                        <td class="text-xs border font-medium text-left border-black bg-blue-100  px-4 py-2 min-w-[150px]">Total Costos</td>
                        <td class="text-xs border font-medium text-left border-black bg-blue-100  px-4 py-2 min-w-[150px]">Margen</td>
                        <td class="text-xs border font-medium text-left border-black bg-blue-100  px-4 py-2 min-w-[150px]">% Margen</td>
                        <td class="text-xs border font-medium text-left border-black bg-red-100  px-4 py-2 min-w-[150px]">Total Ingresos</td>
                        <td class="text-xs border font-medium text-left border-black bg-red-100  px-4 py-2 min-w-[150px]">Total Costos</td>
                        <td class="text-xs border font-medium text-left border-black bg-red-100  px-4 py-2 min-w-[150px]">Margen</td>
                        <td class="text-xs border font-medium text-left border-black bg-red-100  px-4 py-2 min-w-[150px]">% Margen</td>
                      
                    </tr>
                    @foreach (var margen in ViewBag.Margen)
                    {
                        decimal margenpresupuesto = margen.Monto - margen.totalcostospresupuesto;
                        decimal margenrealforecast = margen.totalingresorealesforecast - margen.totalcostorealforecast;
                        decimal porcentajeproyectado = 0;
                        decimal porcentajerealforecast = 0;
                        decimal porcentajediferencia = 0;
                        decimal totaldiferenciamargenes = margenpresupuesto - margenrealforecast;
                        if (margen.Monto > 0)
                        {
                            porcentajeproyectado = Math.Round((margenpresupuesto / margen.Monto) * 100, 2);
                        }
                        if (margen.totalingresorealesforecast > 0)
                        {
                            porcentajerealforecast = Math.Round((margenrealforecast / margen.totalingresorealesforecast) * 100, 2);
                        }
                        if (margenpresupuesto > 0)
                        {
                            porcentajediferencia = Math.Round((margenrealforecast / margenpresupuesto) * 100, 2);
                        }
                        <tr>
                            <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">@margen.NumProyecto</td>
                            <td class="text-xs border font-medium text-left border-black sticky left-0 bg-white px-4 py-2 min-w-[150px]">@margen.NombreProyecto</td>
                            <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">@margen.Unegocios</td>
                            <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">@margen.ccosto</td>
                            <td class="text-xs border font-medium text-left border-black  px-4 py-2 min-w-[150px]">@margen.tipologia</td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margen.Monto == 0 ? "" : String.Format("{0:N0}", Math.Round(margen.Monto)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margen.totalcostospresupuesto == 0 ? "" : String.Format("{0:N0}", Math.Round(margen.totalcostospresupuesto)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margenpresupuesto == 0 ? "" : String.Format("{0:N0}", Math.Round(margenpresupuesto)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                <strong>@(porcentajeproyectado == 0 ? "" : String.Format("{0:N0}", porcentajeproyectado) + "%")</strong>
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margen.totalingresorealesforecast == 0 ? "" : String.Format("{0:N0}", Math.Round(margen.totalingresorealesforecast)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margen.totalcostorealforecast == 0 ? "" : String.Format("{0:N0}", Math.Round(margen.totalcostorealforecast)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                @(margenrealforecast == 0 ? "" : String.Format("{0:N0}", Math.Round(margenrealforecast)))
                            </td>
                            <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                                <strong>@(porcentajerealforecast == 0 ? "" : String.Format("{0:N0}", porcentajerealforecast) + "%")</strong>
                            </td>
                            
                            @{
                                totalMontoPresupuesto += margen.Monto;
                                totalcostospresupuesto += margen.totalcostospresupuesto;
                                totalMargenpresupuesto += margenpresupuesto;
                                totalIngresosRealForecast += margen.totalingresorealesforecast;
                                totalcostosrealforecast += margen.totalcostorealforecast;
                                totalmargenrealforecast += margenrealforecast;
                                contador++;
                            }
                           
                        </tr>


                       
                    }
                }
                @{
                    decimal porcentajemargenpresupuesto = 0;
                    decimal porcentajemargenrealforecast = 0;
                    decimal porcentajediferenciamargen = 0;
                    decimal porcentajemargenpresupuestopromedio = 0;
                    decimal porcentajemargenrealforecastpromedio = 0;
                    decimal porcentajediferenciamargenpromedio = 0;
                    if (totalMontoPresupuesto > 0)
                    {
                        porcentajemargenpresupuesto = Math.Round((totalMargenpresupuesto / totalMontoPresupuesto) * 100, 2);
                    }
                    if (totalIngresosRealForecast > 0)
                    {
                        porcentajemargenrealforecast = Math.Round((totalmargenrealforecast / totalIngresosRealForecast) * 100, 2);
                    }

                    diferenciatotalmargen = totalMargenpresupuesto - totalmargenrealforecast;
                    if (totalMargenpresupuesto > 0)
                    {
                        porcentajediferenciamargen = Math.Round((totalIngresosRealForecast / totalMargenpresupuesto) * 100, 2);
                    }
                    promediomontopresupuesto = Math.Round(totalMontoPresupuesto/contador, 2);
                    promediocostospresupuesto = Math.Round(totalcostospresupuesto / contador, 2);
                    promediomargenpresupuesto = Math.Round(totalMargenpresupuesto / contador, 2);
                    promediomontorealforecast = Math.Round(totalIngresosRealForecast / contador, 2);
                    promediocostorealforecast = Math.Round(totalcostosrealforecast / contador, 2);
                    promediomargenforecastreal = Math.Round(totalmargenrealforecast / contador, 2);
                    diferenciamargenpromedio = Math.Round(diferenciatotalmargen / contador, 2);
                    if (promediomontopresupuesto > 0)
                    {
                        porcentajemargenpresupuestopromedio = Math.Round((promediomargenpresupuesto / promediomontopresupuesto) * 100, 2);
                    }
                    if (promediomontorealforecast > 0)
                    {
                        porcentajemargenrealforecastpromedio = Math.Round((promediomargenforecastreal / promediomontorealforecast) * 100, 2);
                    }
                    if (promediomargenpresupuesto > 0)
                    {
                        porcentajediferenciamargenpromedio = Math.Round((promediomontorealforecast / promediomargenpresupuesto) * 100, 2);
                    }
                }
                <tr class="font-bold bg-gray-100">
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]">Total (SUMATORIA)</td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalMontoPresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalcostospresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalMargenpresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                        <strong>@(porcentajemargenpresupuesto == 0 ? "" : String.Format("{0:N0}", porcentajemargenpresupuesto) + "%")</strong>
                    </td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalIngresosRealForecast))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalcostosrealforecast))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(totalmargenrealforecast))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                        <strong>@(porcentajemargenrealforecast == 0 ? "" : String.Format("{0:N0}", porcentajemargenrealforecast) + "%")</strong>
                    </td>
                   
                </tr>
                <tr class="font-bold bg-green-100">
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]">Total (PROMEDIO)</td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-left border-black px-4 py-2 min-w-[150px]"></td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediomontopresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediocostospresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediomargenpresupuesto))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                        <strong>@(porcentajemargenpresupuestopromedio == 0 ? "" : String.Format("{0:N0}", porcentajemargenpresupuestopromedio) + "%")</strong>
                    </td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediomontorealforecast))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediocostorealforecast))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">@String.Format("{0:N0}", Math.Round(promediomargenforecastreal))</td>
                    <td class="text-xs border font-medium text-right border-black px-4 py-2 min-w-[150px]">
                        <strong>@(porcentajemargenrealforecastpromedio == 0 ? "" : String.Format("{0:N0}", porcentajemargenrealforecastpromedio) + "%")</strong>
                    </td>
                   
                </tr>
            </tbody>
        </table>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
<script>
            document.getElementById('exportButton').addEventListener('click', async function () {
        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('Margen');

        const table = document.getElementById('facturasTable');

        const response = await fetch('/images/unitt.png');
        const imageBlob = await response.blob();
        const arrayBuffer = await imageBlob.arrayBuffer();

        const logoImageId = workbook.addImage({
            buffer: arrayBuffer,
            extension: 'png',
        });

        worksheet.addImage(logoImageId, {
            tl: { col: 0, row: 0 },
            ext: { width: 150, height: 50 },
        });

        worksheet.addRow([]);
        worksheet.addRow([]);

        worksheet.mergeCells('D3:G3');
        const titleCell = worksheet.getCell('D3');
        titleCell.value = `Margen de Contribución de Proyectos`;
        titleCell.font = { bold: true, size: 14 };
        titleCell.alignment = { horizontal: 'center', vertical: 'middle' };

        worksheet.addRow([]);
        worksheet.addRow([]);

        
        Array.from(table.rows).forEach((row, rowIndex) => {
            const rowData = [];
            let colOffset = 0; 

            Array.from(row.cells).forEach((cell, colIndex) => {
     
                if (colOffset > 0) {
                    colOffset--;
                    rowData.push(""); 
                    return;
                }

                const cellValue = cell.innerText.replace(/\./g, '');
                const isNumeric = !isNaN(cellValue) && !isNaN(parseFloat(cellValue));

                if (isNumeric && cellValue !== "") {
                    rowData.push(parseFloat(cellValue));
                } else {
                    rowData.push(cell.innerText);
                }

          
                if (cell.hasAttribute('colspan')) {
                    const colspan = parseInt(cell.getAttribute('colspan'));
                    if (colspan > 1) {
               
                        worksheet.mergeCells(rowIndex + 6, colIndex + 1, rowIndex + 6, colIndex + colspan);
                        colOffset = colspan - 1; 
                    }
                }
            });

            worksheet.addRow(rowData);
        });


        worksheet.eachRow((row, rowNumber) => {
            row.eachCell((cell, colNumber) => {
                if (typeof cell.value === 'number') {
                    cell.numFmt = '#,##0';
                    cell.alignment = { horizontal: 'right' };
                } else if (typeof cell.value === 'string' && cell.value.includes('%')) {
                    cell.alignment = { horizontal: 'right' };
                }
            });
        });

        worksheet.columns.forEach(column => {
            column.width = 20;
        });

 
        workbook.xlsx.writeBuffer().then(function (buffer) {
            const blob = new Blob([buffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
            saveAs(blob, 'MargendeContribucion.xlsx');
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        const unegocioSelect = document.getElementById('unegocio');
        const ccostoSelect = document.getElementById('ccosto');
        const tipologiaSelect = document.getElementById('tipologia');

        unegocioSelect.addEventListener('change', filterTable);
        ccostoSelect.addEventListener('change', filterTable);
        tipologiaSelect.addEventListener('change', filterTable);
    });

    function filterTable() {
        const unegocioValue = document.getElementById('unegocio').value;
        const ccostoValue = document.getElementById('ccosto').value;
        const tipologiaValue = document.getElementById('tipologia').value;

        const table = document.getElementById('facturasTable');
        const rows = table.getElementsByTagName('tbody')[0].getElementsByTagName('tr');

        let totalMontoPresupuesto = 0;
        let totalCostosPresupuesto = 0;
        let totalMargenPresupuesto = 0;
        let totalIngresosRealForecast = 0;
        let totalCostosRealForecast = 0;
        let totalMargenRealForecast = 0;
      
        let contador = 0;

        for (let i = 0; i < rows.length; i++) {
            const row = rows[i];
            const isHeaderRow = row.classList.contains('header-row');
            const isTotalRow = row.classList.contains('font-bold');

           if (isHeaderRow || isTotalRow) {
            row.style.display = '';
            continue;
           }

            const unegocioCell = row.getElementsByTagName('td')[2].innerText;
            const ccostoCell = row.getElementsByTagName('td')[3].innerText;
            const tipologiaCell = row.getElementsByTagName('td')[4].innerText;

            const unegocioMatch = unegocioValue === "" || unegocioCell === unegocioValue;
            const ccostoMatch = ccostoValue === "" || ccostoCell === ccostoValue;
            const tipologiaMatch = tipologiaValue === "" || tipologiaCell === tipologiaValue;

            if (unegocioMatch && ccostoMatch && tipologiaMatch) {
                row.style.display = '';

                const montoPresupuesto = parseFloat(row.getElementsByTagName('td')[5].innerText.replace(/\./g, '')) || 0;
                const costosPresupuesto = parseFloat(row.getElementsByTagName('td')[6].innerText.replace(/\./g, '')) || 0;
                const margenPresupuesto = parseFloat(row.getElementsByTagName('td')[7].innerText.replace(/\./g, '')) || 0;
                const ingresosRealForecast = parseFloat(row.getElementsByTagName('td')[9].innerText.replace(/\./g, '')) || 0;
                const costosRealForecast = parseFloat(row.getElementsByTagName('td')[10].innerText.replace(/\./g, '')) || 0;
                const margenRealForecast = parseFloat(row.getElementsByTagName('td')[11].innerText.replace(/\./g, '')) || 0;

                

                totalMontoPresupuesto += montoPresupuesto;
                totalCostosPresupuesto += costosPresupuesto;
                totalMargenPresupuesto += margenPresupuesto;
                totalIngresosRealForecast += ingresosRealForecast;
                totalCostosRealForecast += costosRealForecast;
                totalMargenRealForecast += margenRealForecast;
               
                contador++;
               
            } else {
                row.style.display = 'none';
            }
        }

        // Llamar a updateTotals con los nuevos valores
        updateTotals(
            totalMontoPresupuesto,
            totalCostosPresupuesto,
            totalMargenPresupuesto,
            totalIngresosRealForecast,
            totalCostosRealForecast,
            totalMargenRealForecast,
          
            contador
        );
    }

        function updateTotals(
        totalMontoPresupuesto,
        totalCostosPresupuesto,
        totalMargenPresupuesto,
        totalIngresosRealForecast,
        totalCostosRealForecast,
        totalMargenRealForecast,
        contador
    ) {
        const table = document.getElementById('facturasTable');
        const totalRow = table.querySelector('.bg-gray-100');
        const promedioRow = table.querySelector('.bg-green-100');

        // Calcular porcentajes
        const porcentajeMargenPresupuesto = totalMontoPresupuesto !== 0 ?
            (totalMargenPresupuesto / totalMontoPresupuesto) * 100 : 0;

        const porcentajeMargenRealForecast = totalIngresosRealForecast !== 0 ?
            (totalMargenRealForecast / totalIngresosRealForecast) * 100 : 0;

        // Actualizar totales
        totalRow.getElementsByTagName('td')[5].innerText = formatNumber(totalMontoPresupuesto);
        totalRow.getElementsByTagName('td')[6].innerText = formatNumber(totalCostosPresupuesto);
        totalRow.getElementsByTagName('td')[7].innerText = formatNumber(totalMargenPresupuesto);
        totalRow.getElementsByTagName('td')[8].innerHTML =
            `<strong>${porcentajeMargenPresupuesto === 0 ? '' : formatNumber(porcentajeMargenPresupuesto) + '%'}</strong>`;
        totalRow.getElementsByTagName('td')[9].innerText = formatNumber(totalIngresosRealForecast);
        totalRow.getElementsByTagName('td')[10].innerText = formatNumber(totalCostosRealForecast);
        totalRow.getElementsByTagName('td')[11].innerText = formatNumber(totalMargenRealForecast);
        totalRow.getElementsByTagName('td')[12].innerHTML =
            `<strong>${porcentajeMargenRealForecast === 0 ? '' : formatNumber(porcentajeMargenRealForecast) + '%'}</strong>`;

        // Calcular promedios
        const promedioMontoPresupuesto = contador > 0 ? totalMontoPresupuesto / contador : 0;
        const promedioCostosPresupuesto = contador > 0 ? totalCostosPresupuesto / contador : 0;
        const promedioMargenPresupuesto = contador > 0 ? totalMargenPresupuesto / contador : 0;
        const promedioIngresosRealForecast = contador > 0 ? totalIngresosRealForecast / contador : 0;
        const promedioCostosRealForecast = contador > 0 ? totalCostosRealForecast / contador : 0;
        const promedioMargenRealForecast = contador > 0 ? totalMargenRealForecast / contador : 0;

        // Calcular porcentajes promedios
        const porcentajeMargenPresupuestoPromedio = promedioMontoPresupuesto !== 0 ?
            (promedioMargenPresupuesto / promedioMontoPresupuesto) * 100 : 0;

        const porcentajeMargenRealForecastPromedio = promedioIngresosRealForecast !== 0 ?
            (promedioMargenRealForecast / promedioIngresosRealForecast) * 100 : 0;

        // Actualizar promedios
        promedioRow.getElementsByTagName('td')[5].innerText = formatNumber(promedioMontoPresupuesto);
        promedioRow.getElementsByTagName('td')[6].innerText = formatNumber(promedioCostosPresupuesto);
        promedioRow.getElementsByTagName('td')[7].innerText = formatNumber(promedioMargenPresupuesto);
        promedioRow.getElementsByTagName('td')[8].innerHTML =
            `<strong>${porcentajeMargenPresupuestoPromedio === 0 ? '' : formatNumber(porcentajeMargenPresupuestoPromedio) + '%'}</strong>`;
        promedioRow.getElementsByTagName('td')[9].innerText = formatNumber(promedioIngresosRealForecast);
        promedioRow.getElementsByTagName('td')[10].innerText = formatNumber(promedioCostosRealForecast);
        promedioRow.getElementsByTagName('td')[11].innerText = formatNumber(promedioMargenRealForecast);
        promedioRow.getElementsByTagName('td')[12].innerHTML =
            `<strong>${porcentajeMargenRealForecastPromedio === 0 ? '' : formatNumber(porcentajeMargenRealForecastPromedio) + '%'}</strong>`;
    }
    function formatNumber(number) {
        return number.toLocaleString('de-DE', { maximumFractionDigits: 0 });
    }
    document.getElementById('clearFilters').addEventListener('click', function () {
        location.reload();
    });
</script>