
@{
	ViewData["Title"] = "Costos del Proyecto";
}



@{
	int? idproyecto = Context.Session.GetInt32("numproyecto");
	int? idusuario = Context.Session.GetInt32("id");
	int idproyectos = 0;
	decimal totalsocios = 0;
	decimal totalstaff = 0;


	int idcuentasocio = ViewBag.Idcuentasocio;
	decimal costohhscio = ViewBag.costohhsocio;

	string? cuentasocio = ViewBag.cuentasocio;
	int idcuentastaff = ViewBag.Idcuentastaff;
	string? cuentastaff = ViewBag.cuentastaff;
	decimal costohhstaff = ViewBag.costohhstaff;
	decimal totalsociosforecast = 0;
	decimal totalstaffforecast = 0;

}

<div class="max-w-[1800px] mx-auto p-12 bg-gray-50 rounded-xl shadow-xl">


	<!-- 🔶 PESTAÑAS TIPO NAVEGADOR -->
	@foreach (var proyecto in ViewBag.Proyecto)
	{
		idproyectos = proyecto.Id;
		<div class="flex gap-2 mb-6">
			<a href="@Url.Action("ForecastIngreso", "EjecucionProyecto", new { id = idproyectos })"
			   class="px-5 py-2 rounded-t-lg border border-b-0 transition-all
						@(ViewContext.RouteData.Values["action"]?.ToString() == "ForecastIngreso"
																									  	 ? "bg-white border-orange-500 text-orange-500 font-semibold"
																							 	 : "bg-gray-200 text-gray-600 hover:bg-orange-500 hover:text-white")">
																																											 Ingresos del Proyecto
																																										</a>
																																										<a href="#"
																																										   class="px-5 py-2 rounded-t-lg border border-b-0 transition-all

										             @(ViewContext.RouteData.Values["action"]?.ToString() == "EgresosProyectos"
																							 	 ? "bg-white border-orange-500 text-orange-500 font-semibold"
																					 	 : "bg-gray-200 text-gray-600 hover:bg-orange-500 hover:text-white")">
																																									 Costos del Proyecto
																																								</a>
																																								<a href="@Url.Action("FlujoCajaProyecto", "EjecucionProyecto", new { id = idproyectos })"
																																								   class="px-5 py-2 rounded-t-lg border border-b-0 transition-all

									             @(ViewContext.RouteData.Values["action"]?.ToString() == "FlujoCajaProyecto"
																							 	 ? "bg-white border-orange-500 text-orange-500 font-semibold"
																					 	 : "bg-gray-200 text-gray-600 hover:bg-orange-500 hover:text-white")">
																																									Flujo de Caja
																																								</a>
																																								<a href="@Url.Action("SeleccionarProyecto", "EjecucionProyecto", new { statusproyecto = 2 })"
																																								   class="px-5 py-2 rounded-t-lg border border-b-0 transition-all
									             @(ViewContext.RouteData.Values["action"]?.ToString() == "SeleccionarProyecto"
																							 	 ? "bg-white border-orange-500 text-orange-500 font-semibold"
																					 	 : "bg-gray-200 text-gray-600 hover:bg-orange-500 hover:text-white")">
			Seleccionar Proyecto
		</a>
	</div>
		}

	<!-- 🔶 INFORMACIÓN GENERAL -->
	<div class="bg-white p-6 rounded-xl border border-gray-300 mb-8">
		<h2 class="text-xl font-bold text-orange-500 mb-4">Información General del Proyecto</h2>
		<div class="overflow-x-auto">
			@foreach (var proyecto in ViewBag.Proyecto)
			{
				<table class="min-w-full text-sm border-collapse">
					<thead class="bg-gray-300 text-black">
						<tr>
							<th class="p-2 border">Proyecto</th>
							<th class="p-2 border">Cliente</th>
							<th class="p-2 border">Moneda</th>
							@if (proyecto.MontoOrigenExtranjero > 0)
							{
								<th class="p-2 border ">Monto Moneda Origen</th>
							}
							<th class="p-2 border">Monto CLP</th>

							<th class="p-2 border">Centro Costo</th>
						</tr>
					</thead>
					<tbody>

						<tr class="bg-white hover:bg-gray-50">
							<td class="p-2 border text-center">@proyecto.numproyecto - @proyecto.NombreProyecto</td>
							<td class="p-2 border text-center">@proyecto.NombreCliente</td>
							
							<td class="p-2 border text-center">@proyecto.MONEDA</td>
							@if (proyecto.MontoOrigenExtranjero > 0)
							{
								<td class="p-2 border  text-center">@String.Format("{0:N0}", @proyecto.MontoOrigenExtranjero)</td>
							}
							<td class="p-2 border text-right">@String.Format("{0:N0}", @proyecto.MONTO)</td>
							
							<td class="p-2 border text-center">@proyecto.Codigo</td>

						</tr>

					</tbody>
				</table>
			}
		</div>
	</div>


	<div class="flex gap-6">

		<!-- 🔸 SIDEBAR -->
		<aside class="w-64 sticky top-20 self-start bg-white border border-gray-200 p-4 rounded-xl shadow-md">
			<nav class="space-y-2 text-sm">
				<button data-section="general" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">📋 Resumen General del Proyecto</button>
				@*<button data-section="ingresos" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">💰 Ingresos</button>*@
				<button data-section="hh" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">🔧 HH del Proyecto</button>
				<button data-section="consultores" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">👨‍💼 Consultores</button>
				<button data-section="servicios" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">🛠 Servicios</button>
				<button data-section="gastos" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">💸 Gastos</button>
				@*<button data-section="flujo" class="w-full text-left px-4 py-2 rounded-lg hover:bg-orange-500 hover:text-white text-gray-700 font-medium transition-all">🔁 Flujo de Caja</button>*@
			</nav>
		</aside>

		<!-- 🔸 SECCIONES -->
		<main class="flex-1 space-y-8">

			<!--general-->
			<div id="section-general" class="seccion ">

				
				<h3 class="text-lg font-bold text-orange-500 mb-2">Resumen Costos del Proyecto</h3>
				<div class="p-4 bg-gray-50 rounded-b">
					<div class="overflow-x-auto">
						<table class="min-w-full text-xs border-collapse">
							<thead>
								<tr class="bg-orange-100 text-black">

									<th class="p-2 border border-gray-300 text-left">Tipo</th>
									<th class="p-1 border border-gray-300 text-left">IdCuenta</th>
									<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
									<th class="p-2 border border-gray-300 text-left">Total Proyectado</th>
									<th class="p-2 border border-gray-300 text-left">Total Real</th>
									<th class="p-2 border border-gray-300 text-left">Total Forecast</th>


								</tr>
							</thead>

							<tbody id="tabla-dinamica-body">
							</tbody>
						</table>
						<div id="mensaje-costos" class="text-left p-3 text-gray-600">Cargando...</div>

						<div class="p-4 bg-gray-50 rounded-b">
							<h2 class="text-center text-lg font-semibold text-gray-700 mb-4">Resumen Forecast Proveedores del proyecto</h2>
							<div class="overflow-x-auto">
								<table id="tablaforecastproveedor" class="min-w-full text-xs border-collapse border border-gray-300">
									<thead>
										<tr class="bg-green-100 text-black">
											<th class="p-2 border border-gray-300 text-left min-w-[150px]">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left min-w-[100px]">Cuenta</th>
											<th class="p-2 border border-gray-300 text-left min-w-[150px]">Nombre</th>
											<th class="p-2 border border-gray-300 text-center min-w-[150px]">fecha</th>

										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
							</div>
						</div>
						<script>

							async function cargarDatosCosto(idProyecto) {
								const mensajeCargando = document.getElementById("mensaje-costos");
								const tbody = document.getElementById("tabla-dinamica-body");
							  try {
								const response = await fetch(`/EjecucionProyecto/ObtenerDatosResumen?idProyecto=${idProyecto}`);
								const data = await response.json();

								function formatearNumero(numero) {
								  return numero ? numero.toLocaleString('es-CL') : "";
								}

								function crearFila(tipo, idCuenta, cuenta, proyectado, real, forecast) {
								  return `
									<tr>
									  <td class="p-2 border border-gray-300 text-left">${tipo}</td>
									  <td class="p-2 border border-gray-300 text-left">${idCuenta}</td>
									  <td class="p-2 border border-gray-300 text-left">${cuenta}</td>
									  <td class="p-2 border border-gray-300 text-right">${formatearNumero(proyectado)}</td>
									  <td class="p-2 border border-gray-300 text-right">${formatearNumero(real)}</td>
									  <td class="p-2 border border-gray-300 text-right">${formatearNumero(forecast)}</td>
									</tr>
								  `;
								}
								mensajeCargando.classList.remove("hidden");
								tbody.innerHTML = "";


								let totalProyectado = 0;
								let totalReal = 0;
								let totalForecast = 0;


								const fijo1Proy = data.HHSociosProyectadas, fijo1Real = data.HHSociosReales, fijo1Forecast = data.HHsociosForecast;
								tbody.innerHTML += crearFila("HH Socios", "5101004", "Costo Coonsultor_Socios", fijo1Proy, fijo1Real, fijo1Forecast);
								totalProyectado += fijo1Proy;
								totalReal += fijo1Real;
								totalForecast += fijo1Forecast;

								const fijo2Proy = data.HHStaffProyectadas, fijo2Real = data.HHStaffReales, fijo2Forecast = data.HHStaffForecast;
								tbody.innerHTML += crearFila("HH Staff", "5101005", "Costo Consultor_Staff", fijo2Proy, fijo2Real, fijo2Forecast);
								totalProyectado += fijo2Proy;
								totalReal += fijo2Real;
								totalForecast += fijo2Forecast;


								data.ServiciosProyectos.forEach(servicio => {
								  const real = data.ServiciosTotalesPagados[servicio.IDSERVICIO] || 0;
								  const forecast = data.ServiciosTotalesForecast[servicio.IDSERVICIO] || 0;
								  tbody.innerHTML += crearFila(servicio.NOMBRESERVICIO, servicio.IDCUENTA, servicio.CUENTA, servicio.MONTO, real, forecast);

								  totalProyectado += servicio.MONTO || 0;
								  totalReal += real;
								  totalForecast += forecast;
								});


								data.GastosProyectos.forEach(gasto => {
								  const real = data.GastosTotalesPagados[gasto.IDGASTOS] || 0;
								  const forecast = data.GastosTotalesForecast[gasto.IDGASTOS] || 0;
								  tbody.innerHTML += crearFila(gasto.NOMBREGASTO, gasto.IDCUENTA, gasto.CUENTA, gasto.MONTO, real, forecast);

								  totalProyectado += gasto.MONTO || 0;
								  totalReal += real;
								  totalForecast += forecast;
								});

								tbody.innerHTML += `
								  <tr class="font-bold bg-gray-200">
									<td class="p-2 border border-gray-300 text-left" colspan="3">Totales</td>
									<td class="p-2 border border-gray-300 text-right">${formatearNumero(totalProyectado)}</td>
									<td class="p-2 border border-gray-300 text-right">${formatearNumero(totalReal)}</td>
									<td class="p-2 border border-gray-300 text-right">${formatearNumero(totalForecast)}</td>
								  </tr>
								`;

							  } catch (error) {
								console.error("Error al cargar datos:", error);
								alert("Hubo un problema al cargar los datos del proyecto.");
							  }
								finally {
									mensajeCargando.classList.add("hidden");
								}
							}




							$(document).ready(function () {

								var idproyecto = '@idproyectos';


								$.ajax({
									url: '/EjecucionProyecto/RecuperarForecastProveedores',
									type: 'GET',
									data: { idproyecto: idproyecto },
									success: function (data) {
										renderizarTabla(data);
									},
									error: function (err) {
										console.error('Error al recuperar los datos:', err);
									}
								});

								function renderizarTabla(data) {
									const tabla = $('#tablaforecastproveedor');
									const tablaBody = tabla.find('tbody');
									const tablaHead = tabla.find('thead');


									tablaBody.empty();
									tablaHead.empty();


									const mesesUnicos = [...new Set(data.map(item => `${item.mes.toString().padStart(2, '0')}-${item.anio}`))]
										.sort((a, b) => {
											const [mesA, anioA] = a.split('-').map(Number);
											const [mesB, anioB] = b.split('-').map(Number);
											const fechaA = new Date(anioA, mesA - 1);
											const fechaB = new Date(anioB, mesB - 1);
											return fechaA - fechaB;
										});


									let encabezado = `
														<tr class="bg-green-100 text-black">
														<th class="p-2 border border-gray-300 text-left min-w-[150px]">Proveedor</th>
														<th class="p-2 border border-gray-300 text-left min-w-[100px]">Cuenta</th>
														<th class="p-2 border border-gray-300 text-left min-w-[150px]">Nombre</th>`;
									mesesUnicos.forEach(mes => {
										encabezado += `<th class="p-2 border border-gray-300 text-center">${mes}</th>`;
									});
									encabezado += `<th class="p-2 border border-gray-300 text-right">Total Proveedores</th>`;
									encabezado += `</tr>`;
									tablaHead.append(encabezado);


									const totalesPorMes = new Array(mesesUnicos.length).fill(0);
									let totalGeneral = 0;


									const agrupados = agruparPor(data, ['nombreproveedor', 'cuenta', 'nombre']);

									for (let [key, registros] of Object.entries(agrupados)) {
										const [proveedor, cuenta, nombre] = key.split('|');


										let fila = `
														<tr>
															<td class="p-2 border border-gray-300 text-left">${proveedor}</td>
															<td class="p-2 border border-gray-300 text-left">${cuenta}</td>
															<td class="p-2 border border-gray-300 text-left">${nombre}</td>`;


										let totalFila = 0;
										mesesUnicos.forEach((mes, index) => {
											const registroMes = registros.find(r => `${r.mes.toString().padStart(2, '0')}-${r.anio}` === mes);
											const monto = registroMes ? registroMes.totalforecastproveedor : null;

											if (monto === null || monto === 0) {
												fila += `<td class="p-2 border border-gray-300 text-right"></td>`;
											} else {
												totalFila += monto;
												totalesPorMes[index] += monto;
												fila += `<td class="p-2 border border-gray-300 text-right">${formatMoneda(monto)}</td>`;
											}
										});


										fila += `<td class="p-2 border border-gray-300 text-right font-bold">${formatMoneda(totalFila)}</td>`;
										fila += `</tr>`;
										tablaBody.append(fila);
										totalGeneral += totalFila;
									}


									let filaTotales = `
														<tr class="bg-green-100">
														<td class="p-2 border border-gray-300 text-left font-bold" colspan="3">Totales</td>`;
									totalesPorMes.forEach(totalMes => {
										filaTotales += `<td class="p-2 border border-gray-300 text-right font-bold">${formatMoneda(totalMes)}</td>`;
									});
									filaTotales += `<td class="p-2 border border-gray-300 text-right font-bold">${formatMoneda(totalGeneral)}</td>`;
									filaTotales += `</tr>`;


									tablaBody.append(filaTotales);
								}


								function agruparPor(array, keys) {
									return array.reduce((result, item) => {
										const groupKey = keys.map(key => item[key]).join('|');
										if (!result[groupKey]) {
											result[groupKey] = [];
										}
										result[groupKey].push(item);
										return result;
									}, {});
								}


								function formatMoneda(valor) {
									return valor.toLocaleString('de-DE', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
								}
							});

						</script>








					</div>
				</div>


			</div>

			<!-- HH (accordion) -->

			<form asp-action="RegistrarHH" asp-controller="EjecucionProyecto" method="post">
				<div id="section-hh" class="seccion hidden">
					<h3 class="text-lg font-bold text-orange-500 mb-2">Horas Hombre</h3>
					@if (TempData["ErrorMessage"] != null)
					{
						<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["ErrorMessage"]
						</div>
					}
					@if (TempData["SuccessMessage"] != null)
					{
						<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["SuccessMessage"]
						</div>
					}
					@if (TempData["ErrorMessage"] != null || TempData["SuccessMessage"] != null)
					{
						<script>
							setTimeout(() => {
								document.querySelectorAll('[role="alert"]').forEach(alert => {
									alert.style.transition = "opacity 0.5s ease-out";
									alert.style.opacity = "0";
									setTimeout(() => alert.remove(), 500);
								});
							}, 5000);
						</script>
					}

					<input type="hidden" name="idproyecto" value="@idproyecto" />
					<div class="flex justify-center mb-4">
						<button type="submit" class="bg-black text-white px-4 py-2 cursor-pointer rounded-t hover:bg-gray-800 transition">
							
							Guardar Registros HH
						</button>
					</div>

					<details class="border rounded">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">👨‍💼 HH Socios</summary>
						<div class="p-4 bg-gray-50 rounded-b">
							<div class="overflow-x-auto">
								<table class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">

											<th class="p-2 border border-gray-300 text-left">Fecha</th>
											<th class="p-1 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">IDCUENTA</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Horas Efectivas</th>
											<th class="p-2 border border-gray-300 text-left">Costo Unitario</th>
											<th class="p-2 border border-gray-300 text-left">SubTotal</th>
											<th class="p-2 border border-gray-300 text-left">Reajuste</th>
											<th class="p-2 border border-gray-300 text-left">Total</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>


										</tr>
									</thead>
									<tbody>
										@if (ViewBag.GastosHH != null)
										{

											@for (int i = 0; i < ViewBag.GastosHH.Count; i++)
											{

												var gasto = ViewBag.GastosHH[i];
												@if (gasto.tiporecurso == "Socio" && gasto.estado != 2)
												{


													<tr>
														<input type="hidden" name="Tiporecurso" value="@gasto.tiporecurso" />
														<input type="hidden" name="Mes" value="@gasto.mes" />
														<input type="hidden" name="Anio" value="@gasto.anio" />

														<input type="hidden" name="HHtotales" value="@gasto.totalhh" />

														<td class="p-2 border border-gray-300 text-left">@gasto.mes/@gasto.anio</td>
														<input type="hidden" name="IdGastoHH" value="@gasto.idgastohh" />
														@if (gasto.fechapago != null)
														{
															<td class="p-1 border border-gray-300 text-right">
																<input type="date" name="Fechapago" value="@gasto.fechapago?.ToString("yyyy-MM-dd")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>

														}

														else
														{
															<td class="p-1 border border-gray-300 text-right">
																<input type="date" name="Fechapago" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>


														}

														<td class="p-2 border border-gray-300 text-right">@gasto.idcuentasocio</td>
														<td class="p-1">@gasto.cuentasocio</td>

														<td id="hhsocio" class="p-1 border border-gray-300 text-right w-20">@String.Format("{0:N2}", gasto.totalhh)</td>


														@if (idusuario == 88 || idusuario == 96)
														{
															<td class="p-1 border border-gray-300 text-right w-25"><input type="text" name="CostoUnitario" value="@String.Format("{0:N0}", gasto.costounitariomes ?? "")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
															<td class="p-1 border border-gray-300 text-right w-25"><input type="text" name="Subtotal" value="@String.Format("{0:N0}", gasto.costorecursosocio ?? "")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}


														else
														{
															<input type="hidden" name="Subtotal" value="@gasto.costorecursosocio" />
															<input type="hidden" name="CostoUnitario" value="@gasto.costounitariomes" />
															<td class="p-1 border border-gray-300 text-right w-25">@String.Format("{0:N0}", gasto.costounitariomes)</td>
															<td class="p-1 border border-gray-300 text-right w-25">@String.Format("{0:N0}", gasto.costorecursosocio)</td>
														}


														@if (gasto.reajuste != null)
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", gasto.reajuste ?? "")" name="Reajuste" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}

														else
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" name="Reajuste" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														@if (gasto.monto != null)
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" id="montosocio" value="@String.Format("{0:N0}", gasto.monto ?? "")" readonly name="Monto" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														else
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" id="montosocio" readonly name="Monto" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														@if (gasto.observacion != "")
														{

															<td class="p-2 border border-gray-300 text-left">
																<textarea rows="2" name="Observacion" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">@gasto.observacion</textarea>
															</td>

														}
														else
														{
															<td class="p-2 border border-gray-300 text-left">
																<textarea rows="2" name="Observacion" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
															</td>
														}
														@if (gasto.estado == 1)
														{
															totalsocios += gasto.monto ?? 0;
														}



													</tr>
												}
											}

										}


									</tbody>
								</table>
							</div>
						</div>
						<div class="p-4 bg-gray-50 rounded-b">
							<h2 class="text-center text-lg font-semibold text-gray-700 mb-4">👨‍💼 Forecast Horas Hombre Socios</h2>
							<div class="overflow-x-auto">
								<table id="tablahhSocios" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-green-200 text-black">
											<th class="p-2 border border-gray-300 text-left">Fecha Pago</th>
											<th class="p-2 border border-gray-300 text-center">HH</th>
											<th class="p-2 border border-gray-300 text-left">Valor HH/Proyecto</th>
											<th class="p-2 border border-gray-300 text-left">Total</th>



											<th class="p-2 border border-gray-300 text-left">Glosa</th>

											<th class="p-2 border border-gray-300 text-left">IDCUENTA</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Acción</th>



										</tr>
									</thead>
									<tbody>
										@if (ViewBag.GastosHH != null)
										{
											@foreach (var gs in ViewBag.GastosHH)
											{
												if (gs.estado == 2 && gs.tiporecurso == "Socio")
												{
													<tr>
														<td class="p-2 border border-gray-300 text-left"><input type="date" value="@gs.fechapago.ToString("yyyy-MM-dd")" name="fechahhsocio" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
														<td class="hhsocio p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", @gs.totalhh)" name="hhsocio" class=" form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														@if (idusuario == 88 || idusuario == 96)
														{
															<td class="p-2 border border-gray-300 text-right costohhsocio">
																<input type="text" value="@String.Format("{0:N0}", gs.costounitariomes ?? "")" name="costohhsocio" class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>
														}
														else
														{
															<td class="p-2 border border-gray-300 text-right costohhsocio">
																<input value="@String.Format("{0:N0}", gs.costounitariomes)" type="text" name="costohhsocio" readonly class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>
														}

														<td class="p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", gs.monto ?? "")" readonly name="montohhsocio" class="montohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>



														<td class="p-2 border border-gray-300 text-left">
															<textarea rows="2" name="observacionhhsocio" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">@gs.observacion</textarea>
														</td>
														<td class="p-2 border border-gray-300 text-right ">@gs.idcuentasocio</td>
														<td class="p-2 border border-gray-300 text-left ">@gs.cuentasocio</td>

														<td style="display:none;">
															<input type="hidden" name="EliminarhhSocio" class="EliminarhhSocio" value="false" />
														</td>
														<td class="p-2 border border-gray-300 text-left">
															<button type="button" class="bg-red-500 text-white font-bold py-2 px-4 rounded hover:bg-red-700" onclick="limpiarhhSocio(this)">Eliminar</button>
														</td>

													</tr>
													totalsociosforecast += gs.monto;
													<input type="hidden" name="Idhhsocio" value="@gs.idgastohh" />
													<input type="hidden" name="estadohhsocio" value="@gs.estado" />
													<input type="hidden" name="recursohhsocio" value="@gs.tiporecurso" />
												}

											}
										}
										<tr>
											<td class="p-2 border border-gray-300 text-left"><input type="date" name="fechahhsocio" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
											<td class="hhsocio p-2 border border-gray-300 text-right"><input type="text" name="hhsocio" class="  form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
											@if (idusuario == 88 || idusuario == 96)
											{
												<td class="p-2 border border-gray-300 text-right costohhsocio">
													<input value="@String.Format("{0:N0}", costohhscio)" type="text" name="costohhsocio" class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
												</td>
											}
											else
											{
												<td class="p-2 border border-gray-300 text-right costohhsocio">
													<input value="@String.Format("{0:N0}", costohhscio)" type="text" name="costohhsocio" readonly class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
												</td>
											}



											<td class="p-2 border border-gray-300 text-right"><input type="text" id="montohhsocio" readonly name="montohhsocio" class="montohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>



											<td class="p-2 border border-gray-300 text-left">
												<textarea rows="2" name="observacionhhsocio" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
											</td>
											<td class="p-2 border border-gray-300 text-right ">@idcuentasocio</td>
											<td class="p-2 border border-gray-300 text-left ">@cuentasocio</td>
											<td style="display:none;">
												<input type="hidden" name="EliminarhhSocio" class="EliminarhhSocio" value="false" />
											</td>

											<input type="hidden" name="Idhhsocio" value="" />
											<input type="hidden" name="estadohhsocio" value="2" />
											<input type="hidden" name="recursohhsocio" value="Socio" />
										</tr>

									</tbody>
								</table>
								<button id="btnAgregarhhSocio" class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">Agregar otro Forecast hh Socio</button>

							</div>


						</div>
					</details>
					<details class="border mt-4 rounded">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">👨‍💼 HH Staff</summary>
						<div class="p-4 bg-gray-50 rounded-b">
							<div class="overflow-x-auto">
								<table class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">

											<th class="p-2 border border-gray-300 text-left">Fecha</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">IDCUENTA</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Horas Efectivas</th>
											<th class="p-2 border border-gray-300 text-left">Costo Unitario</th>
											<th class="p-2 border border-gray-300 text-left">SubTotal</th>
											<th class="p-2 border border-gray-300 text-left">Reajuste</th>
											<th class="p-2 border border-gray-300 text-left">Total</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>


										</tr>
									</thead>
									<tbody>
										@if (ViewBag.GastosHH != null)
										{

											@for (int i = 0; i < ViewBag.GastosHH.Count; i++)
											{

												var gasto = ViewBag.GastosHH[i];
												@if (gasto.tiporecurso == "Staff" && gasto.estado != 2)
												{


													<tr>
														<input type="hidden" name="Tiporecursostaff" value="@gasto.tiporecurso" />
														<input type="hidden" name="Messtaff" value="@gasto.mes" />
														<input type="hidden" name="Aniostaff" value="@gasto.anio" />

														<input type="hidden" name="HHtotalesstaff" value="@gasto.totalhh" />

														<td class="p-2 border border-gray-300 text-left">@gasto.mes/@gasto.anio</td>
														<input type="hidden" name="IdGastoHHstaff" value="@gasto.idgastohh" />
														@if (gasto.fechapago != null)
														{
															<td class="p-1 border border-gray-300 text-right">
																<input type="date" name="Fechapagostaff" value="@gasto.fechapago?.ToString("yyyy-MM-dd")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>

														}

														else
														{
															<td class="p-1 border border-gray-300 text-right">
																<input type="date" name="Fechapagostaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>


														}

														<td class="p-2 border border-gray-300 text-right">@gasto.idcuentastaff</td>
														<td class="p-1">@gasto.cuentastaff</td>

														<td id="hhstaff" class="p-1 border border-gray-300 text-right w-20">@String.Format("{0:N2}", gasto.totalhh)</td>
														@if (idusuario == 88 || idusuario == 96)
														{
															<td class="p-1 border border-gray-300 text-right w-25"><input type="text" name="CostoUnitarioStaff" value="@String.Format("{0:N0}", gasto.costounitariomes ?? "")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
															<td class="p-1 border border-gray-300 text-right w-25"><input type="text" name="Subtotalstaff" value="@String.Format("{0:N0}", gasto.costorecurstaff ?? "")" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}


														else
														{
															<input type="hidden" name="Subtotalstaff" value="@gasto.costorecurstaff" />
															<input type="hidden" name="CostoUnitarioStaff" value="@gasto.costounitariomes" />
															<td class="p-1 border border-gray-300 text-right w-25">@String.Format("{0:N0}", gasto.costounitariomes)</td>
															<td class="p-1 border border-gray-300 text-right w-25">@String.Format("{0:N0}", gasto.costorecurstaff)</td>
														}

														@if (gasto.reajuste != null)
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", gasto.reajuste ?? "")" name="Reajustestaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}

														else
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" name="Reajustestaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														@if (gasto.monto != null)
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" id="montostaff" value="@String.Format("{0:N0}", gasto.monto ?? "")" readonly name="Montostaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														else
														{
															<td class="p-2 border border-gray-300 text-right"><input type="text" id="montostaff" readonly name="Montostaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
														}
														@if (gasto.observacion != "")
														{

															<td class="p-2 border border-gray-300 text-left">
																<textarea rows="2" name="Observacionstaff" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">@gasto.observacion</textarea>
															</td>

														}
														else
														{
															<td class="p-2 border border-gray-300 text-left">
																<textarea rows="2" name="Observacionstaff" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
															</td>
														}
														@if (gasto.estado == 1)
														{
															totalstaff += gasto.monto ?? 0;
														}




													</tr>
												}
											}

										}


									</tbody>
								</table>
							</div>
						</div>
						<div class="p-4 bg-gray-50 rounded-b">
							<h2 class="text-center text-lg font-semibold text-gray-700 mb-4">👨‍💼 Forecast Horas Hombre Staff</h2>
							<div class="overflow-x-auto">
								<table id="tablahhStaff" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-green-200 text-black">
											<th class="p-2 border border-gray-300 text-left">Fecha Pago</th>
											<th class="p-2 border border-gray-300 text-center">HH</th>
											<th class="p-2 border border-gray-300 text-left">Valor HH/Proyecto</th>
											<th class="p-2 border border-gray-300 text-left">Total</th>



											<th class="p-2 border border-gray-300 text-left">Glosa</th>

											<th class="p-2 border border-gray-300 text-left">IDCUENTA</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Acción</th>



										</tr>
									</thead>
									<tbody>
										@if (ViewBag.GastosHH != null)
										{
											@foreach (var gs in ViewBag.GastosHH)
											{
												if (gs.estado == 2 && gs.tiporecurso == "Staff")
												{
													<tr>
														<td class="p-2 border border-gray-300 text-left"><input type="date" value="@gs.fechapago.ToString("yyyy-MM-dd")" name="fechahhstaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
														<td class="hhstaff p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", @gs.totalhh)" name="hhstaff" class=" form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>

														@if (idusuario == 88 || idusuario == 96)
														{
															<td class="p-2 border border-gray-300 text-right costohhstaff">
																<input type="text" value="@String.Format("{0:N0}", gs.costounitariomes ?? "")" name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>
														}
														else
														{
															<td class="p-2 border border-gray-300 text-right costohhstaff">
																<input type="text" value="@String.Format("{0:N0}", gs.costounitariomes ?? "")" readonly name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
															</td>
														}

														<td class="p-2 border border-gray-300 text-right"><input type="text" value="@String.Format("{0:N0}", gs.monto ?? "")" readonly name="montohhstaff" class="montohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>



														<td class="p-2 border border-gray-300 text-left">
															<textarea rows="2" name="observacionhhstaff" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">@gs.observacion</textarea>
														</td>
														<td class="p-2 border border-gray-300 text-right ">@gs.idcuentastaff</td>
														<td class="p-2 border border-gray-300 text-left ">@gs.cuentastaff</td>

														<td style="display:none;">
															<input type="hidden" name="EliminarhhStaff" class="EliminarhhStaff" value="false" />
														</td>
														<td class="p-2 border border-gray-300 text-left">
															<button type="button" class="bg-red-500 text-white font-bold py-2 px-4 rounded hover:bg-red-700" onclick="limpiarhhStaff(this)">Eliminar</button>
														</td>

													</tr>
													totalstaffforecast += gs.monto;
													<input type="hidden" name="Idhhstaff" value="@gs.idgastohh" />
													<input type="hidden" name="estadohhstaff" value="@gs.estado" />
													<input type="hidden" name="recursohhstaff" value="@gs.tiporecurso" />
												}

											}
										}
										<tr>
											<td class="p-2 border border-gray-300 text-left"><input type="date" name="fechahhstaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
											<td class="hhstaff p-2 border border-gray-300 text-right"><input type="text" name="hhstaff" class="  form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
											@if (idusuario == 88 || idusuario == 96)
											{
												<td class="p-2 border border-gray-300 text-right costohhstaff">
													<input type="text" value="@String.Format("{0:N0}", costohhstaff)" name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
												</td>
											}
											else
											{
												<td class="p-2 border border-gray-300 text-right costohhstaff">
													<input type="text" value="@String.Format("{0:N0}", costohhstaff)" readonly name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
												</td>
											}
											<td class="p-2 border border-gray-300 text-right"><input type="text" id="montohhstaff" readonly name="montohhstaff" class="montohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>



											<td class="p-2 border border-gray-300 text-left">
												<textarea rows="2" name="observacionhhstaff" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
											</td>
											<td class="p-2 border border-gray-300 text-right ">@idcuentastaff</td>
											<td class="p-2 border border-gray-300 text-left ">@cuentastaff</td>
											<td style="display:none;">
												<input type="hidden" name="EliminarhhStaff" class="EliminarhhStaff" value="false" />
											</td>

											<input type="hidden" name="Idhhstaff" value="" />
											<input type="hidden" name="estadohhstaff" value="2" />
											<input type="hidden" name="recursohhstaff" value="Staff" />
										</tr>

									</tbody>
								</table>
								<button id="btnAgregarhhStaff" class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">Agregar otro Forecast hh Staff</button>

							</div>
						</div>
					</details>
					<script>

						function parseCurrency(value) {
							const cleaned = value.replace(/\./g, '').replace(',', '.').replace(/[^\d.-]/g, '');
							const number = parseFloat(cleaned);
							return isNaN(number) ? 0 : number;
						}

						function formatCurrency(event) {
							const input = event.target;
							const rawValue = input.value;


							if (rawValue === '-') return;

							const value = parseCurrency(rawValue);
							const isNegative = value < 0;

							input.value = (isNegative ? '-' : '') + Math.abs(value).toLocaleString('es-CL');
						}



						function updateMontoGeneral(reajusteInput) {
							const row = reajusteInput.closest('tr');
							const name = reajusteInput.name;
							const isStaff = name.includes('Reajustestaff');

							const reajusteValue = parseCurrency(reajusteInput.value);
							const subtotalInputName = isStaff ? 'Subtotalstaff' : 'Subtotal';
							const montoInputName = isStaff ? 'Montostaff' : 'Monto';

							const subtotalInput = row.querySelector(`input[name*="${subtotalInputName}"]`);
							const montoInput = row.querySelector(`input[name*="${montoInputName}"]`);
							if (!subtotalInput || !montoInput) return;

							const subtotalValue = parseCurrency(subtotalInput.value);
							const total = reajusteValue + subtotalValue;

							montoInput.value = total.toLocaleString('es-CL');
						}

						function updateSubtotal(costoUnitarioInput) {
							const row = costoUnitarioInput.closest('tr');
							const name = costoUnitarioInput.name;
							const isStaff = name.includes('CostoUnitarioStaff');

							const hhCell = row.querySelector(`#${isStaff ? 'hhstaff' : 'hhsocio'}`);
							if (!hhCell) return;

							const hh = parseCurrency(hhCell.textContent);
							const costoUnitario = parseCurrency(costoUnitarioInput.value);
							const subtotal = hh * costoUnitario;

							const subtotalInputName = isStaff ? 'Subtotalstaff' : 'Subtotal';
							const subtotalInput = row.querySelector(`input[name="${subtotalInputName}"]`);
							if (subtotalInput) {
								subtotalInput.value = subtotal.toLocaleString('es-CL');
							}


							const reajusteInput = row.querySelector(`input[name*="Reajuste"]`);
							if (reajusteInput) {
								updateMontoGeneral(reajusteInput);
							}
						}
							document.querySelectorAll('input[name*="Reajuste"]').forEach(input => {
							input.addEventListener('input', (e) => {
								formatCurrency(e);
								updateMontoGeneral(input);
							});
						});

						document.querySelectorAll('input[name*="Reajuste"]').forEach(input => {
							input.addEventListener('input', () => {
								updateMontoGeneral(input);
							});
							input.addEventListener('blur', (e) => {
								formatCurrency(e);
							});
						});
						document.querySelectorAll('input[name="CostoUnitario"], input[name="CostoUnitarioStaff"]').forEach(input => {
							input.addEventListener('input', (e) => {
								formatCurrency(e);
								updateSubtotal(input);
							});
						});
						function updateMontoFinalCosto(triggerInput) {
							const row = triggerInput.closest('tr');
							const name = triggerInput.name;
							const isStaff = name.includes('hhstaff') || name.includes('costohhstaff');
							const hhInput = row.querySelector(`input[name="${isStaff ? 'hhstaff' : 'hhsocio'}"]`);
							const costoInput = row.querySelector(`input[name="${isStaff ? 'costohhstaff' : 'costohhsocio'}"]`);
							const montoInput = row.querySelector(`input[name="${isStaff ? 'montohhstaff' : 'montohhsocio'}"]`);
							if (!hhInput || !costoInput || !montoInput) return;
							const hh = parseCurrency(hhInput.value);
							const costo = parseCurrency(costoInput.value);
							montoInput.value = (hh * costo).toLocaleString('es-CL');
						}

						document.querySelectorAll('input[name="costohhstaff"], input[name="costohhsocio"]').forEach(input => {
							input.addEventListener('input', (e) => {
								formatCurrency(e);
								updateMontoFinalCosto(input);
							});
						});

						document.querySelectorAll('input[name="hhstaff"], input[name="hhsocio"]').forEach(input => {
							input.addEventListener('input', (e) => {
								formatCurrency(e);
								updateMontoFinalCosto(input);
							});
						});
						/*agregar socios forecast*/
						$(document).ready(function () {



							$('#btnAgregarhhSocio').on('click', function (e) {
								e.preventDefault();

								var nuevaFila = `
															   <tr>
																	   <td class="p-2 border border-gray-300 text-left"><input type="date" name="fechahhsocio" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
														<td class="hhsocio p-2 border border-gray-300 text-right"><input type="text" name="hhsocio" class="  form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
						@if (idusuario == 88 || idusuario == 96)
						{
																										<td class="p-2 border border-gray-300 text-right costohhsocio">
																											<input value="@String.Format("{0:N0}", costohhscio)" type="text" name="costohhsocio" class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
																										</td>
						}
						else
						{
																										<td class="p-2 border border-gray-300 text-right costohhsocio">
																											<input value="@String.Format("{0:N0}", costohhscio)" type="text" name="costohhsocio" readonly class="costohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
																										</td>
						}



													<td class="p-2 border border-gray-300 text-right"><input type="text" id="montohhsocio" readonly name="montohhsocio" class="montohhsocio form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>



													<td class="p-2 border border-gray-300 text-left">
														<textarea rows="2" name="observacionhhsocio" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
													</td>
													<td class="p-2 border border-gray-300 text-right ">@idcuentasocio</td>
													<td class="p-2 border border-gray-300 text-left ">@cuentasocio</td>
													<td style="display:none;">
														<input type="hidden" name="EliminarhhSocio" class="EliminarhhSocio" value="false" />
													</td>

													<input type="hidden" name="Idhhsocio" value="" />
														 <input type="hidden" name="estadohhsocio" value="2" />
														 <input type="hidden" name="recursohhsocio" value="Socio" />
																</tr>
													`;

								$('#tablahhSocios tbody').append(nuevaFila);
								$(document).on('input', 'input[name="hhsocio"], input[name="costohhsocio"]', function (e) {
									formatCurrency(e);
									updateMontoFinalCosto(this);
								});

								var lastRow = $('#tablahhSocios tbody tr:last');

							});

						});
						//agregar forecast staff
											$(document).ready(function () {



							$('#btnAgregarhhStaff').on('click', function (e) {
								e.preventDefault();

								var nuevaFila = `
															   <tr>
																	 <td class="p-2 border border-gray-300 text-left"><input type="date" name="fechahhstaff" class="form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-30" /></td>
																				<td class="hhstaff p-2 border border-gray-300 text-right"><input type="text" name="hhstaff" class="  form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>
						@if (idusuario == 88 || idusuario == 96)
						{
																									<td class="p-2 border border-gray-300 text-right costohhstaff">
																										<input type="text" value="@String.Format("{0:N0}", costohhstaff)" name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
																									</td>
						}
						else
						{
																									<td class="p-2 border border-gray-300 text-right costohhstaff">
																										<input type="text" value="@String.Format("{0:N0}", costohhstaff)" readonly name="costohhstaff" class="costohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" />
																									</td>
						}
													<td class="p-2 border border-gray-300 text-right"><input type="text" id="montohhstaff" readonly name="montohhstaff" class="montohhstaff form-control text-right px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-25" /></td>




												<td class="p-2 border border-gray-300 text-left">
													<textarea rows="2" name="observacionhhstaff" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea>
												</td>
												<td class="p-2 border border-gray-300 text-right ">@idcuentastaff</td>
												<td class="p-2 border border-gray-300 text-left ">@cuentastaff</td>
												<td style="display:none;">
													<input type="hidden" name="EliminarhhStaff" class="EliminarhhStaff" value="false" />
												</td>

												<input type="hidden" name="Idhhstaff" value="" />
												<input type="hidden" name="estadohhstaff" value="2" />
												<input type="hidden" name="recursohhstaff" value="Staff" />
																</tr>
													`;

								$('#tablahhStaff tbody').append(nuevaFila);
								$(document).on('input', 'input[name="hhstaff"], input[name="costohhstaff"]', function (e) {
									formatCurrency(e);
									updateMontoFinalCosto(this);
								});
								var lastRow = $('#tablahhStaff tbody tr:last');

							});
						});
											/*Eliminar hh Socio*/
						function limpiarhhSocio(button) {

							var fila = button.closest('tr');


							var esEliminado = fila.querySelector('input.EliminarhhSocio');
							if (esEliminado) {
								esEliminado.value = 'true';
							}

							fila.style.display = 'none';


						}

						 /*Eliminar hh Staff*/
						function limpiarhhStaff(button) {

							var fila = button.closest('tr');


							var esEliminado = fila.querySelector('input.EliminarhhStaff');
							if (esEliminado) {
								esEliminado.value = 'true';
							}

							fila.style.display = 'none';


						}
					</script>
				</div>
			</form>
			<!-- Consultores -->
			<div id="section-consultores" class="seccion hidden">
				<form method="post" asp-action="RegistrarConsultores" asp-controller="EjecucionProyecto">
					<input type="hidden" name="idproyecto" value="@idproyecto" />
					@if (TempData["ErrorMessageConsultores"] != null)
					{
						<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["ErrorMessageConsultores"]
						</div>
					}
					@if (TempData["SuccessMessageSconsultores"] != null)
					{
						<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["SuccessMessageSconsultores"]
						</div>
					}
					@if (TempData["ErrorMessageConsultores"] != null || TempData["SuccessMessageSconsultores"] != null)
					{
						<script>
							setTimeout(() => {
								document.querySelectorAll('[role="alert"]').forEach(alert => {
									alert.style.transition = "opacity 0.5s ease-out";
									alert.style.opacity = "0";
									setTimeout(() => alert.remove(), 500);
								});
							}, 5000);
						</script>
					}
					<h3 class="text-lg font-bold text-orange-500 mb-2">👨‍💼 Honorarios Consultores</h3>
					<div class="flex justify-center mb-4">
						<button type="submit" class="bg-black text-white px-4 py-2 cursor-pointer rounded-t hover:bg-gray-800 transition">
							Guardar Consultores
						</button>


					</div>
					<!-- Accordion: Agregar consultor  -->
					<details class="border rounded mb-4">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">➕ Agregar Honorario Consultores Externos</summary>
						<div class="p-4 bg-gray-50 rounded-b">

							<div class="overflow-x-auto">
								<table id="tablaAgregarConsultores" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoServicio</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>

										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="contenedorBotonConsultores"></div>
							</div>
						</div>
					</details>

					<!-- Accordion: Tabla de consultores  -->
					<details open class="border rounded">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">👨‍💼 Consultores</summary>
						<div class="p-4 bg-gray-50 rounded-b">
							<div class="overflow-x-auto">
								<table id="tablaconsultores" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoServicio</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Acción</th>
										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="mensajeConsultores" class="text-left text-gray-500 mt-2"></div>
								<script>
									let listaconsultores = [];
									let listaProveedoresconsultores = [];


									async function cargarListasDeConsultoresYProveedores() {
										try {
											const [consultores, proveedores] = await Promise.all([
												fetch('/EjecucionProyecto/GetServicios').then(res => res.json()),
												fetch('/EjecucionProyecto/GetProveedoresServicios').then(res => res.json())
											]);

											listaconsultores = consultores;
											listaProveedoresconsultores = proveedores;
										} catch (error) {
											console.error("Error al cargar listas de consultores y proveedores:", error);
										}
									}


									async function cargarDatosConsultores(idProyecto, tipo) {
									  try {

										  const tbody = document.querySelector('#tablaconsultores tbody');
												const mensajeDiv = document.getElementById("mensajeConsultores");
												tbody.innerHTML = "";
												mensajeDiv.textContent = "Cargando Consultores...";

											await cargarListasDeConsultoresYProveedores();


											const ConsultoresReales = await fetch(`/EjecucionProyecto/CargarServiciosReales?idproyecto=${idProyecto}&tipo=${tipo}`).then(res => res.json());

											if (ConsultoresReales.length > 0) {
												renderizarTablaConsultores(ConsultoresReales);
												mensajeDiv.textContent = "";
												document.getElementById("tablaconsultores").style.display = "";
											} else {
													mensajeDiv.textContent = "No hay Consultores para este proyecto.";
													document.getElementById("tablaconsultores").style.display = "none";
												}



									  } catch (error) {
										console.error("Error al cargar servicios:", error);
									  }
									}

										   function formatearMiles(valor) {
									  if (!valor) return "";
									  const numero = parseFloat(valor.toString().replace(/\./g, '').replace(',', '.'));
									  if (isNaN(numero)) return "";
									  return numero.toLocaleString("es-CL");
									}
									function renderizarTablaConsultores(data) {
									  const tbody = document.querySelector('#tablaconsultores tbody');
									  tbody.innerHTML = "";

									  data.forEach((item, index) => {
										const row = document.createElement('tr');
										row.classList.add("bg-white", "hover:bg-gray-50");

										// Select para servicio
										const servicioSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="idconsultores">
											${listaconsultores.map(s => `
											  <option value="${s.id}" ${s.id === item.idservicio ? "selected" : ""}>${s.nombre}</option>
											`).join('')}
										  </select>
										`;

										// Select para Proveedor
										const proveedorSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="idproveedorconsultor">
											${listaProveedoresconsultores.map(p => `
											  <option value="${p.id}" ${p.id === item.idproveedor ? "selected" : ""}>${p.nombre}</option>
											`).join('')}
										  </select>
										`;


											const Estadoselect = `
										<select name="estadoconsultor"  class="border border-gray-300 rounded px-2 py-1">
											<option value="Forecast" ${item.estado === "Forecast" ? "selected" : ""}>Forecast</option>
											<option value="Pagada" ${item.estado === "Pagada" ? "selected" : ""}>Pagada</option>
										</select>
										`;

										row.innerHTML = `
										  <td class="p-1 border">${servicioSelect}</td>
										  <td class="p-1 border">${proveedorSelect}</td>
										  <td class="p-1 border"><input type="text" name="montoconsultor" value="${formatearMiles(item.monto)}" class="monto-input min-w-[160px] w-full text-right border rounded px-2 py-1"></td>
										  <td class="p-1 border"><input type="date" name="fechaconsultor" value="${item.fecha.split('T')[0]}" class="w-full border rounded px-2 py-1"></td>
										  <td class="p-1 border">${Estadoselect}</td>
										  <td class="p-1 border"><textarea rows="2" name="observacionconsultor" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">${item.observacion}</textarea></td>
										  <td class="p-1 border"><input type="text" readonly name="cuentaconsultor" value="${item.cuenta}" class="w-full border rounded px-2 py-1"></td>
										  <td class="p-1 border text-center">
											<button type="button" class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600" onclick="limpiarServicioHonorario(this)">🗑️</button>
										  </td>
										  <td style="display:none;">
												<input type="hidden" name="EliminarServicioHonorario" class="EliminarServicioHonorario" value="false" />
											</td>
											  <input type="hidden" name="IdConsultorReal" value="${item.idservicioreal}" />
											<input type="hidden" name="TipoConsultor" value="${item.tipo}" />
										`;

										tbody.appendChild(row);
									  });
															  document.querySelectorAll(".monto-input").forEach(input => {
													input.addEventListener("input", () => {

													const valorSinFormato = input.value.replace(/\D/g, "");
													if (valorSinFormato) {

												 input.value = parseInt(valorSinFormato).toLocaleString("es-CL");
													} else {
												  input.value = "";
													}
												});
												});
									}

									/*servicios nuevos*/
									function agregarFilaAConsultores() {
										const tbody = document.querySelector('#tablaAgregarConsultores tbody');

										const serviciosSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idconsultornuevos">
												<option value="" disabled selected>Seleccione un servicio</option>
												${listaconsultores.map(g => `<option value="${g.id}">${g.nombre}</option>`).join('')}
											</select>
										`;

										const proveedorSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idproveedorconsultornuevos">
											<option value=""  disabled selected>Seleccione un proveedor</option>
												${listaProveedoresconsultores.map(p => `<option value="${p.id}">${p.nombre}</option>`).join('')}
											</select>
										`;

										const estadoSelect = `
											<select name="estadoconsultornuevos"  class="border border-gray-300 rounded px-2 py-1">
												<option value="Forecast">Forecast</option>
												<option value="Pagada">Pagada</option>
											</select>
										`;

										const nuevaFila = document.createElement("tr");
										nuevaFila.classList.add("bg-white", "hover:bg-gray-50");

										nuevaFila.innerHTML = `
											<td class="p-1 border">${serviciosSelect}</td>
											<td class="p-1 border">${proveedorSelect}</td>
											<td class="p-1 border"><input type="text" name="montoconsultornuevos" class="monto-input w-full text-right border rounded px-2 py-1"></td>
											<td class="p-1 border"><input type="date" name="fechaconsultornuevos" class="w-full border rounded px-2 py-1"></td>
											<td class="p-1 border">${estadoSelect}</td>
											<td class="p-1 border"><textarea rows="2" name="observacionconsultornuevos" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea></td>
											<td style="display:none;">
												<input type="hidden" name="Idconsultorrealnuevos" value="" />
											</td>
											<td style="display:none;">
												<input type="hidden" name="EliminarconsultorOtroNuevo" class="EliminarServicioOtro" value="false" />
											</td>
											<input type="hidden" name="Tipoconsultornuevo" value="Consultores Externos" />
										`;

										tbody.appendChild(nuevaFila);


										nuevaFila.querySelector(".monto-input").addEventListener("input", function () {
											const valorSinFormato = this.value.replace(/\D/g, "");
											this.value = valorSinFormato ? parseInt(valorSinFormato).toLocaleString("es-CL") : "";
										});
									}

									document.addEventListener("DOMContentLoaded", async () => {

									  await cargarListasDeConsultoresYProveedores();


									  const contenedorBoton = document.getElementById("contenedorBotonConsultores");
									  const botonAgregar = document.createElement("button");
									  botonAgregar.id = "btnAgregarFilaConsultor";
									  botonAgregar.className = "mb-3 bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600";
									  botonAgregar.textContent = "Agregar Consultor";

									  contenedorBoton.appendChild(botonAgregar);


									  agregarFilaAConsultores();


									  botonAgregar.addEventListener("click", (e) => {
										  e.preventDefault();
										agregarFilaAConsultores();
									  });
									});

									function limpiarServicioHonorario(button) {

										var fila = button.closest('tr');


										var esEliminado = fila.querySelector('input.EliminarServicioHonorario');
										if (esEliminado) {
											esEliminado.value = 'true';
										}

										fila.style.display = 'none';


									}



								</script>
							</div>
						</div>
					</details>
				</form>
			</div>

			<!-- Servicios -->
			<div id="section-servicios" class="seccion hidden">
				<form method="post" asp-action="RegistrarServicios" asp-controller="EjecucionProyecto">
					<input type="hidden" name="idproyecto" value="@idproyecto" />
					@if (TempData["ErrorMessageServicios"] != null)
					{
						<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["ErrorMessageServicios"]
						</div>
					}
					@if (TempData["SuccessMessageServicios"] != null)
					{
						<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["SuccessMessageServicios"]
						</div>
					}
					@if (TempData["ErrorMessageServicios"] != null || TempData["SuccessMessageServicios"] != null)
					{
						<script>
							setTimeout(() => {
								document.querySelectorAll('[role="alert"]').forEach(alert => {
									alert.style.transition = "opacity 0.5s ease-out";
									alert.style.opacity = "0";
									setTimeout(() => alert.remove(), 500);
								});
							}, 5000);
						</script>
					}
					<h3 class="text-lg font-bold text-orange-500 mb-2">🛠 Servicios</h3>
					<div class="flex justify-center mb-4">
						<button type="submit" class="bg-black text-white px-4 py-2 cursor-pointer rounded-t hover:bg-gray-800 transition">
							Guardar Servicios
						</button>
					</div>
					<!-- Accordion: Agregar Servicio (cerrado, pero primero) -->
					<details class="border rounded mb-4">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">➕ Agregar Servicio</summary>
						<div class="p-4 bg-gray-50 rounded-b">

							<div class="overflow-x-auto">
								<table id="tablaAgregarServicios" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoServicio</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>

										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="contenedorBotonServicio"></div>
							</div>
						</div>
					</details>

					<!-- Accordion: Tabla de servicios (abierto por defecto, pero segundo) -->
					<details open class="border rounded">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">🛠 Servicios</summary>
						<div class="p-4 bg-gray-50 rounded-b">
							<div class="overflow-x-auto">
								<table id="tablaservicios" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoServicio</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Acción</th>
										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="mensajeServicios" class="text-left text-gray-500 mt-2"></div>
								<script>
									let listaServicios = [];
									let listaProveedoresservicios = [];


									async function cargarListasDeServiciosYProveedores() {
										try {
											const [servicios, proveedores] = await Promise.all([
												fetch('/EjecucionProyecto/GetServicios').then(res => res.json()),
												fetch('/EjecucionProyecto/GetProveedoresServicios').then(res => res.json())
											]);

											listaServicios = servicios;
											listaProveedoresservicios = proveedores;
										} catch (error) {
											console.error("Error al cargar listas de servicios y proveedores:", error);
										}
									}



									async function cargarDatosServicios(idProyecto, tipo) {
									  try {

										  const tbody = document.querySelector('#tablaservicios tbody');
												const mensajeDiv = document.getElementById("mensajeServicios");
												tbody.innerHTML = "";
												mensajeDiv.textContent = "Cargando Servicios...";

											await cargarListasDeServiciosYProveedores();


											const serviciosReales = await fetch(`/EjecucionProyecto/CargarServiciosReales?idproyecto=${idProyecto}&tipo=${tipo}`).then(res => res.json());

											if (serviciosReales.length > 0) {
												renderizarTablaServicio(serviciosReales);
												mensajeDiv.textContent = "";
												document.getElementById("tablaservicios").style.display = "";
											} else {
													mensajeDiv.textContent = "No hay servicios para este proyecto.";
													document.getElementById("tablaservicios").style.display = "none";
												}



									  } catch (error) {
										console.error("Error al cargar servicios:", error);
									  }
									}

										   function formatearMiles(valor) {
									  if (!valor) return "";
									  const numero = parseFloat(valor.toString().replace(/\./g, '').replace(',', '.'));
									  if (isNaN(numero)) return "";
									  return numero.toLocaleString("es-CL");
									}
									function renderizarTablaServicio(data) {
									  const tbody = document.querySelector('#tablaservicios tbody');
									  tbody.innerHTML = "";

									  data.forEach((item, index) => {
										const row = document.createElement('tr');
										row.classList.add("bg-white", "hover:bg-gray-50");

										// Select para servicio
										const servicioSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="Idservicio">
											${listaServicios.map(s => `
											  <option value="${s.id}" ${s.id === item.idservicio ? "selected" : ""}>${s.nombre}</option>
											`).join('')}
										  </select>
										`;

										// Select para Proveedor
										const proveedorSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="Idproveedorservicio">
											${listaProveedoresservicios.map(p => `
											  <option value="${p.id}" ${p.id === item.idproveedor ? "selected" : ""}>${p.nombre}</option>
											`).join('')}
										  </select>
										`;


											const Estadoselect = `
										<select name="estadoservicio"  class="border border-gray-300 rounded px-2 py-1">
											<option value="Forecast" ${item.estado === "Forecast" ? "selected" : ""}>Forecast</option>
											<option value="Pagada" ${item.estado === "Pagada" ? "selected" : ""}>Pagada</option>
										</select>
										`;


										row.innerHTML = `
										  <td class="p-1 border">${servicioSelect}</td>
										  <td class="p-1 border">${proveedorSelect}</td>
										  <td class="p-1 border"><input type="text" name="montoservicio" value="${formatearMiles(item.monto)}" class="monto-input min-w-[160px] w-full text-right border rounded px-2 py-1"></td>
										  <td class="p-1 border"><input type="date" name="fechaservicio" value="${item.fecha.split('T')[0]}" class="w-full border rounded px-2 py-1"></td>
										  <td class="p-1 border">${Estadoselect}</td>
										  <td class="p-1 border"><textarea rows="2" name="observacionservicio" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">${item.observacion}</textarea></td>
										  <td class="p-1 border"><input type="text" readonly name="cuentaservicio" value="${item.cuenta}" class="w-full border rounded px-2 py-1"></td>
										  <td class="p-1 border text-center">
											<button type="button" class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600" onclick="limpiarServicioOtro(this)">🗑️</button>
										  </td>
										  <td style="display:none;">
												<input type="hidden" name="EliminarServicioOtro" class="EliminarServicioOtro" value="false" />
											</td>
										  <input type="hidden" name="IdServicioReal" value="${item.idservicioreal}" />
										<input type="hidden" name="Tiposervicio" value="${item.tipo}" />
										`;

										tbody.appendChild(row);
									  });
												document.querySelectorAll(".monto-input").forEach(input => {
													input.addEventListener("input", () => {

													const valorSinFormato = input.value.replace(/\D/g, "");
													if (valorSinFormato) {

												 input.value = parseInt(valorSinFormato).toLocaleString("es-CL");
													} else {
												  input.value = "";
													}
												});
												});
									}
									/*servicios nuevos*/
									function agregarFilaAServicios() {
										const tbody = document.querySelector('#tablaAgregarServicios tbody');

										const serviciosSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idservicionuevos">
												<option value="" disabled selected>Seleccione un servicio</option>
												${listaServicios.map(g => `<option value="${g.id}">${g.nombre}</option>`).join('')}
											</select>
										`;

										const proveedorSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idproveedorgastosnuevos">
											<option value=""  disabled selected>Seleccione un proveedor</option>
												${listaProveedoresservicios.map(p => `<option value="${p.id}">${p.nombre}</option>`).join('')}
											</select>
										`;

										const estadoSelect = `
											<select name="estadoserviciosnuevos"  class="border border-gray-300 rounded px-2 py-1">
												<option value="Forecast">Forecast</option>
												<option value="Pagada">Pagada</option>
											</select>
										`;

										const nuevaFila = document.createElement("tr");
										nuevaFila.classList.add("bg-white", "hover:bg-gray-50");

										nuevaFila.innerHTML = `
											<td class="p-1 border">${serviciosSelect}</td>
											<td class="p-1 border">${proveedorSelect}</td>
											<td class="p-1 border"><input type="text" name="montoserviciosnuevos" class="monto-input w-full text-right border rounded px-2 py-1"></td>
											<td class="p-1 border"><input type="date" name="fechaserviciosnuevos" class="w-full border rounded px-2 py-1"></td>
											<td class="p-1 border">${estadoSelect}</td>
											<td class="p-1 border"><textarea rows="2" name="observacionservicionuevos" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea></td>
											<td style="display:none;">
												<input type="hidden" name="IdServicioRealnuevos" value="" />
											</td>
											<td style="display:none;">
												<input type="hidden" name="EliminarServicioOtroNuevo" class="EliminarServicioOtro" value="false" />
											</td>
											<input type="hidden" name="Tiposervicionuevo" value="Otros" />
										`;

										tbody.appendChild(nuevaFila);


										nuevaFila.querySelector(".monto-input").addEventListener("input", function () {
											const valorSinFormato = this.value.replace(/\D/g, "");
											this.value = valorSinFormato ? parseInt(valorSinFormato).toLocaleString("es-CL") : "";
										});
									}

									document.addEventListener("DOMContentLoaded", async () => {

									  await cargarListasDeServiciosYProveedores();


									  const contenedorBoton = document.getElementById("contenedorBotonServicio");
									  const botonAgregar = document.createElement("button");
									  botonAgregar.id = "btnAgregarFilaServicio";
									  botonAgregar.className = "mb-3 bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600";
									  botonAgregar.textContent = "Agregar Servicio";

									  contenedorBoton.appendChild(botonAgregar);


									  agregarFilaAServicios();


									  botonAgregar.addEventListener("click", (e) => {
										  e.preventDefault();
										agregarFilaAServicios();
									  });
									});


									function limpiarServicioOtro(button) {
										var fila = button.closest('tr');


										var esEliminado = fila.querySelector('input.EliminarServicioOtro');
										if (esEliminado) {
											esEliminado.value = 'true';
										}

										fila.style.display = 'none';
									}

								</script>
							</div>
						</div>
					</details>
				</form>
			</div>

			<!-- Gastos -->

			<div id="section-gastos" class="seccion hidden">
				<form method="post" asp-action="RegistrarGastos" asp-controller="EjecucionProyecto">
					<input type="hidden" name="idproyecto" value="@idproyecto" />
					@if (TempData["ErrorMessageGastos"] != null)
					{
						<div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["ErrorMessageGastos"]
						</div>
					}
					@if (TempData["SuccessMessageGastos"] != null)
					{
						<div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4" role="alert">
							@TempData["SuccessMessageGastos"]
						</div>
					}
					@if (TempData["ErrorMessageGastos"] != null || TempData["SuccessMessageGastos"] != null)
					{
						<script>
							setTimeout(() => {
								document.querySelectorAll('[role="alert"]').forEach(alert => {
									alert.style.transition = "opacity 0.5s ease-out";
									alert.style.opacity = "0";
									setTimeout(() => alert.remove(), 500);
								});
							}, 5000);
						</script>
					}
					<h3 class="text-lg font-bold text-orange-500 mb-2">💸 Gastos</h3>
					<div class="flex justify-center mb-4">
						<button type="submit" class="bg-black text-white px-4 py-2 cursor-pointer rounded-t hover:bg-gray-800 transition">
							Guardar Gastos
						</button>
					</div>
					<!-- Accordion: Agregar Gasto (cerrado, pero primero) -->
					<details class="border rounded mb-4">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">➕ Agregar Gasto</summary>
						<div class="p-4 bg-gray-50 rounded-b">

							<div class="overflow-x-auto">
								<table id="tablaAgregarGastos" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoGasto</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>

										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="contenedorBoton"></div>
							</div>
						</div>
					</details>

					<!-- Accordion: Tabla de Gastos (abierto por defecto, pero segundo) -->
					<details open class="border rounded">
						<summary class="bg-orange-500 text-white px-4 py-2 cursor-pointer rounded-t">📄 Gastos</summary>
						<div class="p-4 bg-gray-50 rounded-b">
							<div class="overflow-x-auto">
								<table id="tablagastos" class="min-w-full text-xs border-collapse">
									<thead>
										<tr class="bg-orange-100 text-black">
											<th class="p-2 border border-gray-300 text-left">TipoGasto</th>
											<th class="p-2 border border-gray-300 text-left">Proveedor</th>
											<th class="p-2 border border-gray-300 text-left">Monto</th>
											<th class="p-2 border border-gray-300 text-left">FechaPago</th>
											<th class="p-2 border border-gray-300 text-left">Estado</th>
											<th class="p-2 border border-gray-300 text-left">Glosa</th>
											<th class="p-2 border border-gray-300 text-left">Cuenta Contable</th>
											<th class="p-2 border border-gray-300 text-left">Eliminar</th>
										</tr>
									</thead>
									<tbody>
									</tbody>
								</table>
								<div id="mensajeGastos" class="text-left text-gray-500 mt-2"></div>

								<script>

																	   let listaGastos = [];
									let listaProveedores = [];

									// Cargar solo una vez
									async function cargarListasDeGastosYProveedores() {
									  try {
										const [gastos, proveedores] = await Promise.all([
										  fetch('/EjecucionProyecto/GetGastos').then(res => res.json()),
										  fetch('/EjecucionProyecto/GetProveedoresGastos').then(res => res.json())
										]);

										listaGastos = gastos;
										listaProveedores = proveedores;
									  } catch (error) {
										console.error("Error al cargar listas de gastos y proveedores:", error);
									  }
									}

									// Se ejecuta al cargar la página
									document.addEventListener("DOMContentLoaded", () => {
									  cargarListasDeGastosYProveedores();

									  // Delegación de eventos para inputs con formato
									  const tbody = document.querySelector('#tablagastos tbody');
									  tbody.addEventListener("input", function (e) {
										if (e.target.classList.contains("monto-input")) {
										  const input = e.target;
										  const valorSinFormato = input.value.replace(/\D/g, "");
										  input.value = valorSinFormato ? parseInt(valorSinFormato).toLocaleString("es-CL") : "";
										}
									  });
									});

									async function cargarDatosGastos(idProyecto) {
									  try {
										const tbody = document.querySelector('#tablagastos tbody');
										const mensajeDiv = document.getElementById("mensajeGastos");
										tbody.innerHTML = "";
										mensajeDiv.textContent = "Cargando Gastos...";

										const gastosReales = await fetch(`/EjecucionProyecto/CargarGastosReales?idproyecto=${idProyecto}`).then(res => res.json());

										if (gastosReales.length > 0) {
										  renderizarTablaGastos(gastosReales);
										  mensajeDiv.textContent = "";
										  document.getElementById("tablagastos").style.display = "";
										} else {
										  mensajeDiv.textContent = "No hay gastos para este proyecto.";
										  document.getElementById("tablagastos").style.display = "none";
										}
									  } catch (error) {
										console.error("Error al cargar gastos:", error);
									  }
									}

									function formatearMiles(valor) {
									  if (!valor) return "";
									  const numero = parseFloat(valor.toString().replace(/\./g, '').replace(',', '.'));
									  if (isNaN(numero)) return "";
									  return numero.toLocaleString("es-CL");
									}

									function renderizarTablaGastos(data) {
									  const tbody = document.querySelector('#tablagastos tbody');
									  tbody.innerHTML = "";

									  let html = "";

									  data.forEach((item) => {
										const gastoSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="idgastos">
											${listaGastos.map(g => `
											  <option value="${g.id}" ${g.id === item.idGasto ? "selected" : ""}>${g.nombre}</option>
											`).join('')}
										  </select>
										`;

										const proveedorSelect = `
										  <select class="border border-gray-300 rounded px-2 py-1" name="idproveedorgastos">
											${listaProveedores.map(p => `
											  <option value="${p.id}" ${p.id === item.idProveedor ? "selected" : ""}>${p.nombre}</option>
											`).join('')}
										  </select>
										`;

										const estadoSelect = `
										  <select name="estadogasto" class="border border-gray-300 rounded px-2 py-1">
											<option value="Forecast" ${item.estado === "Forecast" ? "selected" : ""}>Forecast</option>
											<option value="Pagada" ${item.estado === "Pagada" ? "selected" : ""}>Pagada</option>
										  </select>
										`;

										html += `
										  <tr class="bg-white hover:bg-gray-50">
											<td class="p-1 border">${gastoSelect}</td>
											<td class="p-1 border">${proveedorSelect}</td>
											<td class="p-1 border">
											  <input type="text" name="montogasto" value="${formatearMiles(item.monto)}"
											  class="monto-input min-w-[160px] w-full text-right border rounded px-2 py-1">
											</td>
											<td class="p-1 border">
											  <input type="date" name="fechagasto" value="${item.fecha.split('T')[0]}" class="w-full border rounded px-2 py-1">
											</td>
											<td class="p-1 border">${estadoSelect}</td>
											<td class="p-1 border">
											  <textarea rows="2" name="observaciongasto" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48">${item.observacion}</textarea>
											</td>
											<td class="p-1 border">
											  <input type="text" readonly name="cuentagasto" value="${item.cuenta}" class="w-full border rounded px-2 py-1">
											</td>
											<td style="display:none;">
											  <input type="hidden" name="esEliminados" class="esEliminados" value="false" />
											</td>
											<td class="p-1 border text-center">
											  <button type="button" class="bg-red-500 text-white px-2 py-1 rounded text-xs hover:bg-red-600" onclick="limpiarFilagasto(this)">🗑️</button>
											</td>
											<input type="hidden" name="IdGastoReal" value="${item.idGastosReal}"/>
										  </tr>
										`;
									  });

									  tbody.innerHTML = html;
									}


									/*gastos nuevos*/
									function agregarFilaAGastos() {
										const tbody = document.querySelector('#tablaAgregarGastos tbody');

										const gastoSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idgastosnuevos">
												<option value="" disabled selected>Seleccione un gasto</option>
												${listaGastos.map(g => `<option value="${g.id}">${g.nombre}</option>`).join('')}
											</select>
										`;

										const proveedorSelect = `
											<select class="border border-gray-300 rounded px-2 py-1" name="idproveedorgastosnuevos">
											<option value=""  disabled selected>Seleccione un proveedor</option>
												${listaProveedores.map(p => `<option value="${p.id}">${p.nombre}</option>`).join('')}
											</select>
										`;

										const estadoSelect = `
											<select name="estadogastonuevos"  class="border border-gray-300 rounded px-2 py-1">
												<option value="Forecast">Forecast</option>
												<option value="Pagada">Pagada</option>
											</select>
										`;

										const nuevaFila = document.createElement("tr");
										nuevaFila.classList.add("bg-white", "hover:bg-gray-50");

										nuevaFila.innerHTML = `
											<td class="p-1 border">${gastoSelect}</td>
											<td class="p-1 border">${proveedorSelect}</td>
											<td class="p-1 border"><input type="text" name="montogastonuevos" class="monto-input w-full text-right border rounded px-2 py-1"></td>
											<td class="p-1 border"><input type="date" name="fechagastonuevos" class="w-full border rounded px-2 py-1"></td>
											<td class="p-1 border">${estadoSelect}</td>
											<td class="p-1 border"><textarea rows="2" name="observaciongastonuevos" class="form-control text-left px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 w-48"></textarea></td>
											<td style="display:none;">
												<input type="hidden" name="IdGastoRealnuevos" value="" />
											</td>
											<td style="display:none;">
												<input type="hidden" name="esEliminadosnuevos" class="esEliminados" value="false" />
											</td>
										`;

										tbody.appendChild(nuevaFila);


										nuevaFila.querySelector(".monto-input").addEventListener("input", function () {
											const valorSinFormato = this.value.replace(/\D/g, "");
											this.value = valorSinFormato ? parseInt(valorSinFormato).toLocaleString("es-CL") : "";
										});
									}

									document.addEventListener("DOMContentLoaded", async () => {

									  await cargarListasDeGastosYProveedores();


									  const contenedorBoton = document.getElementById("contenedorBoton");
									  const botonAgregar = document.createElement("button");
									  botonAgregar.id = "btnAgregarFila";
									  botonAgregar.className = "mb-3 bg-orange-500 text-white px-4 py-2 rounded hover:bg-orange-600";
									  botonAgregar.textContent = "Agregar fila";

									  contenedorBoton.appendChild(botonAgregar);


									  agregarFilaAGastos();


									  botonAgregar.addEventListener("click", (e) => {
										  e.preventDefault();
										agregarFilaAGastos();
									  });
									});
									/*Eliminar Gasto*/
									function limpiarFilagasto(button) {
										var fila = button.closest('tr');


										var esEliminado = fila.querySelector('input.esEliminados');
										if (esEliminado) {
											esEliminado.value = 'true';
										}

										fila.style.display = 'none';

									}


								</script>
							</div>
						</div>
					</details>
				</form>
			</div>

		</main>
	</div>
</div>

<script>
	const buttons = document.querySelectorAll("aside button");
	const sections = document.querySelectorAll(".seccion");
	 const idProyectoActual = '@idproyectos';
	 let gastosCargados = false;
	 let serviciosCargados = false;
	 let consultoresCargados = false;
	 let ResumenCostos = false;
	 document.addEventListener("DOMContentLoaded", () => {

			cargarDatosCosto(idProyectoActual);
			ResumenCostos = true;
	});
	buttons.forEach(btn => {
	  btn.addEventListener("click", () => {
		const target = btn.dataset.section;
		sections.forEach(sec => sec.classList.add("hidden"));
		document.getElementById(`section-${target}`).classList.remove("hidden");
		 if (target === "gastos" && !gastosCargados) {
			 cargarDatosGastos(idProyectoActual);
			gastosCargados = true;
		}
		if (target === "servicios" && !serviciosCargados) {
			cargarDatosServicios(idProyectoActual,"Otros");
			serviciosCargados = true;
		}
		if (target === "consultores" && !consultoresCargados) {

				cargarDatosConsultores(idProyectoActual,"Consultores Externos");
				consultoresCargados = true;
		}
		if(target === "general" && !ResumenCostos) {

			cargarDatosCosto(idProyectoActual);
			ResumenCostos = true;

		}
	  });
	});
	window.addEventListener("DOMContentLoaded", () => {
		const hash = window.location.hash;
		if (hash.startsWith("#section-")) {
			const targetSection = hash.replace("#section-", "");
			const button = document.querySelector(`button[data-section="${targetSection}"]`);
			if (button) button.click();
		}
	});

</script>
<script>
	function mostrarCargando() {
	  document.getElementById('modal-loading').classList.remove('hidden');
	}

	function ocultarCargando() {
	  document.getElementById('modal-loading').classList.add('hidden');
		}



</script>

