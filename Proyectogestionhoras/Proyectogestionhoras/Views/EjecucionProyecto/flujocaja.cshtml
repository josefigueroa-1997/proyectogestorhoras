<style>
    table {
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid #000;
        padding: 8px;
        text-align: center;
    }

    th {
        background-color: #f2f2f2;
    }
</style>

    <div style="margin-top:90px;" id="tablaFlujoCaja"></div>
<script>
    async function obtenerFlujoCaja(id) {
        const response = await fetch(`/EjecucionProyecto/ObtenerFlujo/${id}`);
        const data = await response.json();
        return data;
    }

    function formatearMes(mes, anio) {
        const opciones = { month: 'long', year: 'numeric' };
        const fecha = new Date(anio, mes - 1); // mes - 1 porque los meses en JS son 0-indexed
        return fecha.toLocaleDateString('es-ES', opciones);
    }

    function crearTabla(flujoCaja) {
        const tabla = document.createElement('table');

        // Cabecera
        const thead = document.createElement('thead');
        const cabeceraRow = document.createElement('tr');

        cabeceraRow.innerHTML = `
            <th>Tipo</th>
            <th>Id Cuenta</th>
            <th>Cuenta</th>
            <th>Glosa</th>
        `;

        // Obtener meses únicos y ordenarlos
        const mesesUnicos = [...new Set(flujoCaja.map(item => `${item.mes}-${item.anio}`))];
        mesesUnicos.sort((a, b) => new Date(a.split('-')[1], a.split('-')[0] - 1) - new Date(b.split('-')[1], b.split('-')[0] - 1));

        // Agregar columnas de meses
        mesesUnicos.forEach(mesAnio => {
            const [mes, anio] = mesAnio.split('-');
            cabeceraRow.innerHTML += `<th colspan="3">${formatearMes(mes, anio)}</th>`;
        });

        thead.appendChild(cabeceraRow);

        // Segunda fila (Proyectado, Real, Forecast)
        const subCabeceraRow = document.createElement('tr');
        subCabeceraRow.innerHTML = `<th></th><th></th><th></th><th></th>`;

        mesesUnicos.forEach(() => {
            subCabeceraRow.innerHTML += `<th>Proyectado</th><th>Real</th><th>Forecast</th>`;
        });

        thead.appendChild(subCabeceraRow);
        tabla.appendChild(thead);

        // Cuerpo de la tabla
        const tbody = document.createElement('tbody');

        // Agrupar por Tipo y luego por Cuenta
        const gruposPorTipoYCuenta = flujoCaja.reduce((acc, item) => {
            if (!acc[item.tipo]) {
                acc[item.tipo] = {};
            }
            if (!acc[item.tipo][item.idCuenta]) {
                acc[item.tipo][item.idCuenta] = [];
            }
            acc[item.tipo][item.idCuenta].push(item);
            return acc;
        }, {});

        for (const tipo in gruposPorTipoYCuenta) {
            const cuentas = gruposPorTipoYCuenta[tipo];

            // Calcular totales por mes y estado
            const totalesPorMes = {};
            mesesUnicos.forEach(mesAnio => {
                const [mes, anio] = mesAnio.split('-');
                totalesPorMes[mesAnio] = { proyectado: 0, real: 0, forecast: 0 };

                for (const idCuenta in cuentas) {
                    cuentas[idCuenta].forEach(item => {
                        if (item.mes == mes && item.anio == anio) {
                            if (item.estado === 'Proyectado') totalesPorMes[mesAnio].proyectado += item.monto;
                            if (item.estado === 'Real') totalesPorMes[mesAnio].real += item.monto;
                            if (item.estado === 'Forecast') totalesPorMes[mesAnio].forecast += item.monto;
                        }
                    });
                }
            });

            // Fila de totales por tipo
            const totalRow = document.createElement('tr');
            totalRow.innerHTML = `<td rowspan="${Object.keys(cuentas).length}">${tipo}</td>`;

            let firstAccountRow = true; // Para controlar la primera fila de cuenta

            for (const idCuenta in cuentas) {
                const itemsCuenta = cuentas[idCuenta];

                // Si es la primera cuenta, mostrar los totales en esa fila
                if (firstAccountRow) {
                    totalRow.innerHTML += `<td>${itemsCuenta[0].idCuenta}</td><td>${itemsCuenta[0].cuenta}</td><td></td>`;
                    mesesUnicos.forEach(mesAnio => {
                        totalRow.innerHTML += `
                            <td>${totalesPorMes[mesAnio].proyectado}</td>
                            <td>${totalesPorMes[mesAnio].real}</td>
                            <td>${totalesPorMes[mesAnio].forecast}</td>`;
                    });
                    tbody.appendChild(totalRow);
                    firstAccountRow = false; // Cambiar a false después de agregar la primera fila
                } else {
                    // Para las demás cuentas, solo mostrar id y cuenta
                    const row = document.createElement('tr');
                    row.innerHTML = `<td></td><td>${itemsCuenta[0].idCuenta}</td><td>${itemsCuenta[0].cuenta}</td><td></td>`;
                    mesesUnicos.forEach(mesAnio => {
                        const [mes, anio] = mesAnio.split('-');

                        // Obtener el monto específico para cada estado y mes
                        const montoProyectado = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Proyectado')?.monto || 0;
                        const montoReal = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Real')?.monto || 0;
                        const montoForecast = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Forecast')?.monto || 0;

                        row.innerHTML += `<td>${montoProyectado}</td><td>${montoReal}</td><td>${montoForecast}</td>`;
                    });
                    tbody.appendChild(row);
                }

                // Filas por glosa específicas para esta cuenta
                itemsCuenta.forEach(item => {
                    if (item.glosa) { // Solo si hay glosa
                        const rowGlosa = document.createElement('tr');
                        rowGlosa.innerHTML = `<td></td><td></td><td></td><td>${item.glosa}</td>`;

                        mesesUnicos.forEach(mesAnio => {
                            const [mes, anio] = mesAnio.split('-');

                            // Obtener el monto específico para cada estado y mes
                            const montoProyectadoG = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Proyectado' && f.glosa === item.glosa)?.monto || 0;
                            const montoRealG = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Real' && f.glosa === item.glosa)?.monto || 0;
                            const montoForecastG = itemsCuenta.find(f => f.mes == mes && f.anio == anio && f.estado === 'Forecast' && f.glosa === item.glosa)?.monto || 0;

                            rowGlosa.innerHTML += `<td>${montoProyectadoG}</td><td>${montoRealG}</td><td>${montoForecastG}</td>`;
                        });

                        tbody.appendChild(rowGlosa);
                    }
                });
            }
        }

        tabla.appendChild(tbody);
        document.getElementById('tablaFlujoCaja').appendChild(tabla);
    }

    async function init() {
        const idProyecto = 215; // Cambia esto según sea necesario
        const flujoCajaData = await obtenerFlujoCaja(idProyecto);

        if (flujoCajaData.length > 0) {
            crearTabla(flujoCajaData);
        } else {
            document.getElementById('tablaFlujoCaja').innerText = 'No hay datos disponibles.';
        }
    }

    init();
</script>