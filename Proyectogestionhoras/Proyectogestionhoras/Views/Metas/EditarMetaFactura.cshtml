@model List<Proyectogestionhoras.Models.DTO.MetaFacturacionqxDTO>
<div class="max-w-lg mx-auto bg-white py-14 p-6 rounded-lg shadow-md">


    @foreach (var f in Model)
    {
        <h2 class="text-2xl font-bold text-gray-800 mb-4">Meta FacturaciónQ Año:@f.Anio</h2>
        <form method="post" action="@Url.Action("ActualizarMetaFactura","Metas")" class="space-y-4">
           
            <input type="hidden" name="id" value="@f.Id"/>
            <div>
                <label for="anio" class="block text-sm font-medium text-gray-700">Año</label>
                <input type="number" id="anio" name="anio" class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500" readonly value="@f.Anio" />
            </div>

           
            <div>
                <label for="montoQ1" class="block text-sm font-medium text-gray-700">Monto Q1</label>
                <input type="text" id="montoQ1" name="montoQ1"
                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                       value="@String.Format("{0:N0}", @f.q1)" required oninput="formatAndCalculate(this);" />
            </div>

           
            <div>
                <label for="montoQ2" class="block text-sm font-medium text-gray-700">Monto Q2</label>
                <input type="text" id="montoQ2" name="montoQ2"
                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                       value="@String.Format("{0:N0}", @f.q2)" required oninput="formatAndCalculate(this);" />
            </div>

           
            <div>
                <label for="montoQ3" class="block text-sm font-medium text-gray-700">Monto Q3</label>
                <input type="text" id="montoQ3" name="montoQ3"
                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                       value="@String.Format("{0:N0}", @f.q3)" required oninput="formatAndCalculate(this);" />
            </div>

          
            <div>
                <label for="montoQ4" class="block text-sm font-medium text-gray-700">Monto Q4</label>
                <input type="text" id="montoQ4" name="montoQ4"
                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500"
                       value="@String.Format("{0:N0}", @f.q4)" required oninput="formatAndCalculate(this);" />
            </div>

            <div>
                <label for="montototal" class="block text-sm font-medium text-gray-700">Monto Total</label>
                <input type="text" id="montototal" name="montototal"
                       class="mt-1 block w-full p-2 border border-gray-300 rounded-md text-right shadow-sm focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-orange-500" readonly />
            </div>
           
            <div>
                <button type="submit" class="w-full bg-orange-600 text-white py-2 px-4 rounded-md shadow hover:bg-orange-700 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:ring-opacity-50">
                    Guardar
                </button>
            </div>
        </form>
    }
</div>


<script>
    function formatAndCalculate(input) {
        // Formatear el valor para que tenga puntos y coma
        let value = input.value.replace(/[^0-9.,]/g, '');

        // Asegurar un solo punto y una coma
        const parts = value.split(',');
        if (parts.length > 2) {
            value = parts[0] + ',' + parts.slice(1).join('');
        }

        const decimalPart = parts[1] || '';
        if (decimalPart.length > 2) {
            value = parts[0] + ',' + decimalPart.slice(0, 2);
        }

        // Formatear la parte entera con puntos como separadores de miles
        const integerPart = parts[0].replace(/\./g, '');
        const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, '.');

        // Actualizar el campo de entrada
        input.value = formattedInteger + (decimalPart ? ',' + decimalPart : '');

        // Calcular el total
        calculateTotal();
    }

    function calculateTotal() {
        let total = 0;
        const fields = ['montoQ1', 'montoQ2', 'montoQ3', 'montoQ4'];

        fields.forEach(function (fieldId) {
            const value = document.getElementById(fieldId).value.replace(/\./g, '').replace(/,/g, '.');
            total += parseFloat(value) || 0; // Sumar al total, manejando NaN
        });

        // Formatear el total para que tenga el formato correcto
        document.getElementById('montototal').value = total.toLocaleString('de-DE', { minimumFractionDigits: 0, maximumFractionDigits: 0 });
    }

    // Calcular el total al cargar la página
    document.addEventListener("DOMContentLoaded", function () {
        calculateTotal();
    });
</script>